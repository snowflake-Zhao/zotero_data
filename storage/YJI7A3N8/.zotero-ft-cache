教育部“国家精品在线开放课程”配套教材 
清华大学出版社 
 
 
 21 世纪高等学校规划教材.计算机科学与技术 
C++语言程序设计(MOOC 版) 
(第 2 版) 
阐道宏编著 
清华大学出版社 
北京 
 
 
 内容简 介 
本书是在《 C++语言程序设计 (MOOC 版)》的基础上进一步总结爱课程网 ”中 国大学 MOOC " 
(http ://www.icomsel63.org/) 的网络教学实践修订而成。本书按照实际编程应用来梳理和组织 C++语言的知 
识点 , 按章节顺序可分为程序设计基础、结构化程序设计方法和面向对象程序设 计方法三大 部分。内容编 
排由 易 到难,循序渐进。每个小节都设计了适合在线评判的单选练习题,每章则设计 了适合课堂讨论的程 
序阅读题 、 改错题和编程题。 
凡开设 " C++语言程序设计 ”课程的教师可将本书作为授课教材使用 , 联系作者可免费获得配套教学 
课件。参加慕课(MOOC)或其他网络课程学习的学生可将本书作为线 下 阅读教材使用。 
本书封面贴有 清华大学出版社防伪标签,无标签者不得销售 。 版权所有,侵权必究 。 侵权举报电话: 010-62782989 13701121933 
图书在版编目 (CIP) 数据 
C++语言程序设计: MOOC 版/ 阐 道宏编著 —2 版 一北京 : 清华 大 学 出 版社, 2017 ( 2018.1 重印) 
( 21 世 纪高等学 校规划教 材 · 计 算机科学与技 术 ) 
ISBN 978-7-302-47562-0 
I. (DC··· II @阐 ... III. (DC 语言-程序设计-高等学校-教材 IV. (DTP312.8 
中 国版本图书馆 CIP 数据核字 ( 2017 ) 第 140800 号 
贵任编辑 : 郑寅埜 封面设计 : 傅瑞学 贵任校对 : 梁毅 贵任印制 : 李红英 
出版发行 : 清华 大 学 出 版社 
网 址 : http : //www.tup.com.cn, http : //www.wqbook.com 
地 址 : 北京清华 大 学学研大厦 A 座 邮 编 : 100084 社总 机 : 010-62770175 邮 购 : 010-62786544 
投稿与读者服务: 010-62776969, c-se1vice@tup.tsinghua.edu.cn 
质量反馈 : 010-62772015, zhiliang@tup.tsinghua.edu.cn 
课件下载: http: //www.tup.com.cn,010-62795954 印装者 : 清华大学印刷厂 经 销 : 全国新华书店 开 本 : 1 8 5mmx260mm 印张 : 29.75 字数 : 721 于字 版 次 : 2016 年 2 月第 1 版 2017 年 10 月第 2 版 印次 : 2018 年 1 月第 2 次印刷 印数 : 2001 ~ 3000 定价 : 59.00 元 
产品编号 : 074877-02 
 
 
 出脏貌翡l 
随着我国改革开放的进一步深化,高等教育也得到了快速发展,各地高校紧密结合地 
方经济建设发展需要,科学运用市场调节机制,加大了使用信息科学等现代科学技术提升、 
改造传统学科专业的投入力度,通过教育改革合理调整和配置了教育资源,优化了传统学 
科专 业,积极为地方经济建设输送人才,为我国经济社会的快速、健康和可持续发展以及 
高等教育自身 的改革发展做出了巨大贡献 。但是 ,高等教育质 噩还需要进一步提高 以适应 
经济社会发展的需要,不少高校的专业设置和结构不尽合理,教师队伍整体素质亟待提高, 
人才培养模式、教学内容和方法 需要进一步转变,学生的实践能力和创新精神亟待加强。 
教育部一直十分重视高等教育质噩工作。 2007 年 1 月,教育部下发了《关于实施高等 
学校本科教学质盔与教学改革工程的意见》,计划实施“高等学校本科教学质噩与教学改革 
工程(简称 '质 盔工程 ' )“,通过专业结构调整、课程教材建设、实践教学改革、教学团队 
建设等多项内容,进一步深化高等学校教学改革,提高人才培养的能力和水平,更好地满 
足经济社会发展对高素质人才的需要。在贯彻和落实教育部“质盔工程 ” 的过程中,各地 
高校发挥师资力 盔强 、办学经验丰富、教学资源充裕等优势,对其特色专业及特色课程(群) 
加以规划、整理和总结,更新教学内容、改革课程体系,建设了 一大批内容新、体系新、 
方法新、手段新的特色课程。在此基础上,经教育部相关教学指导委员会专家的指导和建 
议,清华大学出版社在多个领域精选各高校的特色课程,分别规划出版系列教材,以配合 
“质 量:工程 ”的实施,满足各高校教学质 盔和教学改革的 需要。 
为了深入贯彻落实教育部《关于加强高等学校本科教学工作,提高教学质盔的若干 
意见》精神,紧密配合教育部已经启动的“高等学校教学质噩与教学改革工程精品课程 
建设工作“,在有关专家、教授的倡议和有关部门的大力支持下,我们组织并成立了“清 
华大学出版社教材编审委员会 ” (以下简称“编委会 ” ),旨在配合教育部制定精品课程教 
材的出版规划,讨论并实施精品课程教材的编写与出版工作 。 "编委会”成员皆来自全国 
各类高等学校教学与科研第一线的骨干教师,其中许多教师为各校相关院、系主管教学 
的院长或系主任 。 
按照教育部的要求,“编委会 ”一致认为,精品课程的建设工作从开始就要坚持高标 准、 
严要求,处千一个比较高的起点上 ; 精品课程教材应该能够反映各高校教学改革与课程建 
设的需要,要有特色风格、有创新性(新体系、新内容、新手段、新思路,教材的内容体 
系有较高的科学创新、技术创新和理念创新的含盔)、先进性(对原有的学科体系有实质性 
的改革和发展,顺应并符合 2 1 世纪教学发展的规律,代表并引领课程发展的趋势和方向)、 
示范性(教材所体现的课程体系具有较广泛的辐射性和示范性)和一定的前瞻性。教材由 
个人申报或各校推荐(通过所在高校 的“编委会”成员推荐),经“编委会”认真评审,最 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
后由清华大学出版社审定出版。目前,针对计算机类和电子信息类相关专业成立了两个 “ 编 
委会 “,即“ 清华大学出版社计算机教材编审委员会”和“清华大学出版社电子信息教材编 
审委员会”。推出的特色精品教材包括 : 
(1) 21 世纪高等学校规划教材 · 计算机应用一寸寄等学校各类专业,特别是非计算机 
专业的计算机应用类教材 。 
( 2 ) 2 1 世纪 高等学校规划教材 · 计算机科学与技术一一高等学校计算机相关专业的 
教材。 
(3) 21 世纪高等学校规划教材 · 电子信息—寸荀等学校电子信息相关专业的教材。 
( 4 ) 21 世纪高等学校规划教材 · 软件工程—一高等学校软件工程相关专业的教材。 
( 5 ) 21 世纪高等学校规划教材 · 信息管理与信息系统。 
( 6 ) 21 世纪高等学校规划教材 · 财经管理与应用。 
(7) 21 世纪高等学校规划教材 · 电子商务。 
(8) 21 世纪高等学校规划教材 · 物联网。 
清华大学出版社经过三十多年的努力,在教材尤其是计算机和电子信息类专业教材出 
版方面树立了权威品牌,为我国的高等教育事业做出了重要贡献。清华版教材形成了技术 
准确 、 内容严谨的独特风格,这种风格将延续并反映在特色精品教材的建设中。 
清华大学出版社教材编审委员会 
联系人 : 魏江江 
E-mail:weijj@tup.tsinghua .edu.cn 
 
 
 本书是在《C++语言程序设计(MOOC 版)》的 基础上进一步总结爱课程网” 中国大学 
MOOC " (http://www.icourse163.org/) 的网络教学实践修订 而成。依据本教材开设的 “C++语 
言程序设计 “ MOOC(慕课)课程 已开设四个学期 , 累计选课人数超过十万人 。 
MOOC 学员能够积极参与课堂讨论,提出各种问题,并对如何开展 C丑语言程序设计 
教学提出了很多宝贵的意见和建议。这里分享几个 MOOC 课堂的精华贴。 
【 空空 mooc369 】: 这门课是学软件的,为什么第 1 章很多内容是关千硬件的呀? 
【 教师回复 】: 初学者学习程序设计,首先应树立以下两个观念。 
(1) 程序员向计算机硬件下达指令,然后由硬件执行指令 。程序员应首先了解硬件的 
基本结构和 工作原理 ,这样才能知道如何向硬件下达指令 。 
(2) 程序是一组下达给计算机硬件的指令序列(或称为语句序列)。仅从语法角度去 
理解,语句是抽象的。初学者要学会从有形的硬件去理解抽象的语句和语法。 
程序设计课程只在—开始简单介绍—下硬件,后续章节在讲解 C丑一语法时会提及 内存 
或 CPU 等硬件。 
<luckymooc360 >: C吁语言为什么提 出引用 和指针的概念? 
【 教师回复 】: 程序员通过定义变盔来申请内存,再用变盔名访问所分配的内存单元。 
大 型程序需要多个程序员协作开发 ,共同 完成。如果其他程序员想访间上述变噩的内存单 
元 ,例如读取其中的数据,可以吗?答案是肯定的 ,可以,但只能通过引用或指针来访问 
(即间接访问)。 
【 小 二上盘 ID 】: 老师,我们学校先学 C 语言,然后学的是 C#和 Java。怎样才能学好 
程序设计?以后从事工作用 Java 好,还是 CIC++好? 
【 教师回复 】: 如何学习程序设计,这是很多初学者经常提出的问题。经过—段时间的 
学习,很多同学会产生新的困惑。例如,理论知识看了好几遍了,但是怎样提高编程能力? 
自己对 MOOC 课程的学习效果很满意,下一步该做什么?程序设计的学习过程是什么样的, 
最终能学到什么程度?针对这些问题我谈一下个人体会,供同学们参考。 
学习程序设计大致可以分为三个阶段 : 初级、中级和高级。 
(1) 初级 。初级阶段的目标是学习程序设计原理 ,其中包括计算机硬件基本结构及其 
工作原理 ,程序如何管理 内存来存储数据(例如变星的定义与访 问,数据类型,引用与指 
针等)、程序如何控制 CPU 来处理数据(例如各种不同的运算符,或通过控制语句来控制 
指令的执行顺序)等。程序设计原理还要学习如何设计大型、复杂的程序,这就需要学习 
程序设计方法。程序设计方法有两种,分别是结构化程序设计和面向对象程序设计。初级 
阶段学习结束后,同学们可以参加计算机等级考试(二级)或各种程序设计大赛等活动, 
并在应试过程中进—步提高自己的水平。 
 
 
 ~ c++语言程序设计 (MOOC 版) (第 2 版) 
( 2 ) 中级。中级阶段的目标是学习程序应用开发(学会就能有好工作了哦)。程序应用 
开发需要基千别 人 的程序来开发, 从零开始是 不可能的。结构化程序设计方法规定 : 其他 
人 给你函数库 , 你要会调用别 人 的函数。面向对象程序设计方法规定 : 其他人 给你类库, 
你要知道如何使用别 人 的类库。因此我们在学习应用开发之前必须要掌握结构化程序设计 
方法或面向对象程序设计方法。目前面向对象程序设计是主流 , 已经很少有人 继续给程序 
员提供函数库了,所提供的都是类库。掌握了面向对象程序设计 方法 , 你只要拿到微软公 
司提供的 MFC 类库(随 Visual C 6 .0 或 Visual Studio 提供) , 就可以用 C++语言开发 Windows 
图形界面的程序(或者你拿到苹果公 司的类库、谷歌公司的类库,就可以使用这些类库开 
发 iPhone 或 Android 系统的 App 了)。 不 同的操作系统是由不同厂家开发的 , 它们对计算 
机语言的支持程度有所不 同。例如 , Windows 操作系统是由微软开发的 , 开发 Windows 
软件主要使用 C++和 C#语言 ; MacOS/iOS 操作系统是由苹果公司开发的 , 开发 MacOS/iOS 
软件主要使用 Objective-C ( C++的变种) ; Android 操作系统(从 Linux 演变而来)由谷歌 
公司主导 , 开发 Android 软件主要使用 Java 语言。可以看出,程序应用开发可能会用到 不 
同的计算机语言,但程序设计原理是共同的。 
(3) 高级。高级阶段的目标是提高自己的理论水平 ,不光要知其然 , 还要知其所以然。 
计算机专业的同学需要先学习程序设计原理 , 然后再学习计算机组成原理 、 数据结 构、操 
作系统 、 编译原理 、 数据库原理 、 计算机网络 、 计算机图形学 、 数字图像处理 、 算法设计 、 
离散数学和 人 工智能等课程。在学习完这些专业课程之后 , 你的理论水平会得到很大提高 , 
将会成为 一 名真正的高手 。 
【 LingDash 】: 老师 , 总地来说讲得挺好的 , 但是我有些想法。比如在讲类的继承与派 
生时 , 应先让学生体会到,每个类都从底层开发十分麻烦,那么怎么解决呢 ? 这时引出 “ 类 
的继承与派生“, 将用与 不 用“类的继承与派生”进行比较 , 这样 的学习会更加符合人 的认 
知规律。 
【 教师回复 】: 有道理 , 接受你的建议 , 谢谢 ! 
【 cc76965 】 很高兴能够遇到这 门 公开课。这 门 公开课的条理十分清晰 , 让我对 C++ 
的语法有了 一个清晰的脉络。我是 一 名 计 算机专业的学生 , 已经学了数据结构 , 但是缺少 
开发项目的经验。 不 知道如何 去寻找开发项目 ,也不 知道如何 下手 , 希望老师 能够给我一 
些建议。 
【 网友 Crazy 峰 少 回复 】: 下面这 个 网站里有 大 噩的编程题目可 以 做 : 
https://www.patest. en/ 。 
这一版就是在总结广大 MOOC 学员所提出的难点 、问 题和建议的基础上对上 一版所 
做的修订 。重 点完善了结 构化程序设计和 面向对象程序设计这两种程序设计方法的 内 容 , 
使之更加系统化 。 
在此谨向中国 大 学 MOOC 和所有提出宝贵建议的 MOOC 学员们表示感谢 ! 
作者 
2017 年 3 月千北京 
 
 
 1. 关千 MOOC 
MOOC ( Massive Open Online Course ) ,即大规模开放在线课程, 中 文译为 “ 慕课“,是 
近几年兴起的一种基千互联网的新型教学模式。 2012 年被称为 “ MOOC 元年“。 MOOC 教学 
模式实现了两个转变,即由以教师为中心向以学习者为中心转变,学习者则 由被动学习向主 
动学习转变。与普通网络教学视频所不同的是, MOOC 实现了从授课到习题、讨论 、 答疑 、 
测验,直到最终学习评价等环节的完整教学过程。与传统课堂授课不同的是,开设 MOOC 
课程需重新梳理和组织知识点,并分别提供适合线上使用的练习题以及线下使用的讨论或实 
验题。 
可以将线上 MOOC 与线下课堂这两种教学模式结合起来。线上 MOOC 就是先由学生 
自主完成知识学习,例如观看视频、做线上习题等。线下课堂则是由教师组织课堂讨论、 
实验、测验,或讲解重点疑难间题。 " 线上 MOOC , 线下课堂”是对现有 " 课上听课,课下 
作业”教学模式的翻转。虽然 MOOC 教学模式尚处千起步试验阶段,但大多数网络学习者 
十分喜欢 MOOC 。目前已涌现出很多知名的 MOOC 网站,例如国外的 Coursera 、 Udacity 
和 Edx , 国内的中国大学 MOOC 、学堂在线和雨虹学网等。 中 国农业大学也正在基千雨虹 
学网积极开展校内课堂教学改革方面的尝试与探索。 
学习 C++语言程序设计需要边阅读、边思考、边消化吸收。虽然有了大盔的网上资源, 
但纸质教材仍是初学者线下学习的首选方式,这也是作者编写出版本书的目的。 
2. 本书特色 
l ) 适用千 MOOC 在线教育课程 
本书按应用需求来梳理和组织 C++语言的知识点,其中包括结构化程序设计方法和面 
向对象程序设计方法。内容编排由易到难,循序渐进。每个小节都设计了适合在线评判的 
单选练习题,每章则设计了适合课堂讨论的程序阅读题、改错题和编程题。 
2 ) 采用案例教学 
每个知识点都从精心设计的任务需求开始导入,然后提出对应的实现方法,最后系统 
地阐述其语法细 则 ,既保证了知识体系的完整性,又能让读者直观理解抽象的概念和原理。 
3 ) 创新教学方法 
本书从三个方面对 C++语言教学进行了探索。一是强化初学者对“程序由计算机硬件 
执行”这一基本概念的认知,从有形的硬件来理解相对抽象的程序,这样各种语法概念就 
不再那么抽象了;二是明确提出程序设计过程中存在不同的程序员角色,并充分利用角色 
二 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
来引导读者理解语法的应用语境;三是明确提出必须从代码分类管理、数据类型、归纳抽 
象和代码重用等多个维度才能准确理解面向对象程序设计方法。教学实践表明,上述教学 
方法可降低学习难度。 
3. 内容摘要 
本书内容按章节顺序可分为三部分,分别是程序设计基础(第 1 ~4 章)、结构化程序 
设计方法(第 5~6 章)和面向对象程序设计方法(第 7~10 章)。 
第 1 章 程序设计导论。从初学者对计算机已有的认知开始,将初学者逐步引导到计 
算机程序的世界。本章首先介绍计算机硬件、指令及机器语言、程序等基本概念,然后描 
述程序与计算机硬件、程序员、用户之间的关系,让读者在 一 开始就能明确程序员的职责, 
实现从用户到程序员的角色转换。本章要点 : 一是让读者从有形的硬件来理解相对抽象的 
软件;二是让读者认识到计算机中的数据是有类型的,类型决定了数据在计算机中的存储 
位数和存储格式;三是让读者知道,学习程序设计和学习编程语言不是一 回事。和 C 语言、 
Java 语言相比, C++语言的知识体系更加系统、全面。本书选用 C++语言作为程序设计初 
学者的入 门 语言。 
第 2 章 数值计算。本章从最简单的数值计算问题开始,以案例教学的方式让读者领 
会程序设计 中 一 些最基础的概念,其中包括程序中的变噩和常噩 、 表达式与运算符、数据 
的输入和输出等。最后介绍了 C丹程序访间内存的三种方式,它们分别是变盔名、引用和 
指针。本章要点 : 一是让读者将程序中的数据与内存联系起来,这样就很容易理解数据类 
型、引用和指针等初学者难以掌握的概念 ; 二是让读者重点关注运算符的运算规则、优先 
级和结合性等语法细节 ; 三是让读者初步体会到计算机语言与 人类语言的不同之处,即计 
算机语言的语法规则非常严格,甚至到了机械的程度,稍有不慎就会出现语法错误。 
第 3 章 算法与控制结构。本章讲解程序中的算法及三种算法基本结构,并通过选择 
结构和循环结构中的条件引出布尔类型。 C++语言通过选择语句来描述选择结构算法,通 
过循环语句来描述循环结构算法。最后通过案例简单讲解算法的设计与评价方法。本章要 
点 : 一是 让读者了解绝大部分复杂算法都可以由三种基本的算法结构来完成 ; 二是让读者 
掌握布尔类型的作用及其相关的运算符 ; 三是让读者了解编程能力实际上是一个人计算思 
维能力的反映,阅读程序和模仿编程是初学者培养计算思维能力的两个重要途径 ;四 是让 
读者根据案例认真体会如何根据算法合理选用不同的控制语句。 
第 4 章 数组与文字处理。本章学习如何在程序中存储和处理大盔数据。数组可以存 
储大盔具有相同类型的数据集合。计算机只能存储和处理数值数据,而文字处理程序所处 
理的对象是字符数据,为此, C++语言引入了字符类型。读者需深入了解字符编码和字符 
类型。文字处理必须使用数组,即字符型数组。本章最后用 一节的篇幅简单介绍了 中 文处 
理及 Unicode 编码。本章要点 : 一是 让读者重点掌握数组定义及访问的语法规则 ; 二是让 
读者认识到计算机内部对数组的管理和访间是通过指针(即内存地址)来实现的 ; 三是让 
读者通过具体案例初步了解数组的常用处理算法。 
经过前 4 章的学习,读者已掌握了程序设计原理基础部分的内容。那么该如何编写更 
大 型的计算机程序呢?这就需要进一步学习程序设计原理的高级部分,即程序设计方法。 
 
 
 前l 言 
程序设计方法的基本思想是 : 将大型程序中的数据和算法分解成程序零件,将不同零件的 
设计任务交由不同的程序员完成,这样就能以团队的形式来共同开发。更进一步,如果所 
分解出的程序零件在以前项目中曾经开发过,或者可以从市场上购买到,那么就可以直接 
使用这些零件来组装软件,实现快速开发。使用已有的程序零件,实际上是重用其程序代 
码,这就是程序设计中的代码重用。从第 5 章开始,本书对程序设计方法进行系统介绍。 
第 5 章 结构化程序设计之一。本章学习如何将一个复杂的数据处理算法分解成多个 
简单模块,分而治之,这被称为是结构化程序设计方法。 C++语 言支 持结构化程序设计方 
法,以函数的语法形式来描述和组装模块,即函数的定义和调用。函数是结构化程序设计 
方法的基础,它为代码重用提供了有效的手段。函数之间需要共享数据才能完成规定的数 
据处理任务。 C丹语言提供了集中管理和分散管理两种不同的数据管理策略。本章要点 : 
一是读者要 准确领会结构化程序设计的思想内涵,并熟练掌握 C++语言中函数相关的语法 
知识;二是让读者深入计算机内部,了解程序执行时其代码和变盔在内存中的存储原理, 
这样可以更容易理解变昼作用域和生存期等抽象的概念 ; 三是读者要 准确把握函数间传递 
数据的三种方式;四是读者要分别站在两种不同的程序员角度,即定义函数的程序员和调 
用函数的程序员,才能更容易地理解函数相关的各种语法知识。 
第 6 章 结构化程序设计之二。本章学习如何以多文件结构的形式来组织和管理源代 
码,并介绍几种常用的编译预处理指令 ; 然后再介绍几种特殊形式的函数,其中包括带默 
认形参值的函数 、 重载函数 、 内联函数、带形参和返回值的主函数以及递归函数等 。 本章 
还会介绍与 C 语言相关的系统函数和自定义数据类型。本章最后以微软公司开发的 Win32 
API 函数库为例介绍如何开发一个 Windows 图形用 户界面程序,并对结构化程序设计方法 
进行简单的回顾和总结 。 本章要点 : 一是学 习掌握与多文件结构相关的语法知识,其中包 
括外部函数和全局变盔的声明、头文件等 ; 二是重点掌握带默认形参值的函数、重载函数 
和内联函数这三种常用的特殊函数形式 ; 三是牢固 树立重用代码的思想,学会通过调用他 
人编写的函数来提高开发效率 。 
第 7 章 面向对象程序设计之一。面向对象程序设计方法将程序中的数据元素和算法 
元素根据其内在关联关系进行分类管理,这就形成了“类”的概念。分类可以更好地管理。 
类相 当千是一种自定义的数据类型,用类所定义的变盔称为“对象”。 本章通过具体案例演 
示了结构化程序设计是如何演变到面向对象程序设计的,然后再系统地介绍面向对象程序 
设计方法。本章内容包括类的定义、对象的定义与访间、对象的构造与析构 、 类中的常成 
员与静态成员以及类的友元等 。 本章要点 : 一是读者 必须从代码分类管理、数据类型、归 
纳抽象和代码重用等多个维度才能准确理解类与对象的概念; 二是读者需认真学 习类与对 
象编程的具体语法规则 ; 三是深入领会面向对象程序设计通过设置访间权限来实现类封装 
的基本原理 ; 四是深入了解对象的构造与析构过程,程序员通过编写构造与析构函数来参 
与对象的构造与析构过程 ; 五是读者要懂得从两个不同的角度,即定义类的程序员和使用 
类定义对象的程序员,才能更容易地理解类与对象相关的各种语法知识。 
第 8 章 面向对象程序设计之二。重用类代码有三种方式,分别是用类定义对象、类 
的组合和类的继承 。 本章讲解类的组合与继承 。 程序员可以基千 已有的零件类来定义新的 
整体类,这就是类的组合。程序员可以继承已有的基类来定义新的派生类,这就是类的继 
` 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
承与派生。利用派生类和基类之间的特殊关系可以进一步提高程序代码的可重用性,这就 
是面向对象程序设计中的对象替换与多态技术 。本章将具体讲解与多态相关的运算符重载 、 
虚函数和抽象类等概念。最后本章将简单讨论一下类的多继承。本章要点 : 一是 让读者学 
会使用组合和继承的方法来定义新类,这样可以提高类代码的开发效率 ; 二是读者应理解 , 
类在组合或继承时可以进行二次封装;三是从提高程序代码重用性的角度可以更容易地理 
解对象多态性 ;四 是多继承会导致语法陷阱 ,新的 面向 对象程序设计语言(例如 Java 和 
C# ) 已不再支待类的多继承,而只支持接口的多继承,读者只需要了解多继承的基本原理 
即可 。 
第 9 章 流类库与文件 I/0 。 C 语言通过输入/输出函数(例如 scanf 和 printf) 实现了 
数据的输入和输出。 C丑语言 则 是通过输入/输出流类为程序员提供了输入/输出的功能。这 
些输入/输出流类都是从类 ios 派生出来的,组成了 一个以 ios 为基类的类族,这个类族被 
称为 C++语言 的流类库。 本章将介绍流类库 中 三组不同功能的输入/输出流类,它们分别是 
通用输入/输出流类、文件输入/输出流类和字符串输入/输出流类。本章要点 : —是读者应 
理解之前所用的 cin、 cout 指令实际上分别是通用输入/输出流类的对象 ; 二是通过本章学 
习 , 读者可以从侧面了解全球顶尖的 C丹程序员是如何来设计和编写类的,这样可以帮助 
读者进—步深入体会前面所学习的各种面向对象程序设计知识 ; 三是重点学习如何进行文 
件读写操作,大 部分程序都需要使用文件来保存数据。 
第 10 章 C++标准库。 C++语言全盘继承了 C 语言的标 准 C 库 ,另外又增加了 一些新 
的 库。新库 中 包含一些新增的系统函数,但更多的是为面向对象程序设计方法所提供的系 
统类库,这些新库被统称为 C丹标准库。为了更好地凝练源代码, C++语言 引入了模板技 
术,其中包 括函数模板和类模板 。模板技术是一种代码重用技术, C++标准库在编写时就 
采用了模板技术,因此标准库能 以较少的代码昼来提供很强大的功能 。 本 章 内容重点介绍 
模板技术、 C++语言 的 异常 处理机制以及 C++标准库所提供的数据集合存储及处理功能。 
本 章最后 以微软公司 开发 的 MFC 类库为例介绍如何开发一个 Windows 图形用户界面程序。 
本 章要点 : 一是 让读者了解如何使用模板技术来提高函数和类代码的可重用性 ; 二是重点 
学习 C丑语言 的 异常处理机制; 三是初步掌握如何使用 C丑标准库中的向蜇类、列表类、 
集合类和映射类来存储和处理数据集合。 
学习完 C丹面向对象程序设计之后,程序员在拿到 一 个具体的程序设计任务时 , 首先 
应当考虑有哪些现成 的类库可 以使用 。使用现成的类库开发程序 ,开发周期将大大缩短。 
基于已有的类库开发程序,相当千是用别 人 已经做好 的 零件来组装产 品。程序 的 应用开发 , 
通常就是用已有的程序零件来组装自己的软件产品。只要掌握了面向对象程序设计方法和 
C++ 语言,相信每位读者都能够借助各种第三方类库,发挥出无限的开发潜能。 
4. 使用建议 
凡希望开设 C++语言程序设计在线教育课程 的教师,可将本书作为授课教材 。联系作 
者可免费获得配套教学课件。参加 在线课程学 习的学生可将本书作为线下阅读教材 。 
如将本书作为课堂教学用书,则建议讲课学时和实验学时各为 32 学时 , 合计 64 学时。 
每学时 50 分钟。作者本人 按如下方式安排讲课学时 : 第 1 、 3 、 4、 9 、 10 章各 2 学时,第 
 
 
 前l 言 
2 、 5 、 6 、 7 章各 4 学时,第 8 章 6 学时。 
联系作者 : kandaohong@cau.edu. en 
5 致谢 
作者编写本书的想法源千中国农业大学 “ 雨虹学网 : 面向主动学习的教学云平台建设“ 
项目。在参与相关系统开发和教学实践的过程中,作者积累了 一些 MOOC 在线课程教学的 
经验。 
本书编写过程中,得到了中国农业大学信电学院高万林院长的热情鼓励和大力支持。 
本书部分素材来自千雨虹学网的教学实践活动,这得益千张晓东教授、孙瑞志教授等领导 
的关心和指导。另外,本书在编写过程中还得到了郑立华、吕春利、冀荣华、刘云玲、陈 
瑛、周绪宏、胡慧、段晶洁、李鑫、李静等同事和同学的热心帮助。在此 一 并致以衷心的 
感谢 ! 
最后,感谢家 人 对我的理解和支持。 
作者 
2015 年 9 月千北京 
` 
 
 
  
 
 第 1 章程序设计导论·············································································································· l 
I.I 计算机硬件结构 ............................................................................................................ I 
本节习题 ........................................................................................................................ 4 
1.2 计算机程序 .................................................................................................................... 4 
本节习题 ........................................................................................................................ 8 
1.3 计算机程序开发 ............................................................................................................ 8 
1.3.1 程序设计 ............................................................................................................. 8 
1.3.2 程序实现 ··········································································································· 10 
1.3.3 程序测试 ··········································································································· 12 
1.3.4 程序发布 ··········································································································· 12 
本节习题 ······················································································································ 13 
1.4 信息分类与数据类型 ··································································································· 13 
1.4.1 二 进制数制 ······································································································· 13 
1.4.2 数据类型 ··········································································································· 16 
1.4.3 信息分类及数字化 ··························································································· 18 
本节习题 ······················································································································21 
1.5 C++语言简介 ···············································································································21 
1.6 本章习题 ······················································································································22 
第 2 章数值计算 ····················································································································23 
2.1 程序中的变噩 ··············································································································23 
~:~:~ 言:~:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::~: 
2.2 :二常噩 :: 
本节习题 ...................................................................................................................... 31 
2.3 算术运算 ...................................................................................................................... 31 
2.3.1 C++语言中的加减乘除 .................................................................................... 31 
2.3.2 其他算术运算符 ............................................................................................... 34 
本节习题 ...................................................................................................................... 35 
2.4 位运算 .......................................................................................................................... 35 
2 
旷 .上 
 
 
 ~ c++语言程序设计 (MOOC 版) (第 2 版) 
本节习题 ...................................................................................................................... 39 
2.5 赋值运算 ······················································································································40 
本节习题 ······················································································································42 
2.6 数据的输入与输出 ·······································································································42 
本节习题 ...................................................................................................................... 45 
2.7 弓 I 用与指针 .................................................................................................................. 45 
2.7.1 弓 I 用 .................................................................................................................. 45 
2.7.2 指针 .................................................................................................................. 47 
本节习题 ...................................................................................................................... 53 
2.8 本章习题 ...................................................................................................................... 54 
第 3 章算法与控制结构.....................................................................................................··· 55 
3.1 算法 ······························································································································56 
本节习题 ...................................................................................................................... 57 
3.2 布尔类型 ...................................................................................................................... 57 
3.2.1 关系运算符 ....................................................................................................... 58 
3.2.2 逻辑运算符 ....................................................................................................... 59 
3.3 :二 :: 
3.3. I if-else 语句 ........................................................................................................ 61 
3.3.2 switch-case 语句 ·······························································································65 
3.4 :二 :: 
3.4.1 while 语句 ·········································································································70 
3.4.2 do-while 语句 .................................................................................................... 71 
3.4.3 for 语句 ·············································································································72 
3.4.4 break 语句和 continue 语句 .............................................................................. 74 
本节习题 ...................................................................................................................... 77 
3.5 算法设 计 与评价 ....................................................................................................... ···78 
3.5.1 计 算复杂度 ....................................................................................................... 79 
::: :::::例 :: 
3.6 本章习题 ······················································································································84 
第 4 章数组与文字处理........................................................................................................ 86 
4.1 数组 ······························································································································87 
4.1.1 数组变昼 的定义与访问 ................................................................................... 87 
4.1.2 常用的数组处理算法 ....................................................................................... 91 
本节习题 ...................................................................................................................... 94 
 
 
 目 录心 
4.2 指针与数组 .................................................................................................................. 95 
4.2.1 指针运算 ........................................................................................................... 95 
4.2.2 动态内存分配 ................................................................................................... 99 
芦:针数组 芦 
4.3 字符类型 ······················································································································ 103 
::!:~ :::::: 芦 
本节习题 ···················································································································· 106 
4.4 字符数组与文字处理 l06 
4.4.1 字符串常盔 107 
4.4.2 字符数组 ········································································································· 107 
4.4.3 常用文字处理算法 ························································································· 109 
本节习题 .................................................................................................................... 111 
4.5 ;中了:符编码标准 }}: 
4.5.2 基千 ANSI 编码的 中 文处理程序 .................................................................. 113 
4.5.3 基千 Unicode 编码的 中 文处理程序 .............................................................. 115 
4.6 :二方法简介 }}: 
4.7 本章习题 .................................................................................................................... 119 
第 5 章结构化程序设计之—······························································································· 121 
5.1 勹勹勹;:方/去 腐 
5.1.2 基千模块的团队分工协作开发 
5 13 木莫块的 4 大要素 ~.~.~.l~J.-:1.~~:.~:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ;;; 
123 
52 勹昙:义和调用 }:: 
5.2.1 函数的定义 ····································································································· 127 
5.2.2 函数的调用 
523 函数应用举例 l30 
128 
~:~:: ::言::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::~!! 
言习:序员与函数 ::: 
5.3 数据的管理策略 ...................................................................................................····· 139 
5.3.1 数据分散管理 , 按需传递 
532 数据集中管理, 全局共享 二二::::::::二二:::::二二:::::二二:::::二二:::: 140 
139 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
5.3.3 变 盔 的作用域 ································································································· 142 
本节习题 ···················································································································· 148 
5.4 程序代码和变 盔 的存储原理 ····················································································· 148 
5.4.1 程序副本与变 盔 ····························································································· 149 
::: 二:尸的内存 昙 
本节习题 ···················································································································· 156 
5.5 函数间参数传递的 三种方式 l57 
5.5.1 值传递 157 
::: 二: }:: 
5.5.4 函数参数的设计 ····························································································· 161 
本节习题 ···················································································································· 165 
5.6 在函数间传递数组 ····································································································· 165 
5.6.1 在函数间传递一维数组 ················································································· 166 
5.6.2 在函数间传递一维数组的首地址 ·································································· 166 
5.6.3 在函数间传递二维数组 ················································································· 168 
5.7 本章习题 ···················································································································· 169 
第 6 章结构化程序设计之二······························································································· 171 
6.1 C++源程序的多文件结构 ·························································································· 171 
6.1.1 多文件结构的源代码组织 ............................................................................. 171 
6.1.2 静态函数与静态变 盔 ····················································································· 174 
6.1.3 头文件 ············································································································ 177 
本节习题 ···················································································································· 179 
62 6编尸旯言指令 ~:~ 
6.2.2 宏定义指令 ····································································································· 181 
言二件编译指令 }:: 
6.3 几种特殊形式的函数 187 
631 带默认形参值的函数 187 
6.3.2 重载函数 ········································································································· 189 
6.3.3 内联函数 ········································································································· 189 
6.3.4 主函数 main 的形参和返回值 ........................................................................ 191 
6.3.5 递归函数········································································································· 19., 
本节习题 ···················································································································· 198 
6.4 系统函数 ···················································································································· 199 
6.4.1 C 语言的系统函数 ························································································· 199 
 
 
 目 录$ 
::::! i+:言的系统函数 二 
本节习题 ····················································································································208 
65 6自了::勹typedef 二 
6.5.2 枚举类型 ·········································································································210 
6.5.3 联合体类型 ..................................................................................................... 211 
6.5.4 结构体类型 ·····································································································213 
本节习题 ····················································································································218 
6.6 结构 化程序设计的应用与回顾 ................................................................................. 219 
6.6.1 开发 Windows 图形用户界面程序 .......................................................... ······220 
6.6.2 结构化程序设计回顾 ·····················································································224 
6.7 本章习题 ····················································································································226 
第 7 章面向对象程序设计之— ···························································································229 
7.1 面向对象程序设计方法 ·····························································································229 
7 1 1 结构化程序设计 中 的函数 .............::::..:::::::::..::::..:::::::::..::::::二二:::::二二:::: 229 
7.1.2 结构化程序设计 中 的结构体类型 231 
713 面向对象程序设计中的分类 ::::二:::::二二:::::二二:::::二二:::::二二:::: 233 
7.1.4 面向对象程序设计中的封装 236 
本节习题 ····················································································································240 
7.2 面向对象程序的设计过程 ·························································································241 
~:~:~ ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::~:~ 
7.3.3 组装 ················································································································245 
7.3 言:的语法细则 骂 
7.3.1 类的定义 ·········································································································247 
言 芦年勹义与访问 言 
言习:与对象的编译原理 ::: 
74 7对4气二昙尸 言 
7.4.2 析构函数 ·········································································································262 
7.4.3 拷贝构造函数中的深拷贝与浅拷贝 ...................................................... ········263 
7.4.4 类与对象编程举例 ·························································································265 
本节习题 ····················································································································269 
7.5 对象的应用 ················································································································271 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
言 ::::态分配 言 
7.5.3 对象作为函数的形参 ·····················································································274 
本节习题 277 
7.6 类中的常成员与静态成员 278 
;:::~ 芦 ::: 
7.7 :二 ::: 
口 言数 : 
7.8 :二 ::: 
第 8 章面向对象程序设计之二 ···························································································296 
8.1 重用类代码 ················································································································296 
8.1.1 用类定义对象 296 
812 用类继续定义新类 298 
8.2 :二 ::: 
8.2.1 组合类的定义 ................................................................................................. 301 
8.2.2 组合类对象的定义与访问 
823 乡且合类对象的构造与析构 二二::::::::二二:::::二二:::::二二:::::二二:::: 304 
302 
8.2.4 类的聚合 ......................................................................................................... 306 
8.2.5 前向弓 I 用声明 ................................................................................................. 308 
8.3 :二与派生 ::: 
8.3.1 派生类的定义 ................................................................................................. 311 
8 32 派生类对象的定义与严尸 :::二二:::..:::二:..::::..:::二:..::::..:二:..:..::..:..:二:..:..::··:.. 314 
8.3.3 保护权限与保护继承 316 
8.3.4 派生类对象的构造与析构 ..........................................................................··· 319 
8.3.5 继承与组合的应用 ·························································································322 
本节习题 .................................................................................................................... 325 
8.4 多态性 ........................................................................................................................ 327 
8.4.1 面向对象程序中的多态 
84 2 运算符的多态与重载 ...·:::::::二二:::..:::二:..::::..:::二:..::::..:二:..:..::..:..:二:..:..:....:.. 328 
328 
8.5 ::::换与多态 昙 
8.5.1 算法代码的可重用性 ..................................................................................... 334 
 
 
 目 录心 
8.5.2 钟表类及其处理算法 ..................................................................................... 337 
8.5.3 类型兼容语法规则 
854 对象的多态性 343 
341 
::~:~ ::: 骂 
本节习题 .................................................................................................................... 351 
8.6 关于多继承的讨论 ..................................................................................................... 353 
8.6.1 多个基类之间的成员重名 ............................................................................. 353 
8.6.2 重复继承 ......................................................................................................... 354 
8.6.3 虚基类 ............................................................................................................ 356 
8.7 ::芦 骂 
第 9 章流类库与文件 1 / 0···································································································· 360 
9.1 :二 ::: 
9.2 标准 I/0...................................................................................................................... 364 
9.2.1 通用输入流类 istream 及其对象 cin ...................................................... ········364 
9.2.2 通用输出流类 ostr·eam 及其对象 cout ................................................... ········369 
本节习题 .................................................................................................................... 375 
9.3 文件 I/0······················································································································ 376 
9.3.1 文件及其 操 作 ................................................................................................. 376 
9.3.2 
9.3.3 
9.3.4 
文件输出流类 ofstream 及文件输出 ...................................................... ········379 
文件输入流类 ifstream 及文件输入 ·.............................................................. 382 
文件输入/输出流类 fstream ··········································································· 385 
本节习题 .................................................................................................................... 389 
9.4 str·ing 类及字符串 I/0 
941 字符串类 ~t:i~~::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ;;; 
389 
9.4.2 字符串 I/0...................................................................................................... 391 
本节习题 .................................................................................................................... 392 
9.5 基千 Unicode 编码的流类库 ..................................................................................... 392 
本节习题 .................................................................................................................... 394 
9.6 本章习题 .................................................................................................................... 394 
第 10 章 C+ +标准库............................................................................................................ 395 
10.1 函数模板 .................................................................................................................. 395 
10.1.1 函数模板的定义与使用 
lOl 2 函数模板的编译原理 ...·:::二二:::::二二:::::二二:::::二二:::::二二:::: 396 
397 
10.1.3 函数模板的声明 ......................................................................................... 399 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
10.2 二尸 二 
10.2.1 类模板的定义 与使用 
lO22 类模板的编译原理 ...·:::::::::二二::二二::::::二二::二二::::::二二::二: 402 
400 
10.2.3 类模板的继承与派生 ···················································································403 
10.3 ::库 二 
本节习题 ··················································································································407 
lO4 C++·i,, 言的异常处理机制··:::::::::::二二::二二::::::二二::二二::::::二二::二: 408 
10.4.1 程序中的三类错误 408 
10.4.2 程序异常处理机制 ·····················································································410 
10.4.3 tty-catch 异常处理机制 ··············································································412 
10.4.4 C丑标准库中的异常类 exception ...................................................... ········418 
本节习题 ··················································································································420 
10.5 数据集合及其处理算法 ···························································································421 
10.5.1 数据集合的存储和处理 ·············································································421 
10.5.2 C++标准库中数据集合的存储和处理 ...................................................... ·424 
10.5.3 向噩类 vector······························································································ 427 
~~::~: :二:1::昙 
10.5.6 映射类 map·································································································433 
本节习题 .................................................................................................................. 434 
10.6 面对象程序设 计 总结 ............................................................................................... 435 
10.6.1 使用 MFC 类库开发图形用户界面程序 ................................................... ·435 
10.6.2 结语 ············································································································440 
10.7 本章习题 ··················································································································441 
附录 A Visual C++ 6.0 集成开发环境........................................................................... ·····442 
附录 B 各章“本节习题“参考答案............................................................................... ····449 
参考文献 ··································································································································452 
 
 
 1章 
程序设计导论 
计算机是一种能够按照指令完成数值计算的机器。 指令 由 人 (称为程序员)下达,由 
计算机 中 的电子电路(称为硬件)识别和执行 。 计算机硬件能够识别和执行的指令集合称 
为机器语言 。 机器语 言应尽量简 单,以提高执行速度,同时降低硬件生产成本 。 
程序员 可以将多条指令编排成一个指令序列(称为程序 ),一次性提交给计算机,由计 
算机自动按顺序连续执行(如图 1- 1 所示)。程序描述了某种数据处理的过程和步骤。程序 
可以重复执行,每执行一次程序,计算机就完成一次程序所规定的数据处理过程。 
一台可 以工作的计算机由硬件和软件两部分组成,因此被称为一个计算机系统 。 硬件 
包括中央处理器、存储器和输入/输出设备等。 软件包括操作系统、数据库管理系统、软件 
开发工具以及各种不同功能的应用程序。 用户 可以使用计算机系统协助自己完成某种特定 
工作,其操作过程通常是 : 首先启动计算机,执行某个程序,然后按照程序提示选择功能 
或输入原始数据,最后 查看程序的处理结果(如图 1-2 所示)。程序由程序员编写。用户应 
购买或通过合法渠道获得程序,并预先安装到自己的计算机系统中 。 
学习程序设计,就是让自己从使用程序的用户角色提升到编写程序的程序员角色。 
恳 乡乡 下达指令 
,,-- ' ·;::,_· - . ..、 
.,, ;', ~ ·-、、暴 
计算 机 
程序 员 程序 
图 1-1 程序员、计算机与程序 
畛 
、、 
g、 、 、 、 、 
哼归贮 序 
,,, 乡 . 执 
亨 
程序 用 户 
图 1-2 用户、计算机与程序 
计算机硬件结构 
冯 · 诺依曼体系结构(图 1-3 ) 是所有现代计算机(例如台式机、笔记本计算机、智能 
手机等)硬件结构的基础 。其核心思想是 存储程序计算机 ,即包含一 组指令序列的程序预 
先存储在存储器中,执行时由中央处理器从中读取指令,并按顺序自动连续执行。存储程 
序计算机思想的最大贡献是将计算机变成了一种在程序控制下自动工作的机器,是从手动 
到自动的跨越 。 为了便千硬件实现,冯 · 诺依曼体系结构明确提出采用 二进制数制对数据 
进行存储和运算,同时,用 二进制数值编码来表示不同的机器语 言指 令。编码后, 一个机 
器语 言 的程序实际上就是 一个 二进制数值编码序列,可以直接被计算机硬件识别、执行。 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
存储器 --- -贮 控制信号 
仁数据信弓 
I I l l I 
运旯匣」 I 
-三-』』-----: 
中央处跸器 
图 1 -3 冯 · 诺依曼体系结构 
冯 · 诺依曼体系结构包含 5 个基本组成部分 :运算器 、 控制器 、 存储器 、输入设备和 
输 出设备 。运算器和控制器合起来被称为 中央处理器 CPU ( Central Processing Unit ) 。存储 
器可分为内存储器(简称内存)和外存储器(简称外存,例如硬盘)两种。输入设备包括 
键盘、鼠标、扫描仪、麦克风等,而输出设备则包括显示器、打印机、音箱等。输入/输出 
设备统称为计算机的外围设备,是人 与计算机进行交互的接口。 
1. 存储器 
程序预先存储在存储器中。执行程序时, CPU 从存储器中逐条读出指令,识别并执行 
该指令,然后再到存储器读取下一条指令。存储器为 CPU 连续执行指令,实现自动工作奠 
定了基础。 
程序是用来处理数据的。程序中的数据包括原始数据、中间结果、最终结果等。数据 
要存放在存储器中才能被 CPU 读取和处理, CPU 处理后的结果也只能保存回存储器中。 
存储器可分为 内存和 外存两种。内存的读写速度快,但造价高,而且内存中的数据在 
断电时(例如关机)会丢失。外存(例如硬盘)读写速度慢,但造价低,而且断电时数据 
不丢失,可以长期保存 。程序平时以 文件形 式存放在外存上,执行时才被读入内存,并在 
内存中执行 。 程序所处理的数据也 需要放在 内存才能被处理,例如硬盘上的 一份 Word 文 
档 , 打开 文档时被读入内存处理 , 处理完后保存文档 ,重新将 文档写回硬盘 以便长期保存 。 
对存储器的操作有 写入 ( write ) 和 读出 ( read ) 两种,即将数据写入存储器,或从存 
储器读出数据 。 对存储器的读写操作被统称为对存储器的 访问 ( access) 。 
1 个二进制位 (bit) 可以存储 l 个二进制数,即 0 或 1 。 8 个二进制位组成 1 个字节 (byte)。其 
他常用的存储单位还有 KB ( 210=1024 字节)、 MB C220=1024KB ) 、 GB ( 230=1024MB ) 等。 
对存储器进行读写操作的最小单位是字节, 一个字节被称为是 一个存储单元 。 计算机 
内存包含有很多个存储单元 。 为每个存储单元指定一个整数编号(通常从 0 开始,连续编 
号),称为存储单元的 内存地址 。程序通过内存地址将数据写入某个存储单元,或将某个存 
储单元 中 的数据读出来 。 
 
 
 第 1 章程序设计导论 
2. 中央处理器 
中央处理器 CPU 是计算机的“大脑”,包含运算器和控制器。 CPU 执行— 条指令的 
过程分为读取指令、识别指令和执行指令 3 步,这个过程被称为—个“取指-译码-执行“ 
周期。 控制器 负责从内存中读取指令,并识别出指令的类型。 运算器 负责执行指令,实现 
算术运算(例如加、减、乘、除)、关系运算(例如比较两个数的大小)等运算。 
CPU 内 部还包含一个小容盔、高速度的存储器。该存储器由多个被称作 寄存器 的存储 
单元组成 。 CPU 执行程序中的某条指令时,首先将存储在内存中的指令和数据读入寄存器, 
然后再识别、执行 。 执行结果也先暂存在寄存器,然后再写入内存 。 
3. 输入设备 
输入设备是人向计算机下达指令和输入信息的装置 。 输入设备主要包括键盘(字符输 
入设备)、鼠标(图形输入设备)、扫描仪(图像输入设备)、麦克风(声 音输入设备)等。 
输入设备将所接收到的用 户 操作(例如用 户 按压键盘按键、单击鼠标左键等),或不同种类 
的输入信息(例如扫描仪中的纸质文件或照片、麦克风接收到的声音等 )统统转换成数值 
形式的数据,然后再存放到内存中,交由程序进行处理 。 
计算机只能存储、处理数值形式的数据,即只能进行数值计算 。 任何信息,只有在转 
换成数值形式的数据(称为数字化 )之后才能交由计算机进行处理 。 输入设备就是计算机 
对信息进行数字化的设备 。 只要有相应的数字化设备,任何信息都可以使用计算机来进行 
处理。例如,目前正在研究 一 种称作“电子粪"的输入设备,它能够对气味进行数字化, 
然后识别出气味种类。 
4. 输出设备 
输出设备是将计算机的信息处理结果反馈给人的装置 。 输出设备主要包括显示器、打 
印机、 音箱等 。 不同种类信息在计算机中都是以数值形式进行存储和处理的。输出时, 需 
要将信息还原成原来的形式,即人可以接收的形式 。 例如 , 输出字符、图形或图像时 需 通 
过显示器或打印机还原成视觉信息,输出声 音 时 需通过音箱或耳机还原成听觉信息 。 
存储器、中央处理器和输入/输出设备等部件通过一 组平行导线(称为总线 )连接在一 
起(图 1-4 ) 。 各个部件之间通过总线进行通信,传递地址、数据和控制信号等信息 。 
句4 父 
CPU 内存 硬盘 
| || 
( 总线 。 
l| 
,谥 
键盘 显示器 
图 1 -4 计算机的总线结构 
` 
 
 
 ' \ : / C++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
本节习题 
1. 计算机硬件结构中,负责识别并执行指令的部件是( )。 
A. 鼠标 B. 硬盘 C. 主板 D . CPU 
2. 计算机硬件能识别并执行下列哪种语言所表达的指令 ? ( ) 
A. 英语 B. 中文 C. 机器语言 D . C++语言 
3. CPU 只能处理存放在( )中的数据。 
A. 硬盘 B. 内存 C. U 盘 D . 光盘 
4 . 触摸屏属于什么类型的设备? ( ) 
A. 输入设备 B . 输出设备 
C. 输入+输出设备 D . 存储设备 
5. 下列哪种设备不具备数字化(即将信息转换成数值数据)的能力 ? ( ) 
A. 音箱 B. 麦克风 C. 扫描仪 D . 键盘 
计算机程序 
设想一下,如何基千 I.I 节讲解的硬件结构让计算机帮助人类做一些事情,比如将摄 
氏温度转换成华氏温度。为了解决这个问题,首先应当由程序员编写一个程序,该程序用 
计算机语言来描述温度换算的步骤和方法 , 然后计算机按照程序执行相应的操作。执行这 
个温度换算程序,计算机将提示用户输入摄氏温度,然后按照程序所描述的算法进行温度 
换算,并将换算得到的华氏温度反馈给用户。 
1. 计算机程序 
计算机程序 ( program ) 是使用某种 计算机语言编写的一组指示计算机进行数据处理的 
指令序列。使用计算机处理数据一般可分为 4 个步骤 。 
申请内存空间 。数据要存放在 内存中才能被 CPU 读取和处理 , 处理后的结果也只能保 
存回内存中。程序需要通过申请内存空间指令,预先为数据分配好内存单元。数据包括原 
始数据、中间结果和最终结果等。 
输入原始数据 。计算机通过输入设备输入原始数据 。程序通过输入指令将原始数据输 
入到预先分配好的内存单元, 等待处理。键盘是最常用的输入设备,可以输入数值、 文字 
等数据。 
数据处理 。 CPU 负责数据处理。它从内存中读取原始数据,将处理结果再放回内存。 
程序通过由不同运算符构成的表达式来对数据进行处理。 
输出 处理结果 。数据处理结束后, 应当将处理结果通过输出设备反馈给用户。程序通 
过输出指令将存放在内存中的处理结果送往输出设备。显示器是最常用的输出设备,可以 
显示数值 、 文字 、图形、图像等数据。 
最开始,程序员是使用 机器语言来编写程序的。程序员需要熟记机器语言中每条指令 
 
 
 第 1 章程序设计导论 
的二进制编码,可以想象其编写程序的难度。后来,人们使用助记符来代替指令的二进制 
编码,例如用 ADD 表示加法、用 SUB 表示减法,这种以助记符来表示指令的语言被称为 
汇编语言 。 汇编语 言 提高了程序员编写程序的效率。再后来,人们又发明了更容易学习和 
使用的计算机语 言 ,这就是今天我们常用的高级语言 。 机器语言、汇编语言、高级语 言 都 
属于计算机语 言 。 C++语 言 是 一种高级语 言 ,例 1 -1 给出 一个用 C++语 言 编写的温度换算 
程序,其中包含了 三部分内容,分别是 一 些注释、 — 组指令序列以及 一些 C++语 言 规定的 
程序格式 。 
例 1-1 —个用 C++ 语言编写的温度换算程序 
~ I /*-个 C++程序实例: 
3 将摄氏温度换算成华氏温度 
4 I */ 
5 I #il1clude <iostream> 
6 I using namespace std; 
7 
8 I int main() 
9I { 
10 
11 
12 
13 
}: | } 
double ctemp, ftemp; 
cin >> ctemp; 
ftemp = ctemp * 1.8 + 32; 
cout << ftemp; 
re血11 O; 
II 申请内存空间 
II从键盘输入摄氏温度 
II温度换算 
II在显示器上输出华氏温度 
II程序结束 ,返回操作系 统 
(1) 注释:使用自然语 言 (例如中文或英文)对程序代码进行说明,以便程序员今后 
阅读或修改程序 。 
第 1~4 行 : 多行注释形式,以 “ I*“ 升头、 “*/ “ 结束 。 该段文字解释程序的功能, 
即“将摄氏温度换算成华氏温度” 。 
第 10~14 行的后半部分 : 单行注释形式,以 “ II" 开头的文字说明,到行尾 结束 。 
( 2 ) 指令序列: 第 10~ 14 行 , 程序的正文部分,即 一 组指令 。 
第 10 行 : 申请内存 空 间 。 定义 2 个保存温度数据的变噩 ctemp 和 ftemp , 分别用于 
保存摄氏温度和华氏温度 。 double 说明温度数据为实数类型 。 执行该指令,计算机为所 
定义的变 噩分配内存单元,用千保存数据 。 
第 11 行: 输入原始数据 。 cin 指令从键盘输入数据并保存到变盔 ctemp 中 。 执行该指 
令,计算机等待用 户 在键盘上输入摄氏温度,所输入的数据将被存放到变盔 ctemp 所分配 
的内存单元中 。 
第 12 行 : 数据处理 。 使用换算公式“华氏温度=摄氏温度x l.8 + 32" 将变噩 ctemp 中 
存放的摄氏温度换算成华氏温度 。 通过“ =“ 将换算结果保存到变昼 ftemp 中 。 
第 13 行 : 输出处理结果 。 cout 指令将变噩 ftemp 中 所保存的华氏温度在显示器上显示 
出来 。 
` 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
第 14 行 : 结束程序 。 return 被称为返回指令 。 执行该指令,计算机将结束当前程序的 
运行,返回操作系统。 
(3) C++语言规定的程序 格式: 用 C++语 言 编写程序有 一 些规定的程序格式,每个 
C++程序都应该遵守这些规定 。 例如 : 
第 5~6 行 : 声明导入某些外部程序 。 
第 8 行 : 定义主函数 ”int main( ){指令序列}" 。 每个 C++程序都有 一个包含指令序 
列的主函数 main 。 主函数用 一对大括号”{ } " 将指令序列括起来 。 
第 10~14 行 : 指令序列 中的 每条指令称为 C++程序的 一条语句 。 语句以分号”, “ 结尾。 
2. 程序的执行 
程序由 程序员 编写,由 计算机执行 。 程序平时是以 文件形式保存在硬盘上的,执行时 
被读入内存, 在 内存中建立一个副本(图 1-5 ) 。 CPU 从程序主函数中的第 一条指令开始, 
依次执行指令序列, 直 到最后 一 条指令,或遇到返回 
指令 return 时结束执行 。 程序执行时,计算机会为程 
序 中 所定义的变 量 分配内存 空 间,例如图 1-5 中的 I int ma in() 
ctemp 和 ftemp 。 程序执行时, CPU 会按照程序中的指 I { 
令进行运算,例如执行例 1- 1 第 12 行的 "ftemp = I double ctemp, Hemp; 
ctemp * 1.8 + 32;" 指令时, CPU 会从内存 中 读出 
ctemp 内 存单元的数值进行运算,再将运算结果写入 
ftemp 的内存单元 。 程序执行结束后,计算机将收回 
程序副本及其变噩所占用的内存空 间,以便千执行其 
他程序时使用 。 计算机每执行 一 次例 1-1 的程序就完 
成 一 次将摄氏温度换算成华氏温度的过程 。 
程序可以 复制 给多个用 户。 用 户在 自己的计算机 
上安装程序,然后执行(或称为启动)该程序 。 用 户 
每执行— 次程序就是使用了 一 次该程序的功能 。 用 户 
只要安装了该程序,今后就可以随时执行,重复使用 
该程序的功能 。 
3. 程序=数据+算法 
程序 是一 组指令序列,描述了某种数据处理的过程和步骤 。 
数据是程序处理的对象 。 程序 中 的数据包括原始数据、中间结果、最终结果等 。 数据 
要存放在内存中才能被 CPU 读取和处理,处理后的结果也只能保存回内存 中 。 如何根据所 
处理的数据来合理地使用和管理内存 是 编写程序的 第—项 工作内容 。 计算机程序通过定义 
和删除变盔来申请、释放内存 空 间 。 为了进行温度换算,例 1-1 定义了 2 个变盔 ctemp 和 
ftemp 来分别存放摄氏温度(原始数据)和华氏温度(最终结果) 。 程序执行结束后,上述 
2 个变量被自动删除,其所占用的内存 空 间被计算机收回 。 
cin >> ctemp; 
ftemp = ctemp * 1.8 + 32; 
cout << ftemp; 
return 0; 
} 
ctemp 
ftemp 
图 1-5 程序执行时的内存示意图 
 
 
 第 1 章程序设计导论 
将数据处理的过程细分成一组严格的操作步骤,这组操作步骤被称为 算法 。如何设计 
数据处理算法是编写程序的 第二项工作内容。计算机程序通过选择不同功能的指令,并合 
理编排这些指令的顺序来实现算法。例 1-1 将温度换算的算法分解成 5 步完成。 
(I) 定义变噩(申请内存空间) ; 
( 2 ) 输入需换算的摄氏温度; 
(3) 根据换算公式将其换算成华氏温度; 
( 4 ) 显示换算结果 ; 
( 5 ) 算法结束,返回。 
数据和算法是一个程序应当包含的两项主要内容。可以简单地说,程序 = 数据 + 算法。 
4. 程序的用户界面 
程序执行过程 中 ,通常需要用户输入原始数据或选择功能(称为输入),程序将计算得 
到的中间结果和最终结果反馈给用户(称为输出)。用户与程序之间的输入和输出操作统称 
为人机交互。目前,人机交互的形式主要有两种 : 命令行界面 ( Command Line Interface , 
简称 CLI ) 和图形用户界面 ( Graphical User Interface , 简称 GUI ) 。 
1) 命令行界面 CLI 
早期,用户操作计算机是通过键盘输入指令(或称为命令),计算机接收指令并执行对 
应的程序。这种操作程序的形式被称为命令行界面(图 1-6 ) 。使用命令行界面的程序需要 
用户记忆相关的操作命令,这适用千承担系统维护工作的专业技术人 员。 
2) 图形用户界面 GUI 
图形用户界面的程序提供窗口、按钮、菜单等图形操作界面,用户通过指针设备(例 
如鼠标、触摸屏等)选择程序功能,操作程序。这种操作程序的形式被称为图形用户界面 
(图 1-7 ) 。操作图形用户界面时,用户不需要记忆操作指令,简单易学,适用于广大的普 
通用户。 
图 1-6 命令行界面 CLI 
心 
 
 
 ` C++语言程序设计 (MOOC 版) (第 2 版) 
] 1.txt - 记奉本 |=|回 I.a,... 
文件0 琨塌位) 格式@) 亘君过) 帮助也) 
学校简介 ^ 
图 1 -7 图形用户界面 GUI 
本节习题 
1. 编写 一个处理数据的计算机程序,通常第 一 步 需 要做什么 ? ( 
A. 申请内存 空 间 B . 输入原始数据 
C. 处理数据 D . 输出处理结果 
2. 下列哪种语 言 不属千计算机语 言 ? ( ) 
A. 机器语 言 B. 汇编语 言 C. 高级语 言 
3. CPU 只能执行存放在什么地方的程序? ( ) 
A. 硬盘 B. 内存 C. U 盘 
4 . 运行命令行界面程序的计算机必须配备下列哪种输入设备? ( 
A. 键盘 B. 鼠标 C. 触摸屏 
5. 在计算机内部,从键盘输入的数据首先被送往哪 里 ? ( ) 
A. 运算器 B. 控制器 C. 内 存 
、丿 
D . 英语 
D . 光盘 
) 
D . 手写笔 
D . 外存 
计算机程序开发 
计算机程序的升发过程可粗略地分为设计、实现、测试和发布 4 个 阶段 。 参与程序升 
发过程的人员统称为程序开发人员,或简称为 程序员 。 
1.3.1 程序设计 
程序设计按时间顺序还可细分为 需求分析和程序设计两个阶段,即先进行 需 求分析, 
再根据 需 求进行程序设计 。 
 
 
 第 1 章程序设计导论 
在软件工程中,需 求分析指的是 : 在建立一个新的或改变—个现存的计算机软件系统 
时 , 为描述新系统的目的、范围、定义和功能等所要做的全部工作。需求分析要对程序的 
用户单位进行调研和分析,弄清楚其功能和性能要求,包括需要输入什么数据,要得到什 
么结果以及最后应输出 什么 等。需求分析结束后,应该形成书面的需求分析报告。需求分 
析报告是下 一 阶段进行程序设计的基础和依据。 
有了需求分析报告,程序开发人 员即可进入程序设计阶段。程序设计可采用结构化程 
序设计方法,或面向对象程序设计方法。 
结构化程序设计方法也称为面向过程的程序设计方法。结构化程序的设计方法就是 : 
首先将一 个求解复杂问题的过程划分为若干个子过程 ,每个子过程完成一个独立的、相对 
简单的功能 ; 用算法来描述各个过程的操作步骤,每个算法称为 一个模块 。结构化程序设 
计采用 “ 自顶向下,逐步细化” 的方法来分解和设计算法模块,然后通过调用 关系将各个 
模块组织起来,最终形成一个求解问题的完整流程。采用结构化程序设计方法 ,程序员重 
点考虑的是如何分解和设计算法。结构化程序设计方法 一 般使用流程图来记录算法设计结 
果。以特定的图形符号加上文字说明来表示算法中操作步骤及其顺序的图被称为 流程图 或 
框 图 。美国国家标准学会 ANSI ( American National Standard Institute ) 规定了流程图的常 
用符号。我国的国家标准 GB 1526—89 与该标准基本相同。图 1-8 给出 一个温度换算算法 
的流程图实例。 
开始 
定义保存溫度的变 景 
输入摄氏溫度 
华氏溫度=摄氏温度 X l.8+ 32 
显示华氏温度 
结束 
图 1-8 温度换算算法的流程图实例 
面向对象程序设计 方法是将待处理问题中的客观事物当做 一 个个独立的处理对象(称 
为 客观对象 ),以归纳分类的思想把具有相似特性的对象抽象成类 。类是程序设计 中描述客 
观事物的数据模型,其中包括事物的 属性 (数据)和处理方法 (算法)。按照类模型将客观 
对象 定义成 计算机中的对象(称为内存对象,或简称为对象),这样就可以交由计算机来处 
理了。通过 “ 消息驱动”机制将各个对象组织起来,最终形成—个完整的计算机程序。面 
向对象程序设计的重点是类和对象的设计。面向对象程序设计方法一般使用 统—建模语言 
UML ( Unified Modeling Language ) 来记录类和对象等的设计结果。 UML 使用 5 种不同 
的图来描述这些设计结果,它们分别是 : 
` 
 
 
 ~ c++语言程序设计 (MOOC 版) (第 2 版) 
· 用例图 (use case diagram) ; 
· 静态图 (static dia担·am) , 包括类图、对象图和包图; 
· 行为图 (behavi01、小a驴·am) , 包括活动图、状态图 ; 
· 交互图 (interactive diagram) ,包括顺序图、协作图; 
· 实现图 (implementation dia驴·am) , 包括构件图、部件图。 
这些图从不同的侧面对所设计的程序进行描述。图 1-9 给出温度换算间题中 一个温度 
类 Temperature 的类图及其对象 t 的对象图例子。 
Temperature 
+ ctemp :double 
+ SetCTemp(double t): void 
+ UetCTemp(): double 
+ GetFTemp(): double 
~ erature 
+ cternp : double 
图 1 -9 一个温度类 Tempera血e 的类图及其对象 t 的对象图例子 
正规的软件开发项目在程序设计结束后,应形成书面的程序设计报告,例如概要设计 
报告和详细设计报告 。 
1.3.2 程序实现 
程序实现是使用计算机语言将程序设计阶段所得到的设计结果编写成计算机可以执行 
的程序。简单地说,程序实现就是编写程序的指令代码,简称 编码 ( coding ) 。正式编码之 
前,程序员需要预先选择好编码所用的编程语言以及使用该语言编码所需的开发工具。 
编程语言 (programming language ) 是为了向计算机下达指令而专 门 设计的 人 工语言 , 
其中定义了字符集、词法规则和语法规则。计算机语言可分为机器语言、汇编语言和高级 
语言三类。高级语言便千程序员学习和掌握,绝大部分程序员都使用高级语言。高级语言 
也有很多种,比较常用的有 Basic、 C 、 C++、 Java、 C#、 Python 等。表 1-1 给出了 2017 年 
1 月的全球编程语言使用排行榜 ( TIOBE 指数),其中 C 语言位列排行榜的第 2 位, C++ 
语言列第 3 位。 
表 1-1 20 1 7 年 1 月全球高级语言使用排行榜 ( T I OB E 指数 ) 
2017 年 1 月排名 编程语言 使用率 (%) 2016 年 1 月排名 
1 Java 17.278 1 
2 C 9.349 2 
3 C++ 6.301 3 
4 C# 4.039 4 
5 Pytl1on 3.465 5 
6 Visual Basic .NET 2.960 7 
7 JavaSc1ipt 2.850 8 
排名升降 
rr 
 
 
 第 1 章程序设计导论 
续表 
2017 年 1 月排名 编程语言 使用率(%) 2016 年 1 月排名 排名升降 
8 Perl 2.750 11 T 
9 Assembly Ian组1age 2.701 9 
10 PHP 2.564 6 L 
11 Delphi/Object Pascal 2.561 12 T 
12 Ruby 2.546 10 L 
13 Go 2.325 54 T 
14 Swift. 1.932 14 
15 Visual Basic 1.912 13 L 
16 R 1.787 19 T 
17 Dart 1.720 26 T 
18 Objective-C 1.617 18 
19 MATLAB 1.578 15 L 
20 PL/SQL 1.539 20 
说明 : TIOBE 指数 ( www. tiobe.com ) 是一种表明编程语言流行趋势的指标 , 每月更新。这个 排行榜 
只是反映了编程语言的热门程度 , 并不能说明编程语言的好坏。 
支持结构化程序设计方法的高级语言称为结构化程序设计语言,例如 C 语言。支持面 
向对象程序设计方法的高级语言称为面向对象程序设计语言,例如 Java 语言、 C#语言等。 
C++ 语言同时支待结构化程序设计和面向对象程序设计方法,因此它既是一种结构 化 程序 
设计语言 , 也是 一种面向对象程序设计语言。 
使用高级语言编写的程序称为源程序 。 源程序 中 的高级语言指令需要翻译成等效的机 
器语言指令才能被计算机硬件识别和执行 。源程序的翻译执行有两种方式 : 一是 编译执行 , 
将源程序一次性翻译成等效的机器语言程序(称为 目标程序 ),计算机执行目标程序 ; 二是 
解释执行 ,计算机逐条翻译执行源程序中的指令,边翻译边执行。例如 , C++是编译执行 
的高级语言,而 Python 是解释执行的高级语言。 
程序员 需要借助 一些开发工具软件才能完成编程工作 , 例如编辑源程序 需要用到编辑 
器 软件,翻译源程序则 需 要用到 编译器 软件 。 集成开发环境 ( Inte驴:ated Development 
Environment , 简称 IDE ) 就是这样 一种开发工具软件,它由软件工具集和环境集成机制两 
部分组成。软件工具集可支持软件开发的相关过程、活动和任务,环境集成机制为工具集 
成和软件的升发 、 维护及管理等提供统一支待。常用的集成开发环境有 Microsoft 公司开发 
的 Visual C++ 6 .0、 Visual Studio 2008/2010 等,主要支持 C 、 C++和 C#语言的程序开发。 
另外还有 Eclipse , 这是 一个非常流行的升源集成开发环境 。 Eclipse 以插件的形式支待多种 
语言的升发,例如 Java、 C 、 C++和 Python 等。初学者还可以使用 Dev C丑作为自己练习 
C++编程的集成开发环境。 Dev C++也是 一款升源软件 , 能通过互联网搜索并免费下载其 
安装包 ( 50MB 左右)。本书使用 Visual C++ 6.0 (参见附录 A ) 作为所有示例程序的集成 
开发环境。 
使用 C++语言编写程序通常可细分为 4 步 : 编码 、 编译、连接和调试 。 
 
 
 ~ c++语言程序设计( MOOC 版) ( 第 2 版 ) 
(1) 编码 ( coding) : 编写和输入用 C++语言编写的源程序代码。源程序文件的扩展名 
通常为 cpp 。程序员在文本型编辑器中 完成源程序的编码 工作。 
(2) 编译 (compiling) : 将源程序代码翻译成等效的机器语言代码(即目标程序)。翻 
译前首先检查源程序中是否存在语法错误。如无语法错误则将其翻译成目标程序,否则提 
示错误信息。目标程序文件的扩展名通常为 obj 。编译由一种称为编译器的程序完成,编 
译器也称为编译程序。 
(3) 连接 ( link) : 将多个目标程序连接成一个整体,生成一个可以被计算机执行的程 
序文件。在 Windows 操作系统上,可执行程序文件的扩展名为 exe 。连接由一种称作连接 
器的程序完成,连接器也称作连接程序。 
( 4 ) 调试 ( debug) : 通过编译、连接和试运行等方法来检查程序中可能存在的错误。 
程序中的语法错误可以使用编译器和连接器来检查,而语义错误则需要通过试运行来人工 
检查。如果发现错误,则需要修改源程序并重新编译、连接。集成开发环境一般会提供一 
些帮助调试的工具程序。 
程序员需要熟练掌握计算机语言的知识,并能熟练运用相关的开发工具。 
1.3.3 程序测试 
正规的软件开发项目在程序实现阶段结束后,应对程序进行独立、系统、完整的测试。 
测试通常使用测试用例对程序进行黑盒测试,即选取一些测试数据作为程序的输入,运行 
程序,检查程序的输出结果是否正确。测试过程中所发现的问题应予以修改。程序开发过 
程中存在错误是难以避免的,只有经过严格的测试才能保证最终软件产品的质昼。 
测试贯穿整个程序开发过程,不同开发阶段有着不同的测试目标。例如 : 
· 单元测试是对单个程序单元进行测试 ; 
·集 成测试是把已测试过的程序单元组装起来进行测试; 
· 确认测试是检查程序是否满足需求分析报告所规定的各种需求 ; 
· 系统测试是把已确认的软件纳入实际运行环境中进行测试; 
· 回归测试是在软件维护阶段为检查因代码升级 、修改引入的新错误而进行的测试 。 
1.3.4 程序发布 
正规软件开发项目所开发的程序需要经过 程序发布 环节,最终形成一个完整的软件产 
品,这样才能交付给用户使用。程序发布包括的工作主要有 : 
· 确定程序交付的形式和载体,例如光盘或网络下载 ; 
· 将可执行程序打包,并编写相应的安装程序; 
· 编写程序使用手册以及其他必须的文档。 
程序及其相关的文档,合在一起被称为软件 (softw釭e ) 。 
我们学习 C++语言程序设计就是要学习程序设计的基本原理,掌握 C++语言的语法知 
识,并能熟练运用 C++语言编写计算机程序,从而完成从普通用户到程序员的角色转换。 
可以用以下几句话来描述程序与程序员、用户和计算机之间的关系。 
 
 
 第 1 章程序设计导论 
· 程序是由程序员编写的 ; 
· —个程序可制成多个拷贝,分发给多个用 户 ,由用 户安装在各自的计算机上; 
· 用户启动程序,由计算机来具体执行程序中的指令 ; 
· 程序执行过程中可能需要用户输入原始数据或选择功能项,并查看输出结果,这就 
是用户与程序的交互 ; 
· 程序员在编写程序过程中需考虑计算机能否执行,以及用户使用是否方便等因素。 
本节习题 
1. 下列关千 C++语言的描述,哪个是错误的 ? ( ) 
A. C++语言支持结构化程序设计方法 B .C++语言支持面向对象程序设计方法 
C. C++语言是编译执行的 D . C++语言是解释执行的 
2. 用 C++语言编写的程序被称为( )。 
A. 源程序 B . 目标程序 
C. 可执行程序 D .编译程序 
3. 计算机不能直接执行 C++源程序,必须经过下列哪项操作才能执行? ( ) 
A. 编译 B . 连接 
C. 调试 D . 先编译,再连接 
4 . 下列哪种语 言 不支持面向对象程序设计方法? ( ) 
A. C 语言 
C. Java 语言 
5. 下列哪项内容不属千本书的学习范畴 ? ( 
A. 程序设计的基本原理 
C. 组装计算机 
信息分类与数据类型 
B . C++语言 
D . C#语言 
) 
B . C++语言的语法知识 
D . 使用 C++语言编写程序 
为便于使用, 人们对客观世界 中不 同形式的信息进行了分类,例如文字、声音、图像 
等。但计算机只能处理数值形式的数据,任何信息都必须转成数值形式的数据(称为数字 
化 )才能被计算机存储和处理。换句话说,任何信息只要能被数字化, 就能被计算机处理。 
数字 化 后,任何信息处理问题都变成了数值计算问题。 
人类社会使用十进制计数,并基千十进制进行数值运算。十进制是 一种 计数制, 或简 
称为数制 。为了便千硬件实现 ,计算机采用的是 二进制。 
1.4.1 二进制数制 
一个 R 进制 数制,采用 R 个基本计数符号, R 称为数制的 基 。运算时逢 R 进位。 不 同 
位置对应不 同的值,该值是以 R 为底的幕,称为对应位置的权 。 
心 
 
 
 ~ c++语言程序设计 (MOOC 版) (第 2 版) 
十进制 ( decimal ) 数制采用 10 个基本计数符号(即 O, I, ... , 9 ), 10 称为十 进制的 
基 。 运算时逢 10 进位,不同位置对应不同的权 , 例如个位的权为 100, 十位的权为 101' 
百位的权为 102 ...... 。一个十 进制数可以按权展开,例如 : 
82.625 = 8 xI01 + 2x I0° + 6x I0- 1+ 2 x I0-2 + 5x I0-3 
1 . 二进制 
二进制 ( bina1y) 数制 采用 2 个基本计数符号(即 0 和 1 ), 2 称为二进制的基。运算 
时逢 2 进位,不同位置对应不同的权 , 例如 2°, 21 , 2气 。一个二进制数可 以按权展开, 
例如 : 
1010010.101 = l x26+0x25+l x24+0x23+0x22+ l x21+0x2°+ l xT1+0xT 2+ l xT3 
计算 1010010. 101 右边所展开的多项式,得到结果 82.625 。 也就 是说,二进制数 
1010010.10 1 对应的十进制数为 82.625 。 计算按权展开多项式就可 以实现二进制到十进制的 
转换。 
将十进制数转换成二进制, 需要将整数部分和小数部分分开,采用不同的方法分别进 
行转换。例如,将十进制数 82.625 转换成二进制, 需 要将整数部分 82 和小数部分 0 .625 
分开,分别进行转换。 
十进制整数转二进制 : 除 2 取余 。 将十 进制整数连续除以 2, 取余数,直到商为 0 。将 
所得余数按倒序排列即为转换结果。 
除以 2 商(整数) 余数 二 进制 
82+2 = 41 。 低位 
41+2 = 20 1 
2~2 = 10 。 
10+2 = 5 。 1010010 
5+2 = 2 1 
2+2 = 1 。 
1+2 = 。 1 高位 
十进制小数转二进制 : 乘 2 取整 。将十进制小数连续乘 以 2, 取整数 , 直 到小数为 o, 
或达到所要求的精度位数(某些十 进制小数不能精确转换成二进制) 。 将所得整数顺序排列 
即为转换结 果。 
乘以 2 乘积 取整 二进制 
0.625 x2 = 1.25 1 高位 
o.2sx2 = 0.5 。 i 0.101 
o.s x2 = 1.0 1 低位 
十进制数 82.625 转换成二进制的结果是 : 1 010010.101 。 可以看出,表示相同的数值, 
二进制需要更多的位数。 
某些十 进制小数转换成二进制时 需要截断,例如 : 0.6 。 
 
 
 第 1 章程序设计导论 
乘 以 2 乘积 取整 二 进制 
0.6x2 = 1.2 1 高位 
o.2x2 = 0.4 。 
0.4x2 = 0.8 。 0.1001 
0.8x2 = 1.6 1 
0.6x2 = 1.2 1 'I' 
低位 
0.6 转换成二进制后是— 个无限循环的有理数 : 0.10011001 ... 。在计算机中存储二进制 
的有理数或无理数 需 要截断,只保留有限位数的小数 。 
2. 八进制 
在程序设计中还可能需要用到八进制和十六进制。 八进制 ( octal ) 数制采用 8 个基本 
计数符号(即 o , 1, ... , 7 ), 8 称为八进制的基。运算时逢 8 进位,不同位置对应不同的 
权,例如 8°, 81 , 8气 ... 。 八进制与二进制可以按照表 1-2 的对应关系进行转换。 1 位八进 
制对应 3 位二进制。 
二进制转八进制的方法是 : 以小数点为基准,整数部分向左 3 位—组进行分组,不足 
3 位高位补 0; 小数部分向右 3 位一 组进行分组,不足 3 位低位补 o , 然后将每组的 3 位二 
进制转换为 1 位八进制,得到转换结果。例如,二进制数 1010010.101 转换为八进制的结 
果为 122.5 。 
1010010.101 分组- 001, 010 , 010.101 转换- 122.5 
八进制转二进制的方法就是上述过程的逆向过程,直接将每位八进制数转换为 3 位二 
进制数即可。 
表 1 -2 八进制与二进制的对应关系 
八进制 二进制 八进制 二进制 
。 000 4 100 
1 001 5 101 
2 010 6 110 
3 Oll 7 111 
3. 十六进制 
十六进制 ( hexadecimal ) 数制采用 16 个基本计数符号(即 o , 1 , ... , 9 , 再加上 6 个 
英文字母 A~F ), 16 称为十六进制的基 。 运算时逢 16 进位,不同位置对应不同的权,例如 
16°' 161 ' 16气 ... 。十六进制与二进制可以按照表 1-3 的对应关系进行转换。 1 位十六进 
制对应 4 位二进制。 
$ 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
表 1-3 十六进制与二进制的对应关系 
十六进制 二进制 十六进制 二进制 
。 0000 8 1000 
1 0001 9 1001 
2 0010 A 1010 
3 OOll B 1011 
4 0100 C llOO 
5 0101 D 1101 
6 OllO E lllO 
7 0111 F 1111 
十六进制与 二进 制之间的转换方 法与八进制类似,区别就是 1 位十六进制对应 4 位二 
进制。例如,二进制数 1010010.101 转换为十六进制的结果为 52.A 。 
1010010.101 分组~ 0101, 0010. 1010 转换~ 52.A 
1.4.2 数据类型 
计算机如何在存储器中存储一个二进制数呢?这需要考虑两个方面的因素,分别是存 
储位数和存储格式。 
1. 存储位数 
计算机管理存储器(含内存和外存)的最小单位是字节,每个字节可存储一个 8 位二 
进制数。因为位数的限制, l 个字节能存储的最大值为 Cl 1111111 )2 , 即十进制的 ( 255 )lO, 
其中下标 2 表示二进制, 10 表示十进制。 l 个字节能存储的最小值为 o, 即( 00000000 )沪 
我们说, l 个字节所能存储的数值范围为 ( 00000000 ) z~ Cl 1111111 ) 2• 即十进制的 0~255 。 
为了管理方便,计算机以固定的位数来存储二进制数,不足部分在高位补 0 。这种使用 
固定位数存储数据的形式称为 定长存储 。可 以将多个字节合 在一起 , 这样可以增加存储 
位数,扩展可存储的数值范围。定长存储所采用的位数都是 8 的整数倍 , 例如 8 位 (1 字 
节)、 16 位 ( 2 字节)或 32 位 ( 4 字节)等 , 其对应的数值范围分别为 0~255 、 0~65 535 、 
0~4 294 967 295 。 
程序所处理的数据只有存放到内存后才能被 CPU 处理,因此程序员应首先向计算机系 
统申请保存数据所需的内存空间。申请内存时 , 要指定存放数据所需的存储位数。 存储位 
数越多,可存储的数值范围就越大, 相应地所占用的内存空间也越大。因此,程序员在编 
写程序时应根据所处理数据可能的取值范围合理地选择存储位数。 
2. 存储格式 
计算机存储二进制数还需要考虑的另外一个因素是存储格式。 存储格式包括以下两个 
方面 :以什么格式来区分正负数?以什么格式来区分整数和实数? 
 
 
 第 1 章程序设计导论 
如果所处理的数据有正数,也有负数,计算机该如何存储 — 个数的正负号呢?假设存 
储位数为 8 位,可以将最高位拿出来作为符号位 ( 0 表示正数, l 表示负数),剩余的 7 位 
用来存放数值,这种含符号位的存储格式称为 有符号格式 。 相应地,不含符号位的存储格 
式则称为 无符号格式。有符号格式可以存储正数,也可以存储负数。无符号格式只能存储 
非负数,即零或正数。 
含符号位的二进制编码形式称为 原码 。 例如 ( +82 加 的原码是 ( 0 10 1 0010 )2, 而 
( -82 加 的原码是 ( 1 1010010 )2 。在采用有符号格式存储时,计算机使用原码的形式来存 
储正数,而存储负数时则使用另 一种被称为补码 的形式来存储。下面以 ( -82 加 为例来演 
示负数补码的计算方法。 
(1) ( -82 ) 10 的原码是 ( 1 10100 1 0 )2, 其中最高位为符号位, l 表示负数 ; 
(2) 对数值部分求反,符号位不变,得到 ( 1 010 11 002, 这种编码称为 反码; 
(3) 将反码加 1 ,得到补码 ( 1 0101110 )沪 
补码与存储位数有关 。 存储位数不同,所转换出的补码是不同的 。 例如 ( -82 加 的 16 
位补码为 : 
( 1 000000001010010 )2 ~ ( 1 1111111 10101101 )2 ~ ( 1 1111111 10101110 )2 
为统一起见, C++语言做出如下定义 : 正数的补码 、 反码与原码相同 。 这样我们可以 
说,在采用有符号格式存储时,计算机采用补码形式来存储数据(包括正数和负数)。计算 
机引入补码的原因有两个 。 
(1) 定长存储时, “A-B " 等于 “A 的补码 + (-B)的补码” 。这样可以将减法运算统 
一成加法运算,从而简化 CPU 的硬件设计; 
( 2 ) 采用补码存储, 0 的编码是唯 一 的 。 “+O" 和 “-O " 的原码不同,具有二义性。 
如果采用 8 位存储,则它们的原码分别为 ( 0 0000000 为和 ( 1 0000000 )2, 而它们的补码都 
是 ( 0 0000000 )2 0 
存储格式不同, 其可存储的 数值范图也不同 (参见表 1 -4 ) 。 设计程序时,程序员应根 
据所处理数据的特点合理地选择存储位数和存储格式 。 
存储位数 ( 字节数 ) 
8(1) 
16(2) 
32(4) 
表 1-4 不同存储位数和存储格式情况下的数值范围 
数值范围 
无符号格式 
炉255 
炉65 535 
炉4 294 967 295 
有符号格式 
- 128-+127 
- 32 768-+32 767 
- 2 147 483 648~2 147 483 647 
计算机如何存储一个实数呢?这里先介绍 一 下数的 科学表示法 。例如, 一组实数 : 
82.625, 8.262 5, 0.826 25 , 0.082 625 
它们的科学表示法分别为 : 
0.82625 x102, 0.82625 x l01, 0.82625 x10°, 0.82625 x l0- 1 
一个 R 进制数实数 N 的科学表示法可以写成: 
N = Mx炉 
心 
 
 
 ` ' C++语言程序设计 ( MOOC 版) (第 2 版 ) 
其中, E 是 R 的指数,称为 N 的 阶码 ,阶码反映了小数点的位置。 M 表示 N 的全部有 
效数字,称为 N 的 尾码 (或称尾数 ),尾码反映了数据的精度。 
计算机存储实数时,先将其转换成科学表示法,然后只存储其中的阶码和尾码。这 
种存储实数的格式称为 浮点格式 。下面以 ( -8 .262 5 加为例来说明实数在计算机中的存 
储格式 。 
(1) 将 ( -8 .262 5 如转换成浮点形式 ( -0. 826 25 x101 ) 1o ; 
( 2 ) 将阶码 ( +l 如转换成二进制 (+l )沪 
(3) 将尾码 (-0.826 25 ) 10 转换成二进制 (-0.11010011100 ) 2 ( 注: 只保留 11 位精度) 
( 4 ) 存储阶码和尾码的二进制编码( 注: 不同计算机的存储格式可能不同)。 
下面给出的演示例子用 4 位来存储阶码的补码,用 12 位来存储尾码的补码,共 16 位 
(占 2 个字节)。 
阶码 
符号位 阶码 
3. 数据类型 
尾码 
符号位 
00101100100 
尾码 
总结 一 下,计算机存储二进制数据要考虑两个因素,即存储位数和存储格式,它们共 
同决定了可存储的数值范围。存储非负整数可以使用无符号格式;如 需存储负数,则必须 
使用有符号格式;如 需存储实数,则必须使用 浮 点格式,即 “ 阶码+尾码”的存储格式。 
因为计算机使用定长存储,如果程序员选择不当,则保存数据时可能出现溢出或损失精度 
等问题。 
为了让程序员在申请内存时能方便地指定存储位数和存储格式,计算机高级语 言 引入 
了数据类型的概念。结合实际应用的 需要,高级语 言一般都预定义了若干种数据类型,规 
定了每种数据类型的存储位数、有无符号位、存储整数或实数等。下面列出 C++语言中的 
几种数据类型实例。 
■ int: 存储位数为 32 位 ( 4 字节),有符号位,可存储整数。 
■ unsigned int : 存储位数为 32 位 ( 4 字节),无符号位,只能存储非负整数。 
■ double: 存储位数为 64 位 (8 字节),有符号位,以浮点格式存储实数。 
数据类型 ( type ) 规定了数据的存储位数和存储格式 。 程序员在申请内存 空 间时应根 
据所存储数据可能的取值范围合理地选择数据类型,该数据类型决定了所申请内存空间的 
字节数及其存储格式。 C++语言将预定义的数据类型称为基本数据类型。 
1.4.3 信息分类及数字化 
人们 需 要通过输入设备将客观世界 中 不同形式的信息 数字化 ( digitization ) 成数值形 
式,然后才能输入到计算机进行存储和处理。例如,通过键盘输入文字,通过麦克风输入 
声音,通过图像扫描仪或数码相机输入图像等,这些输入过程都是一种数字化过程 。 
 
 
 第 1 章程序设计导论 
1. 文字信息的数字化 
计算机将阿拉伯数字 、 英文字母 以及 一 些常用符号等字符 以 按键的形式制 成键盘 。 键 
盘能感知用户的按键动作 ,并将按键所对应的字符转换成一个数值代码。例如 , 用户单击 
一 次按键 A, 键盘就向 计 算机输入 了 一个 数值 65, 65 是字符 A 的数值代码。计算机使用 
统 一 的标准来对字符进行编码 , 这个标准是由美国国家标准学会 ANSI 制定的美国信息交 
换标准代码 ( American Standard Code for Information Interchange ) , 简称 ASCII 码 。 ASCII 
码表(表 1-5 ) 包括 10 个阿拉伯数字 、 52 个英文字母(含大小 写) 以及 33 个 其他常用符 
号 , 另 外 还包括 33 个 控制字符(它们是不 可见 字符或不可打 印字符 , 例如 Esc 是 一个控 制 
字符 , 其代码为 27 ) , 合计 1 28 个字符。 
表 1 -5 ASC II 码表 
ASCII 值 字符 ASCII 值 字符 ASC I I 值 字符 ASC I I 值 字符 
。 NUT 32 (space) 64 @ 96 、 
1 SOH 33 ! 65 A 97 a 
2 STX 34 " 66 B 98 b 
3 ETX 35 # 67 C 99 C 
4 EOT 36 $ 68 D 100 d 
5 ENQ 37 % 69 E 101 e 
6 ACK 38 & 70 F 102 f 
7 BEL 39 , 71 G 103 g 
8 BS 40 ( 72 H 104 h 
9 HT 41 ) 73 I 105 1 
10 LF 42 * 74 J 106 J 
11 VR 43 + 75 K 107 k 
12 FF 44 , 76 L 108 l 
13 CR 45 77 M 109 m 
14 so 46 78 N llO n 
15 SI 47 / 79 。 111 。 
16 DLE 48 。 80 p 112 p 
17 DCI 49 1 81 Q 113 q 
18 DC2 50 2 82 R 114 r 
19 DC3 51 3 83 X 115 s 
20 DC4 52 4 84 T 116 t 
21 NAK 53 5 85 u 117 u 
22 SYN 54 6 86 V 118 V 
23 TB 55 7 87 w 119 w 
24 CAN 56 8 88 X 120 X 
25 EM 57 9 89 Y 121 y 
26 SUB 58 90 z 122 z 
27 ESC 59 , 91 [ 123 { 
28 FS 60 < 92 \ 124 | 
29 GS 61 93 ] 125 } 
30 RS 62 > 94 ^ 126 .- 
31 us 63 ? 95 127 DEL 
$ 
 
 
 ~ c++语言程序设计 (MOOC 版) (第 2 版) 
ASCII 码表中编码的数值范围是 0~127 , 可以用 7 位二进制来表示,即 000 0000~111 1111 。 
计算机一般是用 一个字节 (8 位)来存储一个字符编码,最高位未用到 ,置为 0。 
中 文字符则使用 1980 年由中国国家标准总局发布《信息交换用汉字编码字符集》中所 
确定的编码标准,简称 GB 2312 标准 。该标准共收入 6 763 个常用汉字和 682 个图形字符 。 
整个字符集分成 94 个 区,每区有 94 个位,每个区位对应 一 个字符 。 根据所在的区和位进 
行编码,得到 区位码 。将区位码换算成十六进制再加 上十六进制的 (2 020 ) 16• 得到 国标 
码 。 国标码再加上 (8 080 ) w 就得到最终存储在计算机里的汉字编码 ,即机内码 。存储 
一个汉字的机内码 需 要 2 个字节,每个字节的最高位都为 1 。可 以通过字符编码的最 高位 
来区分中英文字符, 0 对应英文字符 , 1 对应 中 文字符。 中文输入法负 责将用户输入的 中 文 
字符转换成数值编码。目前还有 一 些新的汉字编码标准,例如《汉字编码扩展规范》(简称 
GBK 标准)、 Unicode 编码等。 
2. 声音信息的数字化 
计算机通过麦克风输入声 音信息。麦克风将声音 的振动信号转换成电信号,由 一 些相 
关的电路按某种固定时间间隔(例如 0.02ms ) 对电信号进行离散化采样,然后再按某种固 
定的位数(例如 8 位二进制)将采样得到的模拟电信号转换为数字信号(称为 AID 转换), 
最终一段声 音信号被转换成一 组二进制数值。数值的大小对应声 音信号中振幅的大小 。 假 
设使用 8 位 AID 转换,则每个数值可以用 8 位二进制存储,即 l 个字节 。 
通过数字化,计算机可以对声音信息进行存储和处理 。 存储声音信息就是存储一 组数 
值 。 声音信息的处理被转换成对这组数值的某种运算,例如调整这组数值的大小等价于调 
整 音噩 的大小 。 处理后的声 音数据可按照其数字化的逆过程通过输出设备(例如 音箱)重 
新还原成声 音信号。 
3. 图像信息的数字化 
计算机通过图像扫描仪或数码相机输入图像信息。图像扫描仪或数码相机中的光电 
转换器件(例如 CCD ) 将光信号转换成 3 路电信号(分别对应红、绿、蓝 3 基色),由 
一 些相关的电路按某种固定间距对电信号进行离散化采样(例如 200DPI 扫 描分辨 率表示 
每英寸 200 个采样点),然后再按某种固定的位数将采样得到的模拟电信号转换为数字信 
号,最终 一 幅图像信号被转换成 一 组二进制数值(类似千 一个矩阵)。图像 中的每个采样 
点称为 一个像 素。数值的 大小对应图像信号 中光强的强弱 。假设使用 8 位 AID 转换,则 
每个像素可以用 3 个 8 位二进制存储,即 3 个字节,其数值分别对应像素的红、绿、蓝 
光强。 
通过数字化,计算机可以对图像信息进行存储和处理 。 存储图像信息就是存储一 组数 
值 。 图像信息的处理被转换成对这组数值的某种运算,例如调整这组数值的大小等价于调 
整图像的亮度 。 处理后的图像数据可按照其数字化的逆过程通过输出设备(例如显示器) 
重新还原成图像信号。 
 
 
 第 1 章程序设计导论 
本节习题 
1. 十进制 19 转换成二进制后的结果为( )。 
A. 10001 B . 10010 C. 10011 D. 10100 
2. 十进制 19 转换成八进制后的结果为( )。 
A. 21 B . 22 C. 23 D. 24 
3. 十进制 19 转换成十六进制后的结果为( )。 
A. 11 B . 12 C. 13 D. 14 
4 . 十进制 19.625 转换成二进制后的结果为( )。 
A. 10001.101 B . 10010.0ll C. 10011.101 
5. 程序设计中的数据类型与下列哪个概念没有关联? ( 
A. 存储位数 B . 存储格式 C. 取值范围 
6. 计算机是以( )的形式来存储实数的。 
A. 原码 B . 反码 
7. 目 前还有哪些信息不能被数字化? 
A. 文字信息 B . 听觉信息 
C++语言简介 
C. 补码 
() 
C. 视觉信息 
D. 10100.0ll 
) 
D. 数据来源 
D. 阶码+尾码 
D. 味觉信息 
高级语言是在不同程序设计思想指导下所设计的人工语 言。 1972 年,由 Dennis Ritch氐 
创建的 C 语 言是一种结构化程序设计语 言 , 具有简洁的语法和优异的性能。 1989 年,美国 
国家标准学会 ( ANSI ) 正式发布 C 语言标准,简称 ANSIC 或 C89 。 1990 年,该标准被国 
际标准化组织 (ISO ) 采纳(仅有一些小的修改),简称 ISO C 或 C90 。因为有了国 际标准, 
计算机语言方成为国际上真正统一 的语言,也就是说全世界程序员使用的 C 语言都是相同 
的。 C 语言是 20 世纪 80~90 年代使用最为广泛的计算机语言,并一直沿用到今天。 C 语言 
将结构化程序设计思想推向了顶峰。 
在面向对象程序设计思想出现以后,人们 开始设计各种支持面向 对象程序设计的计算 
机语言。 C 语言具有广泛的程序员基础,因此在 C 语言基础上发展新的支持面向对象程序 
设计的计算机语言成为—种必然的选择。千是, 1983 年 C++诞生了 。 C++语言兼容 C 语言 
的所有语法功能,是 C 语言的超集。 C++语言扩展了 " 类”等面向对象的语法形式,因此 
也被称为“带类的 C" 。 1998 年,国际标准化组织 (ISO ) 正式发布 C++语言标准,简称 
C++98 。虽然之后又陆续发布了 C++03 、 C++ll 和 C++l4 等新标准,但 C++98 标准仍为 
C++语言最基础 、 最通用的标准。 C++语言支持面向对象程序设计,同时也支持传统的结 
构化程序设计。其知识结构全面,知识点从结构化程序设计逐步过渡到面向对象程序设计, 
是学习程序设计的首选入门语 言。 
1995 年 , 美国 SUN 公司推出了 Java 语言。 Java 语言是针对跨平台(即 Java 程序无需 
重新编译即可在不同操作系统上运行)和互联网应用程序而设计的计算机语言。因为近些 
` 
 
 
 ~ c++语言程序设计( MOOC 版) ( 第 2 版) 
年来互联网的蓬勃发展, Java 语 言一跃而成为全球高级语言使用排行榜的第 1 名。 Java 语 
言是 “纯“面向对象的程序设计语 言 ,不支持结构化程序设计 。和 C丑一语言相比, Java 语 
言 对 C 语 言语法进行了精简 ,或者说只是部分 “借鉴”了 C 语 言的语法特点 ,因而语法相 
对简单,易千上手 。但 Java 语言放弃了 C 语言中一些与硬件相关的重要概念,例如“指针”, 
因此在对程序设计基本原理和概念的理解上存在欠缺。反过来,掌握了 C++语 言 , Java 语 
言的学习就会比较简单 ,甚至可以自学 。 
学习程序设计与学习某一种计算机语言不是同一个概念。程序设计与计算机语言的关 
系就如同人的“思想 ” 与“语言 ” 的关系。程序设计是思想,是解决间题的方法 ; 计算机 
语言是用来表达思想的形式,是描述问题及其解决方法的指令,因此指令在计算机语言中 
也被称作语句 (statement ) 。作为初学者,重要的是学习程序设计的原理和方法,培养运用 
计算思维来分析和解决问题的能力。同时,还需要选择—种计算机语言作为入门语言,学 
习其语法规则,并能熟练地阅读和编写—些简单的计算机程序。计算机语言将始终贯穿千 
程序设计的学习过程之中。程序设计的原理和方法是共同的,而计算机语言可以是不同的。 
一旦掌握了程序设计 原理和某种计算机语言 ,其他的语 言可 以通过一些进阶培训 ,甚至是 
自学就可以完成。本书选择 C丑语言作为学习程序设计的入门语言。 
学习本章的要点 
· 读者要从有形的硬件来理解相对抽象的软件。 
· 读者要认识到,计算机中的数据是有类型的。类型决定了数据在计算机中的存储位 
数和存储格式。 
· 读者要知道,学习程序设计和学习编程语言不是—回事。和 C 语言、 Java 语言相比, 
C++语言的知识体系更加系统全面。本书选用 C++语言作为程序设计初学者的入门 
、五兰 
1口口。 
本章习题 
1. 模仿编 程 。例 1-1 所示的 C丹程序能够将摄氏温度换算成华氏温度。请模仿编写 
个将华氏温度换算成摄氏温度的 C++程序 。使用 C++语 言集成开发环境(例如 Visual C++ 
6.0 或 DevC丹等)组建并执行该程序 。 记录编程过程中所出现的间题及解决方法。 
注 : C++语言用“/”表示除法。 
2. 模仿编程 。模仿例 1-1 所示的 C++程序,编写一个计算圆面积的程序。使用 C++ 
语言集成开发环境组建并执行该程序。记录编程过程中所出现的问题及解决方法。 
 
 
 第2 章 
数值计算 
数值计算 ( numerical computation ) 就是利用计算机求解各种数学问题。 
例如,将摄氏温度换算成华氏温度的公式是 : f= cx l.8 + 32, 其 中 J表示华氏温度, c 
表示摄氏温度。我们可以手工完成温度的换算。换算时,先指定变盔 c 的数值(即待换算 
的摄氏温度值),然后按照公式计算得到变昼 J 的 数值(即对应的华氏温度值)。 
如果想让计算机来帮我们做温度换算的工作,就需要编写一个数值计算程序。运行该 
程序,输入一 个 摄氏温度,程序就能自动换算成华氏温度,并将结果显示出来。编写这样 
的温度换算程序,我们 需考虑 以下 4 个方面的问题 。 
( 1 ) 数据存储 。 CPU 只能处理存放在内存 中 的数据,因此温度换算程序首先要申请 
内存空间来存放摄氏温度和华氏温度这两个数据 。 C++语言通过定义变量来申请内存空间 。 
每定义一 个 变昼,计算机即为该变盔分配内存空间。定义变量后,可以向该变昼所分配的 
内存单元写入数据或读出其中的数据 。 
在计算机语言 中, 一条指 令称为 一条语句。 C丹语言有多种不同功能的语句,每种语 
句都有自己的语法规则。使用定义变盔语句,温度换算程序可以定义两个变昼 ctemp 和 
ftemp 来分别保存摄氏温度和华氏温度。变噩名可以直接用原始公式中的 c 和 J, 但 ctemp 、 
ftemp 更便于程序员理解和记忆(其中 temp 是温度 temperature 的缩写) 。 
(2) 数据输入 。温度换算程序应让使用该程序 的用 户能够输入想要换算的摄氏温度 。 
C++语言使用输入语句来接收用户输入的数据,并保存到预先定义好的变昼 ctemp 中 。 
(3) 数值计算 。温度换算程序将存放在变噩 ctemp 中 的摄氏温度按照公式换算成华氏 
温度,换算结果要保存到华氏温度对应的变量 ftemp 中 。 C++语言以表达式的形式来编写 
换算公式。单个表达式仅能描述一个简单的计算。复杂 计 算可能需要分多步完成,每一步 
会产生—个中 间结果, 计 算机程序也要预先定义好保存这些中间结果的变噩。 
( 4 ) 数据输出 。温度换算程序要 把计算所得到的结果反馈给用 户 ,例如将保存在变 
量 ftemp 中的华氏温度换算结果输出到显示器上 。 C丑一语言使用输出语句来显示保存在某 
个变噩 中的 数据。 
程序中的变 呈 
数据是程序处理的对象。数据要存放在内存 中才能被 CPU 读取和处理,处理后的结果 
也 只能保存回内存中。程序 中 的数据包括原始数据、 中 间结果、最终结果等, C++语言使 
用 变量 ( variable ) 来保存这些数据。 定义变量就是为变昼申请内存空间。定义变量后,可 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
以向该变盔所分配的 内存单元写入数据或读出其中的数据,这称为访问变量 。程序执行时 , 
程序中的变噩就对应内存中的某个内存单元。程序结束退出时,变噩将释放其所占用的内 
存单元,以便给其他程序继续使用。简单地说,程序中的 变量=内存单元 。 
2.1.1 变 量 的定义 
程序员在定义变量时要考虑三方面的内容 : 变噩如何在内存中存储,变量如何命名, 
以及按照语 法规 则编写定义变 量语句。 
1 . 变量如何在内存中存储 
不同类型数据有不同的数值范围,所 需要 的存储位数不—样。例如,月份可以用整数 
表示,其数值范围为 1 ~ 12, 转换为二进制为 (1) 2 ~ 0100) 2 。 以 二进制形式来存储月份数 
据需要 4 位 。内存是 以字节 (8 位)为单位来管理的,程序员可以申请 l 个字节来存储月 
份数据,不足 8 位时高位补 0 。而对千摄氏温度这样的数据,其数值可能为负数,也可能 
为实数。计算机存储负数需要用有符号格式(即补码格式),存储实数需要用阶码+尾码的 
格式(即浮点格式),这些格式统称为存储格式。程序员定义变盔时,要根据数据可能的取 
值范围指定变昼的 存储位数和存储格式 。 
为了让程序员定义变盔时能方便地指定存储位数和存储格式,计算机高级语言引入了 
数据类型的概念。在 C++语言 中, 所有变噩都是有类型的。程序员在定义变量时需指定其 
数据类型(也就是指定其存储位数和存储格式)。 C++语言预先定义了若干种 基本数据类型, 
可满足绝大部分数值计算问题的需要。 C丑一语言规定了每种基本数据类型的存储格式(例 
如有无符号位、存储整数或实数),而存储位数则会随操作系统或编译器版本的不同而有所 
不同。表 2-1 列出了 32 位 Windows 操作系统上 10 种数值计算常用的基本数据类型。 
表 2-1 C++语言中 10 种数值计算常用的基本数据类型 ( 32 位 Windows 操作系统 ) 
数据类型 说明 存储位数 可存储的 运算 
( 字节数 ) 数值范围 
char 或 signed char 有符号字符型 8 位 - 128~127 
m1signed ch扛 无符号字符型 (1) 0~255 
sh01t 或 signed sho1t 有符号短整型 16 位 - 32 768 ~ 32 767 
m1signed sh01t 无符号短整型 ( 2 ) 0 ~ 65 535 
皿或 signed int 有符号整型 32 位 - 2 147 483 648 ~ 
long 或 si巴1ed long 有符号长整型 ( 4 ) 2 147 483 647 算术运算 
关系运算 
m1signed 或 lmsigned int 无符号整型 32 位 
( 4 ) 0 ~ 4 294 967 295 
m1signed long 无符号长整型 
float 单精度浮 点型 32 位 3.4x l0-38 ~ 3.4x l038 
( 4 ) (绝对值精度) 
double 双精度浮 点型 64 位 l.7x l0-308 ~ l.7x l0308 
( 8) (绝对值精度) 
 
 
 第 2 章数值计算 
表 2-1 中, char、 sho兀、 int 和 long 都可以存放整数(统称为 整型 ),其区别是所占用 
内存的字节数不 同 。字节数越大,可以存储的数值范围就越大 ,但 需占用 更多的内存 。如 
果超出数据类型的数值范围,则会造成数据丢失 , 这称为数据溢出 ( data overflow ) 。存储 
非负整数可以使用 无符号类型 ( unsigned ) 。存储实数应使用 float 或 double 类型(统称为 
浮点型 )。 double 类型的精度更高(可保留更多的小数位数),数值范围 也更大 。 程序员应 
根据所处理数据可能的取值范围来判断应定义哪种类型的变量 ,所依据的原 则 是 : 既要保 
证精度、防 止溢出 ,又要尽可能少地占用内存 。 
例如在温度换算公式f= c x l.8 + 32 中,摄氏温度 c 是自变盔,其取值范围称为定义域。 
华氏温度 f 是因变盔,其取值范围称为值域。在实际生活中,温度数据通常是实数,因此 
定义保存温度数据的变昼应选择 float 或 double 类型 。 float 类型 已经能够满足温度换算程 
序的精度要求(可以保留 38 位小数),其所占用内存的字节数为 4 字节,是 double 类型的 
一半 ,因此选用 float 类型更加合理 。 
不同类型的数据可以做不同的运算 。 例如 在 C++语言 中 ,整数、实数都可以进行算术 
运算(即加减乘除),也可以进行关系运算(即比较大 小) , 但整数还可以进行一类被称为 
“ 位运算"的运算,而实数不可以。因此在计算机语言 中 ,数据类型的内涵除了包括数据 
的存储位数和存储格式之外,还隐含包括了该类型数据可以进行哪些运算 。 
2. 如何为变量命名 
程序员在定义变盔时除了指定变盔的数据类型外,还需要指定变昼名,即为 变量命名 。 
C++语言的词法元素包括关键字、标识符、常盔、运算符、分隔符等。 关键字 ( keyword) 
是 C++语言预先保留的具有特定含义的单词。例如 , 表 2-1 中 表示基本数据类型所用到的 
单词 int、 float、 unsigned 等,它们就是 C丑语 言 的关键字 。表 2-2 列出了 63 个 C丑语言所 
保留的关键字。 
表 2-2 C+ +语言中的 63 个关键字 
asm do if re血n typedef 
auto double inline sho1t typeid 
bool dynamic_cast int sigi1ed typename 
break else long sizeof 皿lOll 
case enum mutable static unsigned 
catch explicit namespace static cast usmg 
ch扛 expo1t new s1l11ct vi.Itual 
class extern operator switch void 
const false p1ivate template volatile 
const cast float protected this wch打 t 
contiime for public tlu·ow while 
default 仕iend register t:Iue 
delete goto reinterpret_cast ny 
$ 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
程序中所包含的—些实体(例如变蜇),需要程序员为它们命名。由程序员定义的程序 
实体名称统称为标识符 ( identifie1 ) 。对标识符的命名需符合如下命名规则 : 
· 以大写或小写英 文字母 、 下 画 线” _“开头; 
· 由大写或小写英文字母、下画线” _“、数字 0~9 组成; 
· 不能是关键字。 
例如下面这些例子 : 
abc、 Abe 、 _be、 abc 1 23 、 abc_123 、 A、 a、 _Nol 等, 符合标识符命名规则。 
1 23 、 abc.123 、温度、 float 等, 不符合标识符命名规则,属于语法错误。 
另外, C++语言区分大小写英文字母。例如, abc 和 Abe 是两个不同的标识符 。 
3. 变量定义语句的语法规则 
在计算机语 言 中,语句 是一条语法完整的指 令 。 C曰-程序 中 的语句应符合 C丑一语言的 
语法规则,并以分号 ” ,“结束。请注意 : 结束符 ” , ”是英文输入状态下输入的分号,不 
是中文输入状态下的分号,这是初学者易犯的一个错误。类似的还有逗号 ”,久 单引号 ”“'、 
双引号 ”“”等分隔符。定义变蜇需要编写 变量定义 ( variable definition ) 语句。 
C++语法:变量定义语句 
数据类型 变量名 1 , 变量名 2 , . ..,变量名 n; 
语法说明: 
· 数据类型指定了变量的存储位数和 存储格式。 
· 变量名 需符合标识符的命名规则。 
· 可在一条语句中定义多个具有相同数据类型的变益,变益之间用“,“隔开。 
举例:定义 2 个变量 ctemp 和 ftemp 
或 
double ctemp ; 
double ftemp ; 
II 计算机将在内存 中 为 double 型变量 ctemp 分配 8 个 连续的字节 
II 作为其 内存单 元 , 并在该内存单元中以浮点格式存储数据 
double ctemp, ftemp ; //可以在一条语句 中定义多个相 同类型的变蜇 
程序由计算机执行。当执行到程序 中 的变量定义语句时,计算机为所定义的变噩分配 
内存单元,后续语句将通过变量名来访问该 内存单元 。 计算机只能识别机器语 言,机器语 
言是通过地址访 问内存的 。高级语言 则 通过变昼名来访问内存,变噩名便于程序员记忆和 
使用。高级语言程序需编译成机器语言程序才能被计算机执行。编译时,程序 中 的变昼名 
被转换成了内存地址。也就是说,程序员在编写高级语言程序时使用变噩名来申请和访问 
内存,而计算机执行其编译后的机器语 言程序时使用的则是 内存地址 。 
2.1.2 变 量 的访问 
定义变盔后 ,可以向变盔所分配的 内存单元写入 (write ) 数据或读出 ( read ) 其中的 
数据。对变噩的读写操作统称为对变盔的 访问 ( access ) 。 
 
 
 第 2 章数值计算 
C++语 言 对变盔 写入数据的操作有 3 种方式 。 
(1) 使用输入语句,将键盘输入数据写入变盔 的内存单元。例如, 
cin >> ctemp; 
该语句指示计算机从键盘接收用 户 输入的数据,并将其写入变噩 ctemp 的内 存单元 。 
( 2 ) 使用赋值运算符 ”=“,对变量 进行赋值运算 。 例如, 
ctemp = 36; 
该语句将数值 36 赋值给 ctemp, 即将数值 36 写入变盔 ctemp 的内存单元。 
(3) 初始化。定义变盔 的同时为变盔赋初始值,这就是初始化 。 例如 , 
血 x=IO, y; 
该语句定义了 2 个 int 型变盔 x 和 y 。 执行该语句时,计算机为变盔分配内存 空 间 。 x 
被初始化了,计算机在为 x 分配内存单元的同时向该内存单元写入初始值 10 。 y 没有被初 
始化,通常情况下其所分配内存单元中的值是以前程序遗留下来的,是不确定的 。 
C++语 言 从变蜇读出数据的操作有 2 种方式 。 
(1) 当变 盔 作为操作数参与运算时,计算机将自动读取其内存单元中存放的数据 。 
例如, 
ftemp = ctemp*l.8 + 32; 
该语句中等号右边的变噩 ctemp 是作为操作数参与运算的,计算机会自动读取其内存 
单元中的数据 。 读出该数据后,再使用该数据进行运算,并将运算所得到的结果赋值给等 
号左边的变盔 ftemp 。 
( 2 ) 使用 输出 语句,读出并显示变蜇 内存单元中存放的数据,以便用 户查看。 例如, 
cout << ftemp; 
该语句指示计算机读出变盔 ftemp 内存单元中存放的数据,并在显示器上显示出来。 
定义后的变盔才有内存单元,才能被访问。程序员在编写 C丹程序时应遵循“ 先定义 , 
后访问”的 原则。未经定义的变盔不能访问。 
本节习题 
1. 每周有 7 天,为星期 —~星期日分别赋予一个整数编码。使用 十进制只 需 1 位编码 
就够了,例如 0~6 。 请问用 二进制最少 需要几位编码? ( ) 
A. 1 B. 2 C. 3 D. 4 
2. 下列哪种数据类型占用内存的字节数最多? ( ) 
A. chai、 B. int C. float D . double 
3. 下列哪种数据类型的变盔不能存储负数? ( ) 
A. unsigned sh01t B. int C. float D. double 
$ 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版 ) 
4. 计算机 (32 位系统)存储 int 型数据使用下列哪种方式? ( ) 
A. 占用 2 字节,原码形式 B . 占用 2 字节 ,补码形式 
C. 占用 4 字节,原码形式 D. 占用 4 字节,补码形式 
5 . 假设变噩 x 的值域为 [O, 50 000] 之间的整数,则其最适合的数据类型是哪种? ( ) 
A . unsigned short B. int C. float D. double 
6 . 假设变噩 x 的值域为[-1. o, 1. 0]之间的实数,则其最适合的数据类型是哪种? ( ) 
A. char B. sh01i C. int 
7. 下列哪个名字可以作为变盔名? ( ) 
A. No.I B. 123ABC C. long 
8. 下列 定义变量语句 中,错误的是( )。 
A. int x, y; 
C. int x = 5, y = 5; 
程序中的常量 
B . int x = 5, y; 
D. int x = y = 5; 
D. double 
D. Long 
温度换算公式 f= cx l.8 + 32 中, f和 c 是变噩,而 1.8 和 32 是常噩。程序运行过程 中 
数值不会改变的噩称为 常量 ( constant ) 。本节我们先介绍两种程序中常用的常噩 : 字面常 
噩和符号常噩。 
1. 字面常量 
C++语言借鉴了我们数学中熟悉的书写形式来表示数值常噩。例如 : 
ftemp = ctemp*l.8 + 32; 
该语句中, 32 是—个整数常盔 , 1.8 是一个实数常噩 , 它们就是源程序中的字面常噩 
( literal constant ) 。 C++语言使用负号” - ”来表示负数常噩 ,例如-32 、 -1. 8 等 。实数常噩 
也可以采用科学表示 法 ,例如 1.8 可以写成 1.8e0 、 1.8EO、 0.18el 、 18.0e-1 等,其中表示 
指数的字母写成小写 e 或大写 E 都可以。 
程序运行时,常盔也需要存储在内存中。程序员在编写程序时应指定常噩的数据类型, 
以确定该常 量的存储位数和存储格式 。 C丹语言采用默认形式或后缀形式来指定常量的数 
据类型。 
1) 默认形式 
C++程序中,整数常噩默认为 int 型,即有符号整型,存储位数 32 位 ( 4 字节)。例如 
10 、 -10、 0 等,都默认为 int 型常盔。 
C++程序中,实数常盔(带小数点)默认为 double 型(即双精度浮点型),存储位数 
64 位 (8 字节)。例如 10.5 、 -10.5 、 1.05el 、 10.0 等,都默认为 double 型常盔。 
小数点是区分整数和实数的标志。例如 C丹程序中,虽然 10 和 10.0 的数值相等,但 
数据类型是不一样的。 10 是 int 型,以 4 字节补码形式存储 ; 而 10.0 是 double 型,以 8 字 
节浮点形式存储。 
 
 
 第 2 章数值计算 
2) 后缀形式 
可以在常昼后面添加不同的后缀字母来指定常噩的数据类型(表 2-3 ) 。 
后缀字母 
表 2-3 C++语言指定常 量 数据类 型 的后缀字母表 
数据类 型 举例 
在整数常盐后面添加 L 或 l 
在整数常批后面添加 U 或 u 
在数值常批后面添加 F 或 f 
长整型 long 
无符号格式 unsigned 
单精度浮 点 型 float 
I OL, I 01, - 20L 
IOU , I 仇1 , 20UL, 20LU 
IO.Sf, IO.SF, 20F 
C++程序中的数值常盔默认为 十进制数,这符合人的使用习惯。某些情况 下,程序员 
可能 需要在程序中以八进制或十六进制来表示整数常昼。 
以 0 开头的整数常昼为八进制。例如 C++程序中的整数常 噩 020 是一个八进制数,其 
十进制数值等于 16 。 八进制整数常 噩 中只能出现 0~7 的数字,否则就属千语法错 误 。 例如, 
C++程序中不能出现 0 1 9 这样的整形常噩。 
以 Ox 开头的整数常蜇为十六进制,其中可以包含 0~9 的数字和 A~F 的字母(大小写 
均可) 。 例如, C++程序中的 整数常昼 Oxla 是一个十六进制数,其十 进制数值等千 26 。 
编写 C++程序时,程序员可以使用 十进制、八进制或十六进制来表示数值常蜇。在编 
译成机器语言时,由编译器负责将不同进制的数值常昼统统转换成二进制。 
2. 符号常量 
可以将经常使用的常噩定义成一个符号常 量,或称为宏定义 ( macro definition ) ,然 
后 在程序代码中用符号常昼来代替 具体的数值 。 
例 2-1 符号 常量应用举例:计算圆的面积和周长 
l | /I C廿程序实例 : 从键盘输入圆的半径,计算并显示圆的面积和周长 
2 I #include <iostream> 
3 1 llSing namespace std; 
4 I #defme PI 3.14 II 定义一个 符号常矗 PI 来表示 兀 的值 
5 
~ 
1 rtmain() 
7I{ 
II 定义一个变益 r 来存放圆的半径 II 从键盘输入圆的半径 
8 
9 
10 
11 12 
13 14 
15 
16 17 
18 
19 
20 I} 
double r; cin >> r; 
double s; //定义一个变益 s 来存放圆的面积 s =PI * r * r; //计算圆的面积 , 结果保存到 变篮 s 中 
cout << s << endl; //显示圆面积 
// endl 表示在显示完面积后换一行 , 这样就能与 下面将显示的周长隔开 
double len; len = 2 * PI * r; cout << len << endl; 
re血no; 
II 定义一个变益 len 来存放圆的周长 II 计算圆的周长 , 结果保存到 变篮 len 中 II 显示圆的周长 
$ 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
代码第 4 行定义一个符号常盔 PI 来表示 亢的值,然后在第 12 和 17 行中用符号常噩 
PI 来代替具体的数值 3 .14 。使用符号常盔有 以下 3 个优点 : 
(I) 保证数值常 量的 —致性 。使用符号常盔 PI 可以防止程序中出现不同的 冗 值。例如, 
出现 3.14 或 3.141 592 6 等不同的 冗 值。 
(2) 提高程序代码的可读性 。例如 ,如果不使用符号常 噩 ,代码第 12 行原来的形 
式是 : 
s = 3.14 * r * r; 
PI 是符号常噩 的名字,它明确地表示自己是一个兀值 。这样可以让阅读者更容易理解 , 
更容易联想到求圆面积的公式。 
(3) 便于数值常量 的修改 。假设为了提高精度 , 需将源程序 中的 3.1 4 统一改为 
3.141 592 6 。使用符号常噩只要修改其定 义语句,即代码第 4 行 : 
#defme PI 3.1415926 
程序其他部分无须修改(例如代码第 12 和 17 行)。而若直接书写 3.14, 则 需要搜索整 
个源程序,逐一修改所有 的 3. 14 。 
C++语法 :定义符号常 量 
#define 符号常量名常量值 
语法说明 : 
· 以井号“#“开头,结尾不能加分号“,“。 
· 符号常量名应符合标识符命名规则。习惯上符号常量名使用大写字母。 
· 定义符号常益也称为宏定义,将在第 6.2 节进行详细讲解。 
举例:定义一个符号常量 ABC 
#defme ABC 5 II 定义符号常量 ABC, 来表示常量值 5 
3. 理解常量与变量 
这里我们仍以温度换算公式f= cxl.8 + 32 为例,回顾一下什么是程序中的常噩和变盔。 
程序设计中,常盔就是在编写程序时就能确定其数值大小的盔(例如 1.8 和 32) ,程序 
员在程序中直接书写数值(即字面常盔),或将其定义成符号常盔。而变噩则是在编写程序 
时不能确定其数值大小的盔(例如摄氏温度 c 是今后程序执行时由用户输入的),程序员需 
要在编写程序时使用定义变盔语句预先为它们分配好内存空间(例如为摄氏温度定义一个 
变盔 ctemp ) ,这样程序执行时才能在其中存放数据。 
程序中的常量是在程序编写时由程序员指定数值大小,并且在程序执行过程中不会改 
变的盔。程序中的变盔是在程序编写时申请、执行时分配的内存单元,用于保存用户输入 
的数据或计算得到的结果。程序执行过程中变盔是可变的,其含义是随着程序的执行,变 
量 的内存单元中可能被存放不同的数值 。 
 
 
 第 2 章数值计算 
本节习题 
1. C++源程序中,下列哪个常量的数据类型是 float 型 ? ( ) 
A. 10 B . lOL C. 10.0 D. IO.Of 
2. C++源程序中,下列哪个整数的数值最小? ( ) 
A. 15 B . 15L C. 015 D. Ox15 
3. 下列哪个浮点型常蜇是错误的? ( ) 
A. 5.82 B . 0.582el C. 0.582Elf D. Ox5.82 
4 . C++源程序中,数值常盔 010 被默认为( )。 
A. 二进制 , short 类型 B . 二进制, int 类型 
C. 八进制 , int 类型 D. 十六进制 , sh01t 类型 
5. 下列符号常盔定义语句 中, 正确的是( )。 
A. #defme ABC 10 B . define ABC I 0 
C. #define _ABC 10; D. #defineABC=IO 
6. 计算圆形周长的公式是 : 周长=2冗r, 其中 r 为半径 。编写计算圆形周长 的程序时 需 
要将什么数据定义成变噩 ? ( ) 
A. 冗 B . 半径 C. 周长 D. 半径和周长 
7. 计算圆形周长的公式是 : 周长=2冗r, 其中 r 为半径 。编写计算圆形周长 的程序时 需 
要将什么数据定义成常噩 ? ( ) 
A. 冗 B . 半径 C. 周长 D. 2 和兀 
算术运算 
描述计算内容和计算过程的公式称为 表达式 ( exp比ssion ) 。表达式由 运算符 ( operator ) 、 
操作数 ( operand ) 和 括号 (parentheses) 组成 。 C++语言中,在表达式后加分号 ” , ” 就构 
成 一条 表达式语句 。表达式语句用千处理数据 , 是 C丑一程序 中 最常用的语句。 
运算符有优先级 , 优先级高的先算。同级运算符按其结合性(从左到右或从右到左) 
所规定的顺序来计算。括号可以提高优先级 , 括号内的先算 , 多层括号时先算里层括号。 
大 部分运算符需要两个操作数 , 称为双目运算符。某些运算符只需要一个操作数 , 称为单 
目运算符。 C丹语言根据功能和用途将运算符划分为算术运算符、位运算符、关系运算符、 
逻辑运算符等不同 类型。本节先介绍算术运算符。 
2.3.1 C+ +语言中的加减乘除 
加减乘除是最常用的算术运算 , C++语言分别用 不 同的符号来表示它们 : + (加)、  
(减) 、* (乘)、/ (除),这些符号称为算术运算符。由算术运算符构成的表达式称为算 
术表达式 。 C++语言中加 、 减、乘、除运算的含义与我们的常识是一致的 , 但也存在一 
些区别。 
` 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版 ) 
1. 优先级 
运算符有不同的优先级,优先级高的先算。 C丑一语言以 1 ~15 的数值来表示优先级的高 
低, l 为最高优先级, 15 为最低优先级。例如, *、 I的优先级为 3 级, 十、- 的优先级为 4 
级,也就是先乘除,后加减。 
2. 结合性 
同级运算符按其结合性(从左到右或从右到左)所规 定的顺序来计算 。在 C++语言 中, 
不同运算符有不同的结合性 。 十 、 一、*、 I 的结合性是从左到右 。 也有某些运算符的结合性 
是从右到左 。 
3. 操作数及其数据类型转换 
算术表达式中,参与运算的操作数可以是常盔 、变噩等 。 C++语言中, 一个操作数除 
了代表一 个数值,还 具有特定的数据类型。 例如,表达式 ”5+3” 是含两个操作数(常盔 ) 
的加法运算。这两个操作数的数值分别是 5 和 3, 数据类型都是 int 型。在 C++语言中,当 
不同类型的两个操作数参与算术运算时,要先转换成相同类型,然后再进行计算 。 C++语 
言为数据类型转换提供了强制转换和自动转换两种方法 。 
1 ) 强制转换 
数据类型 强制转换就是由程序员在表达式中将操作数由 一种数据类型转换成另 一种数 
据类型。 
C++语法:数据类型强制转换 
(数据类型)(操作数)或(数据类型)操作数 
举例: 
(sho1t)32 指定 32 为有符号短整型 (2 字节) (long) -32 指定-32 为有符号长整型 ( 4 字节) 
(float) 1.8 指定 1.8 为单精度浮点型 ( 4 字节) (double)l.8 指定 1.8 为双精度浮点型 (8 字节) 
注:数据 类型应与操作数的数值相符,否则将造成数值的改变。例如, 
(float)32 将 32 变为 32.0 (可以接受) (int)l.8 将 1.8 变为 1 (丢失小数部分) 
(sho1t)32 769 将 32 769 变为-32 767 (溢出) (uns呾1ed sho1t) -1 将-l 变为 65 535 ( 丢失负号) 
说明 : 为什么(1msigned short}-l 会变成 65 535 呢?因为- l 是负数,其 2 字节补码是 (1111111111111111)2' 
即 16 位全都是 1 。如果让计算机以 有符号格式来解释这个数,则它是- 1; 而以 无符号格式来解释这个数 , 
则它是 65 535 。 
程序员在 C++程序中编写算术表达式时应合理运用数据类型强制转换。例如表达式 
"5 .5 + 3" , 其中 5.5 是 double 型( C++语言默认带小数点的数都是 double 型), 3 是 int 型。 
可以将 3 转换为(double)3, 使两个操作数都为 double 型;也可以将 5.5 转换成(int)5.5 , 使 
两个操作数都为 int 型。显然后 一种转换方法将丢失 5.5 的小数部分,即 “(int)5.5 + 3" 转 
换后等价于 “ 5+3 ",这是不可接受的。通常程序员应采取前一种方法,即 “5.5 + (double)3", 
其转换后等价于 “5 .5 + 3.0”。 
 
 
 第 2 章数值计算 ` 
2 ) 自动转换 
程序员在源程序中编写算术表达式时可以将数据类型转换的工作交由编译器程序完 
成 。 C++编译器在将 C++源程序编译成目标程序时 , 如果发现某个算术表达式含有不同类 
型的 操作数,则进行自 动转换。 自动转换 (或称为隐含转换)的原则是 “ 将低类型向高类 
型转换"。 C++语言 中数据类型的高低顺序如下 : 
unsigr1ed m1signed Unsigned m1signed chru· char short short ir1t int long long float double 
低 
高 
数据类型越高,其可存储的数值范围越大(因为占用字节数多),精度也越高,因此这 
种自动转换是安全的。例如表达式 ” 5.5 + 3", 编译器编译时会自动将 3 ( int 型,低类型) 
转换为 double 型(高类型),使两个操作数的类型一致 ,即都为 double 型。 ”5.5 + 3" 经过 
自动转换,它等价千 “ 5.5 + 3 .0 ”。 C丑语言的数据类型自动转换功能可以减轻程序员的工 
作 盔。 
4. 表达式结果 
在 C丹语言 中,任何数据都是有数据类型的 , 因此表达式的 计 算结果有值, 也有数据 
类型。算术表达式计算结果的数据类型等于其操作数的数据类型。例如,算术表达式 
5+3 
该表达式计算结果的数值等千 8, 而数据类型为 int 型。因为操作数 5 和 3 的数据类型 
是 int 型 , 因此表达式结果的数据类型 也为 int 型。如果参与运算的操作数类型 不同,则进 
行自动转换。例如,算术表达式 
5.5 + 3 
该表达式计算结果的数值等千 8 .5, 数据类型为 double 型。操作数 5.5 是 double 型 , 3 
是 int 型。遵循 “ 低类型向高类型转换 " 的原则 , 3 被自动转换为 double 型。转换后 ,两 
个操作数的类型都是 double 型 , 因此表达式结果的数据类型 也为 double 型。两个整数类型 
相除将丢失小数。例如,算术表达式 
5/ 2 
该表达式计算结果的数值不是 2.5, 而是 2 。因为参与运算的两个操作数都是 int 型 , 
所以表达式结果的数据类型 也 是 int 型 , 其数值将丢掉 小数而只保留整数部分。将操作数 
改为 double 或 float 类型可以避免上述丢失小数的问题。例如程序员可以将表达式修改成 
如下形式 : 
5.0 / 2 、 5 / 2.0 、 (double)5 / 2 、 5 I (float)2 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
5. 括号 
在表达式中,括号可以提高优先级 。 括号内的先算,多层括号时先算 里层括号 。 例如 
表达式 
(3*(2+5) - 1) / 2 
与数学上不同的是, C++表达式只使用小括号 ” ( ) "'有多层括号时也是这样 。 C丹语 
言 对中括号” [ ] " 和大括号 ” { } "分别赋予了新的含义,被用 在 了其他场合 。 
2.3.2 其 他 算 术 运算 符 
C++语 言 还有几个比较特殊的算术运算符 。 
1 . 取正/取负运算符+和 
C++语 言 中的取正/取负运算符就是数学上所说的添加正负号,可对运算符后面的操作 
数取正或取负 。 取正/取负运算符是 单 目 运算符,即只有 一 个操作数 。 可以将+32 , - 32, -x 
等理解成是一个由取正/取负运算符构成的算术表达式 。 例如 “ -X” 是一个算术表达式,该 
表达式结果的数据类型与变噩 x 类型相同,数值等千变噩 x 中 所保存数值的负值 。 
2. 取余运算符% 
取余运算是 计算两个操作数相除后得到的余数 。 例如, l0-6 的 整数商等于 l ,余数等 
千 4, 因此 10 % 6 的结果等于 4 。 %只能对两个整型操作数进行取余运算,运算结果也 是 
整型 。 %属千算术运算符,其优先级为 3 , 结合性为从左到右(与乘除运算符相同) 。 
3. 自增运算符++ 
如果想把某个数值型变噩 x 的值加 1, 可使用自增运算符”++”。 例如 “x++ ", 计算 
机计算该表达式时,先读出变昼 x 的值,将其加 1 后 重新写回 x 的内存单元。 ”++” 是 单 
目运算符,操作数必须 是 变 噩。 
"x++" 还是一个由自增运算符” ++ ”构成的表达式 。 该表达式的结果等千 x 加 l 之 
前的值,数据类型与 x 的类型相同 。 ”++” 是一种 泛化 的运算符 。 与普通运算符相同的是 , 
泛化运算符与操作数一起构成表达式,表达式的结果可以作为操作数继 续参与下 一步运算 。 
与普通运算符不同的 是 ,泛化运算符在运算的同时还会修改参与运算操作数的值 。 例如, 
加减乘除从来不会修改操作数的值,而 “x++ ” 在计算表达式结果 的同时还会修改操作数 x 
的值 。 C++中 类似的运算符还有后续章节将逐步介绍的" -- ”“ = ” 等运算符 。 
将“++“放在变量之后,称为后置形式的自增运算符 。 也可以将“++“放在变昼之前, 
称为前置形式的自增运算符 。 自增运算符的前置与后置存在 以下区别 : 
(1) 所构成表达式的结果不同 。 后置表达式和前置表达式都能将变昼 的值加 l , 但后 
置表达式的结果等千该变盔加 l 之前的值, 而 前置表达式的结果等千变噩加 1 之后的值 。 
例如, 已有变昼 X : "int X = 10; " 则 ” x++” 和 “++x " 都能将 x 的值加 l , 变成 l l 。 但表 
达式 ”x++" 的结果为 10, 而表达式”++X " 的结果为 11 。 表达式结果对该表达式继 续 参 
 
 
 第 2 章数值计算 
与下 一步计算是有意义的,例如表达式 ”(x++)*2" 的结果等千 20 , 而表达式 ”(++x)*2 " 
的结果等于 22 。 
( 2 ) 优先级与结合性不同。后置自增运算符的优先级为 1 级(最高级),结合性为从 
左到右。而前置自增运算符的优先级为 2 级,结合性为从右到左。 
4. 自减运算符- 
自减运算符与自增运算符类似,只是将加 l 操作变成减 l 操作 。自减运算符也有后置 
与前置两种形式,例如 “x- - "(后置)或“ --X " (前置),其优先级和结合性分别与对应 
的后置或前置自增运算符相同 。 
本节习题 
1. C++语言表达式 : 5 + 2.0, 该表达式结果的数据类型和值分别是( )。 
A. short, 7 B . int, 7 C. float , 7.0 D. double, 7.0 
2 . C++语言表达式 : 5 1 2, 该表达式结果的数据类型和值分别是( ) 。 
A. short, 2 B . int, 2 C. float , 2.5 D. double, 2.5 
3 . C++语言表达式 : 9%5, 该表达式结果的数据类型和值分别是( ) 。 
A. short, 1 B . int, 4 C. float , 1.8 D. double, 4.0 
4 执行 C++语句 “intx=5 , y; y=x++; ",执行后变噩 x 和 y 的值分别为( )。 
A. 5, 5 B . 5, 6 C. 6, 5 D. 6, 6 
5 执行 C++语句 “int x = 5, y; y = - -x; ", 执行后变盔 x 和 y 的值分别为( ) 。 
A. 4, 4 B . 4, 5 C. 5, 4 D. 5, 5 
6 执行 C++语句 “int x = 5, y = 6, z; z = x++ I - -y; ",执行后变量 x 、 y 和 z 的值分 
别为( 
A. 5, 5, 1 B . 6, 5, 1 C. 6, 5, 1.2 D. 5, 6, 0 
位运算 
计算机程序可以用 一 个二进制位来记录某种对象的开关状态,这种二进制位被称为状 
态位 。 举个例子,假设用计算机来控制 一 组电灯(用 1 表示开, 0 表示关),则 一个字节 
可以表示 8 盏电灯的开光状态,两个字节就可以表示 16 盏电灯的开光状态。对状态位的 
设定就可以控制某盏电灯的开关。 C++语言提供 6 种位运算符,可应用千状态位的设定或 
检测,它们被统称为位运算。 
1. 位反运算符~ 
“ 位反”运算符是单目运算符,其运算规则是 : 将 l 变成 o, 0 变成 l 。 
根据数据类型的不同,程序中参与位反运算的操作数至少有 8 位 ( char 型) 。 位反运算 
是将 操作数中的所有位同时进行取反 。 例如 一个 8 位的位反运算: 
$ 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版 ) 
~ 0101 0101 
= 1010 1010 
在 实际应用中,位反运算可将操作数中的所有状态位同时进行反置。假设定义 一 个无 
符号字符型变量 s 来记录 8 盏电灯的开关状态 : 
unsigned chars = OxSS; // OxSS 是十六进制数,其对应的二进制为 ( 0101 0101 )2 
对变盔 s 进行位反运算可将 8 盏电灯中原来亮着的灯关闭,原来没亮的灯打开 。 用 C++ 
语 言来描述上述位反运算,其形式为 : 
s = ~s; 
2. 位与运算符& 
“位与“运算符是双 目 运算符,其运算规则是 : 参与运算的两个位都为 1, 则 结果为 1, 
否则为 0 。 参与位与运算的两个操作数是按位进行运算 。 例如 一个 8 位的位与运算: 
00110011 
& 0000 1111 
= 0000 0011 
位与运算可应用千检测操作数中某个状态位的状态,或将其置为 o, 此时另 一 个操作 
数被称为掩码 ( mask) 。 假设一个无符号字符型 ( unsigned char ) 变盔 s, 如想检测 s 中某 
一位的状态是 0 还是 1 , 则可使用与该位对应的掩码进行位与运算 。 例如, 
bbbb bbbb 操作数 s, 其中 b 表示 0 或 1 
& 0000 0010 检测倒数第 2 位状态的掩码(Ox2) 
- 0000 OObO 运算结果 : 保留倒数第 2 位,其他位变成 0 
如果结果为 0( 即 8 位全部为 0), 则 倒数第 2 位的状态为 0; 
否则倒数第 2 位的状态为 l 
用 C丹语 言 来描述上述位与运算,它是— 个位与运算表达式,其形式为: 
s &Ox2 
位与运算可以将变噩 s 中某 一位的状态置 o , 例如, 
bbbb bbbb 操作数 s, 其中 b 表示 0 或 1 
& 1111 1101 将倒数第 2 位状态置 0 的掩码(OxFD) 
= bbbb bbOb 运算结果 : 将倒数第 2 位置成 o , 其他位不变 
用 C++语 言 来描述将变量 s 倒数第 2 位置 0 的操作,它 是一 条含位与运算的表达式语 
句,其形式为 : 
s = s &OxFD; 
3. 位或运算符 I 
“位或“运算符是双 目 运算符,其运算规则是 : 参与运算的两个位只要有一位为 1, 
则结果为 1, 否则为 0 。 参与位或运算的两个操作数也是按位进行运算 。 例如 一个 8 位的位 
或运算 : 
 
 
 OOll OOll 
0000 llll 
- OOll llll 
第 2 章数值计算 
位或运算可用千将操作数中的某个状态位置为 1 。 例如,假设 一 个无符号 字符型 
( unsigned ch如变蜇 s, 则可选择掩码 Ox2 将其倒数第 2 位的状态置为 1 。 
bbbb bbbb 操作数 s, 其中 b 表示 0 或 l 
I 0000 0010 将倒数第 2 位状态置 l 的掩码(Ox2) 
= bbbb bblb 运算结果 : 将倒数第 2 位置成 1, 其他位不变 
用 C丹语言来描述上述位或运算 ,其形式为: 
s = s IOx2; 
4. 异或运算符^ 
“ 异或 “运算符是双目运算符 ,其运算规则 是 : 参与运算的两个位不同 ( 0 和 1, 或 l 
和 0 ) ,则结果为 1, 否则为 0 。参与异或运算的两个操作数按位进行运算 。例如一个 8 位 
的异或运算 : 
00110011 
I\ 0000 1111 
= 00111100 
异或运算可用千将操作数中的某个状态位进行反置,即原来为 0 则反置成 1, 原来为 l 
则反置成 0 。 例如,假设一个无符号字符型 ( unsigned char ) 变昼 s, 则可选择掩码 Ox2 将 
其倒数第 2 位的状态进行反置 。 
bbbb bbOb 操作数 s, 其中 b 表示 0 或 l 。 假设倒数第 2 位为 0 
I\ 0000 0010 将倒数第 2 位状态进行反置的掩码(Ox2) 
- bbbb bblb 运算结果 : 将倒数第 2 位由 0 反置成 1, 其他位不变 
bbbb bblb 操作数 s, 其中 b 表示 0 或 l 。 假设倒数第 2 位为 l 
I\ 0000 0010 将倒数第 2 位状态进行反置的掩码(Ox2) 
- bbbb bbOb 运算结果 : 将倒数第 2 位由 l 反置成 o, 其他位不变 
用 C丹语言来描述上述异或运算 ,其形式为: 
s = s /\ Ox2; 
5. 左移运算符<< 
“ 左移”运算将操作数按二进制位左移指定的位数,左移时高位被移除,低位补 0 。 
例如将一个 8 位操作数左移 2 位: 
OOll OOll 8 位操作数 
<< 2 左移 2 位 
的 llOO ll业 高 2 位被移除,低 2 位补 0 , 得到 llOO llOO 
$ 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
左移运算符的语法形式是 : 
操作数<<左移位数 
假设 一 个整型变 量 s, 用 C++语言来描述将 s 左移 2 位的语法形式是 : 
s<< 2 
6. 右移运算符>> 
“ 右移”运算将操作数按 二进制位右移指定的位数,右移时低位被移除,无符号数高 
位补 o , 有符号数高位补符号位 。 例如将一个 8 位无符号数右移 2 位 : 
0011 0011 8 位无符号数 
>> 2 右移 2 位 
- 凶001100 壮 低 2 位被移除,高 2 位补 o , 得到 0000 1100 
再比如,将一个 8 位有符号数右移 2 位 : 
1 011 0011 8 位有符号数,最高位为符号位(1 表示负数) 
>> 2 右移 2 位 
- l...l101100 壮 低 2 位被移除,高 2 位补符号位 1, 得到 1110 1100 
右移运算符的语法形式是 : 
操作数>>右移位数 
假设 一 个整型变 量 s, 用 C++语言来描述将 s 右移 2 位的语法形式是 : 
s>> 2 
表 2-4 列出了 C丹语 言 6 种位运算符的优先级和结合性。对比加减运算 ( 4 级) 、 乘除 
运算 (3 级) , 除了位反运算 , 其他位运算符的优先级都比加减乘除要低。 
表 2-4 位运算符的优先级和结合性 
位运算符 优先级 结合性 
~ , 位反 2 从右向左 
<< , 左移 
5 
>> , 右移 
&, 位与 8 从左向右 
^ , 异或 9 
| , 位或 10 
需要 注意的是,所有参与位运算的操作数只能是整型 ( char 、 sho兀 int 和 long ) ,包 
括有符号和无符号格式。如果对其他类型(例如 double ) 的操作数进行位运算,编译时会 
提示语法错误 。 
 
 
 第 2 章数值计算 
本节最后再给出 一个利用状态位存储数据的例子 。 假设编写 一个闹钟程序,设定工作 
日(周 一~周五 )启动闹钟。如何保存哪天启用闹钟的信息呢?可以定义一个如下的变噩 
Ala1mDay: 
1msigned chai· AlaimDay; II 定义一个无符号字符型变篮 AlamDay 
变噩 AlarmDay 占一个字节 ( 8 位) , 可以用低 7 位分别表示一周 中哪几天启用闹钟。 l 
表示启用 , 0 表示不启用。最高位未用到,置 0 。例如, 
Ala11llDay = OxlF; II 即二进制的 0001 1111, 表示周一~周五启用闹钟 
进一步,可以再定义一 组掩码常 噩来提高程序的可读性。 
#defme MONDAY OxOl II 即二进制的 0000 0001 。最低位为 1, 周一启用闹 钟 的掩码 
#defme TUESDAY Ox02 II 即二进制的 0000 0010, 周 二启用闹 钟 的掩码 
#defme WEDNESDAY Ox04 II 即二进制的 0000 0100, 周 三启用闹 钟 的掩码 
#defme THURSDAY Ox08 II 即二进制的 0000 1000, 周四启用闹 钟 的掩码 
#defme FRIDAY OxlO II 即二进制的 0001 0000, 周五启用闹 钟 的掩码 
#defme SATURDAY Ox20 II 即二进制的 0010 0000, 周六启用闹 钟 的掩码 
#defme SUNDAY Ox40 II 即二进制的 0100 0000, 周日启用闹 钟 的掩码 
则 闹钟程序可以用“位或“运算来设置周 一~周五启用闹钟。 
AlaimDay = MONDAY ITUESDAY I WEDNESDAY ITHURSDAY I FRIDAY; //易于阅读理解 
本节习题 
1 位反运算表达式 : ~ 1001 , 该表达式的结果是( ) 。 
A. -1001 
C . 0000 
2 位与运算表达式 : 
A. 1001 
C . 0000 
3 位或运算表达式 : 
A. 1001 
C . 0000 
4 异或运算表达式 : 
B. 0110 
D . 1111 
1001 & 0110 , 该表达式的结果是( 
B. 0110 
D . 1111 
1001 I 0110, 该表达式的结果是( 
B. 0110 
D . 1111 
1001 /\ 0110, 该表达式的结果是( 
A. 1001 B. OllO 
C . 0000 D . llll 
)。 
)。 
)。 
5 执行 C++语句“unsigned char x = 5; x = x & Oxff,”后变噩 x 的值(二进制)为( )。 
A. 00000101 B. l lllllll 
C . 00000000 D . lllllOIO 
$ 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
赋值运算 
1 . 赋值运算符 
赋值 (assignment ) 运算符” = “ 用于修改变噩的数值,即将新数值写入变量对应的内 
存单元,存储在该内存单元中的原数值将被擦除。例如 : 
int x = 0, y = 0; x = 5; y = x+ 3; 
赋值运算符的作用是将“ = “右边表达式的结果赋值给左边的变盔。常盔或变盔可 以 
理解成—个最简单的表达式 。上例 中变噩 X, y 的初始值为 0 。赋值后 , x 的值变成 5, y 
的值变成 8 。在语法上赋值运算符 ” = ”的左边必须是变蜇。 
赋值运算本身也构成一个赋值表达式 。 该表达式结果的数据类型与左边变噩的类型相 
同,数值等千左边变噩赋值 以后的数值 。上例中, “X = 5" 构成一个赋值表达式,其结果 
的类型为 int 型(即 x 的数据类型),数值为 5 (即 x 赋值 以后的数值) 。 赋值表达式可以继 
续参与运算 ,例如,”(X = 5) * 2" 的结果等千 10 。 
赋值运算符的优先级很低 (1 4 级 , 加减运算符为 4 级),结合性为从右到左。例如, 
混合运算 “y = x = 2 + 6" 与 “y = (x = (2+6))" 等价。因为加法优先级高,先算 2+6 得到 
8; 两个赋值运算符按从右到左的次序先算 x = 8 (结果为 8) ; 最后再算 y = 8 (结果也为 8 ) 。 
计算机执行语句 “y = X = 2 + 6;" 后,变蜇 x 和 y 都被赋值为 8 。 
C++语言中,加、减、乘、除这样的普通运算符在运算时不会改变操作数的值 。 而赋 
值运算符 ” = ”和自增自减运算符"++" " -- ” 一样,属于泛化的运算符,由它们构成的 
表达式在产生运算结果的同时还会改变操作数的值。合理运用泛化运算符可以让语句更加 
简洁,例如 : 
语句 : a = 10; b = 10; c = 10; 
语句 : y = x; x = x + l ; 
语句 : x = x + l; y = x; 
语句 : y = x; x = x - 1; 
语句 : x = x - l ; y = x; 
2. 复 合赋值运算符 
可写成 : a = b = c = 10; 
可写成 : y = x++; 
可写成 : y =++x; 
可写成 : y = x- - ; 
可写成 : y =- - x; 
赋值运算符 ” = ” 还可以与部分算术运算符和位运算符组成复合赋值运算符(表 2- 5 , 
共 10 种)。 
表 2-5 复合赋值运算符 
+= * = /= %= & = I= ^= <<= I >>= 
 
 
 第 2 章数值计算 
复合赋值运算符的定义是 : “x ?= exp" 等价千 ”x = x ? (exp) ", 其 中”?” 表示某个 
运算符, x 是—个变量, exp 是一个表达式。 ”x ?= exp" 实 际上是 “x = x ? (exp ) " 的简写 
形式。例如, 
x +=5 ; 等价千 X = X + 5; 
计算机执行该语句的过程是:先读出变盔 x 的值,与 5 进行加法运算,然后再将运算 
结果写回 x 对应的内存单元。另外,复合赋值运算符总是先计算右边的表达式,例如, 
y *= X + 2; 等价千 y = y * (x + 2); 
y&=x+2; 等价千 y = y & (x + 2); 
y <<=x+2; 等价千 y = y << (x + 2); 
复合赋值运算符的优先级和结合性与赋值运算符 ” = “ 完全一致 ,即优先级为 14 级, 
结合性为从右到左。 
3. 变量初始化 
定义变噩时为变盔赋一个初始值,这称为对变星的 初始化 。 C++继承了 C 语言使用赋 
值运算符对变 盔 进行初始化的方法,例如, 
int x=I O, y; 
该语句定义了两个 int 型变昼 x 和 y。 计 算机执行该语句,将为变盔分配内存空间。 x 
被初始化了,计算机在为 x 分配某个内存单元的同时向该内存单元写入初始值 10 。 y 没有 
初始化,通 常其初始值是以前程序遗留下来的,是不确定的。 
在面向对象程序设计中, 变盔(被称为对象)初始化是通过构造函数来实现的。 C++ 
语言支持面向对象程序设计,可使用面向对象的语法形式来初始化变昼。例如上述变昼 x 
的初始化可改写成如下面向对象的形式 : 
int x(l 0), y; 
这条语句同样是将变盔 x 的 初始值设定为 10 。 
4. 常变量 
初始化后数值不 能改变的变量称为 常变量 ( constant v扛iable ) 。定义时,使用关键字 
const 来指定所定义的变星是常变盔。 
C++语法:定义常变量 
const 数据类型 常变量名 = 初始值; 
语法说明: 
· 使用 const 关键字指定常变量 。 
· 定义常变量时必须初始化。 
· 常变量的值不能改变 , 例如不能被再次赋值。 
` 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
举例:对比普通变批 y 和常变益 x 的不同 
inty; //定义普通变益 y 
const int x = 5; //定义常变益 X, 初始值设定为 5 
y = x + S; cout << x; II 正确的语法 : 读取常变益 x。普通变益 y 定义后可以赋值修改 
x = lO; cin >> x; II 错误的语法 : 不能改变常变矗 x 的值 
x = 5; II 错误的语法 :常变益的 值不能再次赋值 , 即使是赋同样的值 
如果程序所处理的某个数据是常量,在程序运行过程中不需要变动,则可以定义一个 
常变量来保存该数据。常变量从本质上讲是一个变盔,从功能上看就是用变量实现了常盔 
的功能 。若对常变盔赋值 ,编译器会提示语法错误 。常变盔除了具有符号常量的提高程序 
可读性、便千修改等优点之外,常变量的应用范围更加广泛,这一点将在今后的章节中陆 
续提到。 
本节习题 
l 执行语句“int X = 5, y; y = X / 2,”后变盔 y 的数据类型和值分别为( )。 
A. int, 2.5 B . int, 2 C. double, 2 .0 D. float, 2.5 
2 执行语句“int x = 5; double y; y = x / 2,”后变盔 y 的数据类型和值分别为( )。 
A. int, 2.5 B . int, 2 C. double, 2 .0 D. double, 2.5 
3 执行语句“intx = 5 ; double y; y = x / 2.0,”后变盔 y 的数据类型和值分别为( )。 
A. int, 2.5 B . int, 2 C. double, 2 .0 D. double, 2.5 
4 执行语句“int x = 5; double y = 10.5; y -= x / 2.0,”后变盔 y 的值为( )。 
A. 2.25 B . 5.0 C. 8.0 D. 8.5 
5 执行语句“int x = 5; double y = 10.5; y /= x / 2.5,”后变昼 y 的值为( )。 
A. 2.5 B . 5.0 C. 5.25 D. 12.5 
数据的输入与输出 
程序的功能是对数据进行处理。通常,原始数据需要用户通过输入设备输入到计算机, 
处理结果则通过输出设备反馈给用 户。 以前,操作员 在控制台上操作计算机,所运行的程 
序是命令行程序(不是今天常见的图形界面程序)。控制台主要包括键盘和显示器。操作员 
通过键盘向计算机下达指令、输入数据,通过显示器查看处理结果。因此人们将键盘称为 
标准输入,将显示器称为标准输出,将命令行界面程序称为控制台 ( console ) 程序。这些 
称呼一直沿用至今。 
C++语言将数据从键盘输入到某个内存变盔,或将某个内存变盔 中的 数据输出到显示 
器的过程看作是一种数据流动的过程。站在内存变盔的角度,键盘是一种提供输入数据的 
数据源,显示器则是一种输出数据时的目的地。 C++语言将提供输入数据的数据源称作输 
入数据流 ( input data str·eam) ,将输出数据时的目的地称作输 出数据流 ( output data stream ) 。 
输入数据流和输出数据流统称为输入/输出流 (I/0 stream ) 。通常,也常将输入/输出简称为 
I/0 。 
 
 
 第 2 章数值计算 
键盘就是 一种输入数据流, C++语言用 cin 表示键盘 。 显示器则是 一种输出数据流, 
用 cout 表示。输入/输出流不属于 C丹语言的主体 , 是其 附属组成部分 。使用 cin 和 cout 
需 要导入一 些 外部程序, 导入方法是在程序头部增加如下 2 条语句 : 
#include <iosti·eam> 
using namespace std; 
关千外部程序及其导入方法,将在后续章节进行深入讲解。 
C ++语法:标准输入语句 
ci n > >变量 1 >>变量 2 >> . . 令.. .>>变量 n; 
语法说明: 
■ cin 表示键盘,借用右移运算符”>>”表示数据从键盘流向后面的变量。 
• 一条输入语句可以输入多 个变量的数据,输入时 用空格或 Tab 键隔开,以回 车键结束。 
· 键盘所输入数据的类型应与变量的类型匹配。 
· 执行该语句时,计算机将暂停程序的执行,等待用户从键盘输入指定个数和类型的数据,然 
后将这些数据按位置次序赋值给对应的变量。 
举例: int x; double y; 
cin >> x; //从键盘输入整型变量 x 的 值 
cin >> x >>y; II 从键盘输入整型变量 x 和浮 点型变益 y 的值 
II 用户应按次序输入 2 个数据 (中间用空格隔开) , 第 1 个应当是整数 , 第 2 个应当是实数 
C ++语法:标准输出语句 
cout<<表达式 1 <<表达式 2 << . . 令.. .<<表达式 n ; 
语法说明: 
■ cout 表示显示器,借用左移运算符”<<”表示数据从内存(表达式结果是存放在内存里的) 
流向显示器。 
· 单个常益或变量可认为是最简单的表达式。 
· 表达式 ”endl " 表示换行显示。 
· 一条输出语句可以同时输出多 个表达式结果 。 
· 执行该语句时,计算机首先按从右到左的顺序逐个计算表达式的结果,然后再按从左到右的 
顺序依次显示各表达式的结果,各显示结果之间没有间隔。 
举例: intx = 5; 
cout << x; II 显示变量 x 的 值 , 显示结果 : 5 
cout << 5; II 显示一个常量的值 , 显示结果 : 5 
cout << x << x *x; II 显示变量 x 及其平方的值(中间没有间隔),显示结果 : 525 
例 2-2 给出 一个 C++程序例子,其功能是将 以克为单位的重噩换算成克拉和盎司 。在 
C++集成开发环境中对该程序进行编译、连接,生成可执行程序 。 运行这个可执行程序, 
输入 5, 显示器将显示 5 克换算成克拉和盎司的结果(如图 2- 1 所示)。 
$ 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
例 2-2 输入/输出举例:克、克拉与盎司 
l | /I C廿程序实例:将以克为单位的重矗换算成克拉和盎 司 
2 I #include <iostream> 
3 I using namespace std; 
4!I ~tmain() 
6I{ 
7 double x·, 
8 cin >> x·, 
9 
10 COUt << X * 5·, 
11 cout << x / 31.1034807; 
12 re血11 o·, 
13 } 
II 定义一个变量 x 来存放以克为单位的重益 II 从键盘输入需要换算的克数 
/I 1 克 = 5 克拉 /I l 盎 司 = 31.103 480 7 克 
I ·c:\Users\Thinkpad\Desktop\ test\ Debug\ test.exe" =I 巨l 
I:50160?54 1 
图 2-1 例 2-2 的运行结果 
例 2-2 存在以下两个问题 : 
(1) 输入数据前屏 幕没有任何提示信息,程序界面不友好 。 
( 2 ) 两个换算结果克拉和盎司连在—起,中间没有分隔符,很难阅读。 
为此我们需要在程序中增加一些提示信息,优化程序的操作界面。 C++语言使用 字符 
串 (详见 4.4 节)来表示这样的提示信息。以双引号括起来的文字序列称为字符串常昼, 
例如 : “China”、"中 国”等。例 2-3 通过增加一些提示信息来优化程序的操作界面,显示 
结果见图 2-2 。 
例 2-3 界面优化举例:克、克拉与盎司 
l I /I C廿程序实例:将以克为单位的重矗换算成克拉和盎 司 
2 I #include <iostream> 
3 I using namespace std; 
4!I ~tmain() 
6I{ 
-} 
789101112131415 
double x ; //定义一个变矗 x 来存放以克为单位的重量 cout <<“请输入需要换算的重蜇(以克为单位) : ", II 提示用户正确地输入数据 cin >> x; II 从键盘输入需要换算的克数 
cout <<"换算结果 : = "<< x*S<<“克拉 , ”, // I 克 = 5 克拉,增加提示信息和分隔符号 
cout << 11 = 11 << x / 31.1034807 <<"盎司 ”<< endl; // I 盎 司 = 31.1034807 克 
// endl 表示在显示结 束后换 一行 
re血11 O; 
 
 
 第 2 章数值计算 $ 
■ ·c:\Use飞\Thinkpad\Desktop\test\Debug\test.exe" 匡 
清甸盂萝苟陌重量 
彰荨芜早: = 25 克拉. 野牺摺, 5 
图 2-2 例 2-3 的运行结果 
本节习题 
l 接收用户从键盘输入的数据并存放到变噩 m 中,下列哪条语句是正确的? ( ) 
A. cin >> m; B . cin << m; C. Cin << m; D. cin >> M; 
2 执行语句 “double x; cin >> x; ",下列哪种键盘输入是错误的? ( ) 
A. 5 B . 5.0 C. x=5.0 D. 0.5el 
3 执行语句 “int x; double y; cin >> x >> y; ",下列哪种键盘输入是正确的? ( ) 
A. 5, 10.5 B . 5 10.5 C. 5.0, 10.5 D. 5.0 10.5 
4 执行语句 “ int x = 5, y = 10; cout << x << y,“,则显示器将显示( ) 。 
A. 5 10 B . 5, 10 C. 10, 5 D. 510 
5 执行语句 “int x = 5, y = 10; cout << x << ", " << y; ",则显示器将显示( ) 。 
A. 5 10 B . 5, 10 C. 10, 5 D. 510 
6 执行语句 “int x = 5; cout << x << ", "<< x++,“,则显示器将显示( )。 
A. 5, 5 B . 5, 6 C. 6, 5 D. 6, 6 
引用与指针 
计算机程序利用内存来存放数据 。 数据要存放在内存中才能被 CPU 读取和处理,处 
理后的结果也只能保存回内存中。程序员通过 C++语言的定义变噩语句来申请所 需 的内 
存 空 间 。 例如, 一个程序可能 需 要定义若 干个变 噩 来分别保存原始数据 、中 间结果和最 
终结果 。 
程序员定义变噩 时须指定变噩 名,然后通过变噩 名访间其对应的内存单元(例如写入 
数据或读出数据)。简单地说,程序 中的变量= 内存单元 。变噩 名是访问变噩 内存单元的第 
一种方法 。 本节将再介绍另外两种方法,它们分别是引用和指针。 
2.7.1 引用 
C++语言允许为己定义的变昼 再起一个别名,称为变盔 的引用名。引用名看起来像是 
一个变噩 名,但它是 一种特殊变噩 ,称为引用变盔 ,或简称为引用 ( reference ) 。引用变盔 
与其所引用的变盔共用同 一个内存单元,定义引用变量 时不再单独分配内存空 间 。 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
C+ +语法:定义引用变量 
引用类型&引用变量名=被引用变量名 , 
语法说明 : 
·引用类 型是引用变量的数据类型,必须 与 被引用变量的类型 一致。 
• &是引用变量说明符。定义变量时,变量名前加“&”表示该 变量为引用变量 。 
·引用变 量名 需 符合标识符的命名规则 。 
·被引用变 量名指定 一个已经定义的变量,即被引 用的 变量 。 
· 定义引用变量时必须初始化 , 即指定其是哪个变量的引用。引用变量只能引用一个变量 , 定 
义后 不能再引用其他变量 。 
举例:定义一个 int 型变量 x 及其引用变益 xa 
int x ; int &xa = x; // xa 是 x 的 一个引 用 ,即别名 
或 
int x, &xa = x ; II 可在 一 条定义语句中 完成 
int x; int y, &xa = x; II 一条定 义变量语句可既包括普通变量,又包括 引 用 变量 
假设有如下定义变噩语句 : 
int x=IO, y=20; int &xa = x; 
计算机执行上述语句后,所分配的内存空 间如图 2-3 所示 。 
变量 名 x 10 引用名(别名)xa (4 个 字节 ) 
变 景名 y 20 
(4个字节 ) 
图 2-3 变批 x 及其引用变篮 xa 
在 定义变量 x 的引 用之后,引用名 xa 和原变盔名 x 所表示的是同 —个 内存单元,访问 
效果是— 样的 。 
下面例 2-4 中,代码第 14 行使用引用名 xa 替换原变 盔 名 x(被注释掉的第 10 行代码), 
计算结果是 一样的 。 
例 2-4 引用变量举例 
l II C++程序实例 :从键盘输入一个数值 ,计算其平方的值 
2 #include <iost:I·eam> 
3 using namespace std; 
 
 
 第 2 章数值计算 $ 
4 
s I int main() 
6I{ 
、 ,j 
7891011121314151617 
血 x; 
cin >> x; 
/* 
cout << x * x << endl; 
*/ 
血&xa = x; 
cout << xa * xa << endl; 
II 定义一个变益 x 
II 从键盘输入 x 的值 
II 计算并显示 x 的平 方值 
II 定义一个变益 x 的引用变量 xa 
II 改用访问变益 xa 来计算并显 示 x 的平 方值 
II 访问引用变益 xa 所读出的数据就是变蜇 x 的值 
re血110; 
2.7.2 指针 
计算机对内存进行读写操作的最小单位是字节。为每个字节指定 一 个整数编号(通 
常从 0 开始,连续编号),称为该字节的内存地址。程序执行时,计算机将系统中的空闲 
内存分配给程序中定义的变 噩。 C++语言提供一个取地址运算符"&” 来获取变噩的内存 
地址。 
C++语法:取地址运算符& 
&变量名 
语法说明: 
· 所取出的变量地址是程序执行时该变益所分配内存单元的地址。每次执行程序时 , 变益不一 
定会被分配在同一内存单元 , 这取决千本次执行时计算机中哪些内存单元是空闲的。 
• -个变益可能占用多个字节。变蜇地址指的是变益所占内存单元第一个字节的地址 , 也称首 
地址。 
· 取地址运算符是单目运算符 , 操作数必须是变量 , 其优先级为 2 级,结合性为从右向左。 
· 在 C丑语言中,"&”是一符多义的符号-W.运算中的位与运算符、定义变矗语句中的引用 
变量说明符、取地址运算符。不同场合具有不同的含义,程序员 应根据上下文来区分。 
举例:已定义变矗 X: intx = 10; 
cont << x; //显示变蜇 x 内存单元中保存的数值: 10 
cont << &x; II 显示变蜇 x 的内存地址 
例如,程序定义了 一 个变 噩 x"intx= IO; ",程序执行时将为 x 分配 4 个字节 。这 
4 个字节是连续的,假设其地址为 1000~1 003, 则 变噩 x 的地址 就是其首地址 1000, 参 
见图 2-4 。 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版 ) 
int x= IO: 1000 ~ 1003 
10 
(4 个 字 节) 
图 2-4 变批的内存地址 
执行输出语句 : 
cout << x; 
将显示变噩 x 内存单元中保存的数值 : 10 
而执行输出语句 : 
cout << &x ; 
将显示变盔 x 的内存地址: 000003E8 ( 十六进制的 1000 ) 。 
内存地址是 一 类特殊类型的数据, C++语 言 将地址类型称为指针类型,或简称为 指针 
( pointer) 。在 32 位计算机系统中,指针类型的存储位数为 32 位 (4 字节),并以无符号 
整数形式存储 。 C++语 言 可以通过内存地址来访间内存单元 。 
给定某个内存地址,该如何访问内存单元呢?内存单元中存放的可能是 一个 int 型数 
据 ,也可能是 一个 double 型数据 。 不同数据类型所占用的字节数不同,存储格式也不同 。 
通过地址访问内存单元时, 需 要知道该地址对应了什么样的数据类型,这个数据类型被称 
为地址的 指向类型 。 例如,通过一个指向类型为 int 型的地址去读取某个内存单元时,计 
算机将按照 int 型的规定读取 4 个字节,并按补码格式来解释所读出的二进制数据 ; 而通 
过一个指向类型为 double 型的地址去读取某个内存单元时,计算机将按照 double 型的规定 
读取 8 个 字节,并按浮 点格式来解释所读出的 二进制数据 。 
通过地址访问某个变盔 x 的步骤一般分为 3 步 : 首先定义一 个专 门保存地址的变盔 (假 
设为 p ) ,该变噩称为指针变盔 ;取出变噩 x 的地址,将其赋值给 p; 通过指针变盔 p 来访 
问变盔 x 的内存单元。 
1. 指针变量 
首先我们通过一个例子来观察什么是指针变盔。 先定义变蜇 x 和 y: 
sho1t x=lO, y=20; 
变蜇 x 占用 2 个字节 (sh01t 型,假设地址分别为 1000 和 1001) ;变盔 y 也占用 2 个字 
节(假设地址分别为 1002 和 1003 ) 。 再定义一个指针变噩 p, p 占用 4 个字节(假设地址 
为 2000~2003 ) 。 p 是专 门保存其他变噩 地址的指针变噩。 如果指针变 噩 p 中 保存的是变蜇 
x 的地址 1000 , 则称指针变蜇 p 指向 变蜇 x (如图 2-5 所示)。 p 是变 盔 ,可保存不同变盔 
 
 
 第 2 章数值计算 
的地址 。如将 p 中保存的地址修改为变噩 y 的地址 ( 1002) ,则我们称指针变量 p 改变了指 
向,指向了 y。只要指针变噩保存某个变盔的地址,我们就形象地说指针变噩指 向了该变 
蛋 ,这也是地址类型被称作指针类型的原因。 
sho1i x= IO : 1000 
1001 
sho1i y=20 : I002 
1003 
指针变景 p : 2000 
~2003 
10 
(2 个字节) 
20 
(2 个 字节) 
. . . 参.. 
l000 
(4 个 字节 ) 
图 2-5 指针变篮示意图 
, 
I-  
—个指针变噩虽然能指向不同的变噩 ,但只能指向同 一数据类型的不同变噩 ,这个数 
据类型就是指针变噩的指向类型。例如,一个指向类型为 int 型的指针变噩(简称为 int 型 
指针变噩),该指针变盔只能指向 int 型变蛋,即只能保存 int 型变噩 的地址。相应地, 一 
个指向类型为 double 型的指针变量(简称为 double 型指针变盔),该指针变噩只能指向 
double 型变噩。 
C+ +语法 : 定 义指针变 量 
指向类型*指针变 量 名, 
语法说明 : 
· 指向类 型指定了指针变量能够保存哪种类型变量的地址,或者说指定了指针变量能够指向哪 
种类型的变量。 
. * 是指针变量说明符。定义变量时,变益名前加“ * ”表示该变量为指针变益。 
· 指针变 量名 需符合标识符的命名规则。 
举例:假设已定义变量 x 和 y : int X, y; 
int*p; // " int* " 表示 血型指针 
II 定义一个 mt 型指针变量 p, 未初始化 (即未指向任何变量) 
p = &x; II 取出变量 x 的地址 并赋值给指针变益 p , 此时 p 指向了变矗 x 
或 
int *p = &x; II 定义一个 mt 型指针变量 p, 初始化为指向变益 x 
p = &y; II 取出变量 y 的地址 并赋值给指针变益 p , 则 p 修改了指向 , 现指向变量 y 
屯 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版 ) 
2. 变量的间接访问 
定义一 个变噩 x 之后,通过变盔 名 x 来访间该变昼 内存单元被称为直接访问;为变噩 
x 定义一个引用变噩 xa, 通过引用名 xa 来访问变昼 x 内 存单元是 一种间接访问的形式,被 
称为变昼 的间接访问;定义一个指针变昼 p 保存变盔 x 的地址,再通过指针变昼 p 中 所保 
存的地址来访间变盔 x 的内存单元,这是另 一种形式的间接访间。为了实现通过内存地址 
间接访问变盔 , C++语 言 提供了 一 个指针运算符(或称为取内容运算符)“*“。 
C ++语法:指针运算符* 
*指针变量名 
语法说明: 
· 按照指针变量所保存的地址间接访问所指向的内存单元,可写入或读出数据。访问时将按照 
指针变益指向类型所规定的字节数和存储格式去读/写内存单元。 
· 间接访问之前,指针变量应当指向某个已经存在的变蜇,即指针变量必须先赋值 , 再间接访 
问,否则将出现错误。 
· 指针运算符是单目运算符,其优先级为 2 级,结合性为从右向左。 
■ C++语言中,”*”是一符多义的符号一算术运算中的乘法运算符、定义变益语句中的指针变 
量说明符、指针运算符。不同场合具有不同的含义 , 程序 员 应根据上 下文来区分。 
举例:假设已定义变量 X: int x; 
或 
x = lO; II 通过变量名直接访问,将变矗 x 内存单元中的数值修改为 10 
cont << x; 
int *p = &x; 
*p = 10; 
cont << *p; 
cont << p; 
II 通过变量名直接访问,显示变量 x 内存单元中保存的数值 : 10 
II 定义一个与变益 x 数据类型 一致的指针变墓 p, 初始化为指向变益 x 
II 通过指针变量间接访问 X, 将变量 x 内存单元中的数值修改为 10 
II 通过指针变量间接访问 X, 显示变矗 x 内存单元中 保存的数值 : 10 
II 直接访问指针变益自身,显示 p 中 所保存的地址(即变量 x 的地址) 
例 2-5 中的代码第 14 行通过间接访间形式 ” *p” 来替换原来的变昼名 x 直接访问(被 
注释掉的第 10 行代码),计算结果是 一样的。 
例 2-5 指针变量举例 
1 II C++程序实例:从键 盘输入一 个数值 ,计 算其平方值 
2 #include <ios订earn> 
3 using namespace std; 
4 
5 int main() 6{ 
7 int x·, II 定义一个变量 x 
8 cin >> x; II 从键盘输入 x 的 值 
9 /* 
10 cout << x * x << endl; II 计算并显示 x 的平方值 
11 */ 
 
 
 12 
13 14 
15 
int *p = &x; 
cout << (*p) * (*p) << endl; 
第 2 章数值计算 
II 定 义一个指针变矗 p, 初始化为指向变戛 x II 改用 间接访问*p 来计算并显示 x 的平方值 II 间接访问*p 所读出的数据就是变益 x 的值 
$ | } rettun O; 
取地址运算符"&“和指针运算符”*”的优先级都为 2 级,结合性为从右向左 。 例如, 
表达式 : 
*p * *p 
与表达式 : 
(*p) * (*p) 
等价。在上述表达式 中, C++语言会根据上下文自动将指针变噩之前的 “*” 当做指 针运绎 
符, 而将中间的那个“*“ 当做乘法运算符 。指针运绎符优先级 高 ( 2 级 ) ,乘法运算 符低 
(3 级),因此先计绎指针运算符*p, 然后再计算乘法 。 
3. 使用指针变量应当注意的问题 
(1) 指针变量应当先赋值,再间接访 问 。 例如,执行以下代码将出现错误 : 
int *p; 
cout << *p; // 错误:未初始化的指针变益 p 中可能保存了一个随机的地址值 II 间接访问该地址所对应的 内存单 元将出现 不 可 预料的错 误 
一个多任务操作系统(例如 Windows ) 可以同时运行多个程序。每个程序只能访间自 
己所分配的内存单元。随意访间其他程序的内存单元 ,或访问—个不存在的内存单元 , 这 
都属千严重错 误, 是被严格禁止的 。正确 的做法是 : 先对指针变噩赋值,指向一个本程序 
已定义的变噩(该变噩已被分配内存 空间 ),然后才可以间接访问该变噩。 
( 2) 指针变量不能用整数来赋值 。 例如 : 
int *p = 10; II 错误:指针变氢不能用整数来赋值 
可以将指针变噩赋值为 0 。 0 表示 空地址, 即不指向任何变噩,例如 : 
int *p = O; II 正确:赋值为 o, 表示 p 不指向任何变篮 
(3) 指针变量的指向类型应当与所指向变量的类型—致 。 例如,编译以下代码将出现 
错误 : 
double x = 10.5; int *p; 
p = &x; // 将 int 型指针变益 p 指向 double 型变氢 X, 编译时将提示错误 
正确的做法是将指针变噩 p 定义语句 中的 指向类型 int 改为 double, 与变噩 x 的数据 
类型 一致。 
` 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
C++语 言 还提供了 一种特殊的指向类型,称为 void 类型 。 该类型的含义 是 ,所指向变 
盔 的数据类型 是 未知的 。 void 型指针变噩 可以指向任意类型的变昼。 如果使用 void 型指针 
变盔 间接访问变 盔 ,则访问时 需 将其指向类型强制转换成所指向变噩 的类型 。 例如 : 
int x = 10; double y = 10.5; 
void *p; // 定义一个 void 型指针变益 p, p 可指向任意类型的变益 
p = &x; // 将 void 型指针变批 p 指 向 int 型变篮 x 
cout << *((int *)p ); // 通过 void 型指针变批 p 间接访问 int 型变批 x 时,需要将指针 
// 变蠹 p 的指向类型强制转换成 int, 即(int *)p 。显示结果为 10 
p = &y; // 修改 void 型指针变批 p 的指向,改为指向 double 型变蠹 y 
cout << *((double *)p); // 通过 void 型指针变批 p 间接访问 double 型变益 y 时, 
II 需 将指针变益 p 强制转换成 double 型,即 (double *)p 。显示结果为 10.5 
( 4 ) 相同类型指针变量之间可以相互赋值 。 可以将 一 个指针变 蜇 的地址值 赋给另 一 
个相同类型的指针变噩。 可以将任意类型指针变噩 的地址值赋值给 一 个 void 型指针变 盔。 
例如 : 
int x = 10, *pi = &x; II 定义一个 int 型指针变显 pi , 初始化指向变 益 x 
double y = 10.5, *pd = &y; II 定义一个 double 型指针变批 pd, 初始化指向变益 y 
int *pl; 
void *p2; 
pl = pi; 
pl = pd; 
p2 = pi; 
p2 = pd; 
II 定义一个 int 型指针变益 pl (未初始化),可指向任意皿型变篮 
II 定义一个 void 型指针变蠹 p2 (未初始化),可指向任意类型的变批 
II 正确:将 pi 赋值给 pl 。两者都为 int 型,赋值后都指向血型变显 x 
II 错误:不能将 double 型的 pd 赋值给皿型 pl, 类型不同不能互相赋值 
II 正确:可将 int 型的 pi 赋值给 void 型 p2, 赋值后都指向变批 x 
II 正确:可将 double 型的 pd 赋值给 void 型 p2, 赋值后都指向变蠹 y 
( 5 ) 可以定义指向常变量的指针,通过该指针变量不能修改所指向的变量的值 。 初始 
化后数值不能改变的变蜇称为常变噩。 定义指向常变昼 的指针变盔 时, 需在数据类型之前 
加 const 关键字 。 例如 : 
const int x = 10; 
x = 15; 
const int *p; 
p = &x; 
cout << *p; 
*p = 15; 
inty = 20; 
p = &y; 
cout << *p; 
*p = 15; 
II 定义一个 int 型常变批 X, 初始值为 10 
II 错误:常变益不能再被赋值 
II 定义一个指针变批 p, 该指针变批可指向 int 型常变谜或普通变益 
II 将 p 指 向常变益 x 
II 正确:通过指针变显 p 间接读取常变批 x 的值 II 错误:不能通过指针变蠹间接修改常变批 x 的值 
II 定义一个 int 型的普通变显 y, 初始值为 20 II 将 p 指 向普通变批 y 
II 正确:通过指针变益 p 间接读取变益 y 的值 II 错误:不能通过 p 间接修改变篮 y 的值 II 尽管 y 只 是一个普通变益,但 p 被定义为指向常变篮的指针 
( 6 ) 可以定义指针类型的常变量 ( 即指针常变量 ),需 定义时初始化,以后不能再改变 
其指向 。 定义指针类型的常变量时, 需在变盔 名之前加 const 关键字 。 例如 : 
 
 
 第 2 章数值计算 
II 定义 int 型变篮 x 和 y 
int X = 10, y = 20; 
int * const p = &x; II 定义 int 型指针变益 p, 该指针变益为常变益 , 指向变量 x II 常 变批在定义时必须初始化,初始化后不能改变指向 p=&y; II 错误 : 常变益不能再次赋值 , 因 此初始化后不能修改常变批 p 的指向 
爱思考的读者可能会间 : 既然可以通过变量名直接访问内存单元,为什么 C丑语言还 
要设计这么复杂的语法,通过引用或指针对变昼进行间接访问呢?这里我们给出一个最通 
俗的解释。程序员通过定义变昼来申请内存,再用变盔名访问所分配的内存单元。大型程 
序需要多个程序员协作升发,共同完成。如果其他程序员想访问上述变量的内存单元,例 
如读取其中的数据,可以吗?答案是肯定的,但只能通过引用或指针来访间(即间接访间), 
关于这一点将在第 5 章做详细讲解。 
本节习题 
1. 下列定义引用变盔 rx 的语句中,正确的是( ) 。 
A. intx; int1x=x; B. intx, &1x=x; C. intx, 1x=&x; D . int&1x=x,x; 
2 . 执行语句 “ intx =5 , &y=x; y =x+lO; " 后变量 x 的值为( ) 。 
A. 5 B. 10 C. 15 D . 20 
3 . 下列定义指针变盔 px 的语句中,正确的是( ) 。 
A. int x; int px = x; B. int x, *px = x; 
C. int x, *px = &x; D . int *px = &x, x; 
4. 执行语句 “ int X = 5, *y = &x; *y = X + 10;” 后变噩 x 的值为( ) 。 
A. 5 B. 10 C. 15 D . 20 
5 . 下列定义并使用指针变量 px 的语句中,正确的是 ( ) 。 
A. int x, *px; px = 10; 
C. int x, *px; *px = 10; 
6. 执行下列 C++程序 : 
int X = 5, *y = &x; cout << x * (*y); 
显示器将显示( ) 。 
B. int x, *px = &x; px = 10; 
D . int x, *px = &x; *px = 10; 
A. 5 B. 25 C. 55 D . 不确 定 
7. 下列定义并使用指向常变噩 x 的指针变噩 px 的语句中 , 正确的是 ( ) 。 
A. const int x = 10; const int *px = &x; *px = 20; 
B . const int x = 1O; const int *px; px = x; 
C. const int x = 10; const int *px = &x; (*px)++; 
D. const int x = 10; const int *px = &x; cout << *px; 
学习本章的要点 
· 读者需将程序中的数据与内存联系起来,这样就很容易理解数据类型、引用和指针 
等初学者难以掌握的概念。 
$ 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
· 读者重点要关注运算符的运算规则、优先级和结合性等语法细节 。 
· 本章会让读者初步体会到计算机语言与人类语言的不同之处,即计算机语言的语法 
规则非常严格,甚至到了机械的程度,稍有不慎就会出现语法错误。 
本章习题 
1. 阅读程序 。 阅读下列 C++程序 。 阅读后请说明程序的功能,并对每条语句进行注 
释,说明其作用。 
#include <iostr·eam> using namespace std; 
#defme PI 3.14 int main() 
{ 
float r; cin >> r; float len; 
len = PI * 2 * r; cout << "len= "<< len << endl; 
re血110 ; 
2. 程序改错。阅读下列 C曰-程序,并检 查其 中 的语法错误 。 修改错误,并保证程序 
的功能不变。 
#mclude <iosti·eam> using namespace std; intmam() 
{ 
血 x = y = 5; 
cout >> x, y >> endl; 血 z, 1-z. = &z; z = x + y; 
cout<<“余数是 "<<&rz << endl; 
血 pz = z; 
pz = X * y; 
cout<<"乘积是 "<< pz << endl; rettun O; 
II 定义两个变批 x 、 y, 初始值都为 5 II 显示 x 和 y 的值 , 并用逗号隔开 II 定义变益 z 及其引用变量 rz II 求 x 除以 y 的余数 , 并赋值给 z II 通过引用变批 rz 显示变篮 z 的值 
II 定义指向变批 z 的指针变益 pz II 求 x 乘以 y 的积 , 并通过指针变批 pz 存入变篮 z 中 II 通过指针变批 pz 显示变益 z 的值 
3. 编写程序 。请编写一个计算表达式 x{2+5[3 x2+8(x- 1)+6] }的 C++程序 。 
 
 
 3章 
算法与控制结构 
一个完成某种特定任务的过程可分解成 一 组操作步骤,这组操作步骤即构成一 个算法 。 
算法是 一个宽泛的概念,求解数学问题要用到算法,日常生活中也经常用到算法。 例如, 
制作回锅肉的菜谱就可以认为是 一个算法,如例 3- 1 所示 。 
例 3-1 算法举例 : 制作回锅肉的菜谱 
原料 1 主料: 400g 五花肉、 250g 青蒜 
配料:适益葱、姜、蒜、干红辣椒, l 勺花椒、 1 大勺郫县豆瓣酱 , 适益料酒、糖、酱油 
法 
l23456789 
, 故1 
带皮五花肉冷水下锅,加入葱段、姜片、花椒 7~8 粒、黄酒适量,煮开。 
撇净浮沫,煮至八成熟 , 取出自然冷却。 
将肉切成薄片,姜、蒜切片 , 葱切成斜段。 
将青蒜的白色部分先用刀拍一下,然后全部斜切成段备用。 
炒锅上火,加少量的油煽香辣椒、花椒及葱、姜、蒜。 
下入肉片煽炒, 至肉片颜色变得透明,边缘略微卷起。 
将肉拨到锅一边,下入郫县豆瓣酱(可以先剌细)炒出红油。 
适当加入少许酱油或甜面酱调色,与肉片一起翻炒均匀。 
下入 青蒜 , 点少许料酒、糖 , 调好味道即可出锅,见图 3 - 1 。 
图 3- 1 经典川粟 回锅肉 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
将从原料到回锅肉的制作过程分解成若 干个步骤 。每个步骤简单具体,具有可操作性, 
是任何人都可以掌握的。菜谱就是一种算法。按照这个算法进行操作,就可以制作出一道 
美味可口的回锅肉。 
程序设计课程关注的是能被计算机执行的算法。本章讨论程序设计中算法的概念、基 
本结构以及相关的 C++语句。 
算法 
程序设计中,程序员将完成某种程序功能的过程分解成一 组可被计算机执行的操作步 
骤 , 这组操作步骤称为 算法 ( algorithm ) 。例如 , 为了使用计算机将摄氏温度换算成华氏温 
度 , 程序员 需要为计算机设计 一个温度换算算法 , 如例 3-2 所示。 
例 3-2 算法举例 : 将摄氏温度换算成华氏温度 
l 定义 变量,申请保存 摄氏温度和华 氏温度数据所需的 内 存空间。 
2 从键盘输入需要换算的摄氏温度 , 将数据保存 到摄氏温度变益中。 
3 换算公式 : 华 氏温度=摄 氏温度 X l.8 + 32, 将换算结果保存到华 氏温度 变量 中 。 
4 在显示器上显示换算得到的华 氏温度。 
可以用多种方法来描述算法设计的结果。常用的 
有流程图、伪代码或自然语 言。 例 3-2 是用自然语言 
描述的温度换算算法 , 而图 3-2 是用流程图来描述该 
算法。 
按书写顺序依次执行操作步骤的算法称为 顺序结 
构 算法。例 3-2 就是一种顺序结构算法。算法有三种 
基本结构,分别是顺序结构、选择结构和循环结构。 
顺序结构是最简单的一种算法结构。算法 中, 某些操 
作步骤 需要满足特定条件才被执行 , 这种算法结构称 
为 选择结构 。还有一些算法 ,在满足特定条件下将重 
复执行某些操作步骤 , 这种算法结构称为循环结构 。 
在上述三种算法结构中,选择结构和循环结构都 
要用到 条件 。如果—个条件成立,我们称这个条件为 
真, 否则称之为 假 。 C++语言使用布尔类型来表示条 
件的真假,通过关系运算符(例如大于、小于、等于) 
二 
定义2个保存溫皮 的 变量 
输入摄氏温度 
华氏溫度=摄氏溫度 x l. 8+32 
显示华 氏 温度 
结束 
图 3-2 温度换算算法流程图 
构成的关系表达式来描述 一 个条件 , 通过逻辑运算符(与、或、非)构成的逻辑表达式来 
描述 一个复合条件 。 
使用 C++语言将设计好的算法编写成一组语句序列,这就是 C曰-源程序。为了描述选 
择结构和循环结构的算法 , C++语言分别提供了选择语句和循环语句。 
 
 
 第 3 章算法与控制结构 $ 
本节习题 
l 将数据处理的过程分解成一组操作步骤,这种操作步骤被称为( )。 
A 数据 B 算法 C 程序 D 流程图 
2 一个计算机程序主要由数据和( )两部分内容组成。 
A 输入 B 输出 C 公式 D 算法 
3 描述算法有几种常用的方法,下列哪种方法不属于常用方法? ( ) 
A 流程图 B 中文 C 图纸 D 伪代码 
4 下列哪种结构不属千算法的 三种基本结构? ( ) 
A 顺序结构 B 并列结构 C 选择结构 D 循环结构 
5 下列哪种算法结构不需要条件? ( ) 
A 顺序结构 B 选择结构 
C . 循环结构 D 任何算法结构都不 需要 
布尔类型 
选择结构和循环结构都 需要用到条件。如果 一个条件成立,我们称这个条件为真,否 
则 称之为假 。 C++语言使用 布尔类型 ( bool ) 来表示条件的真假 。 布尔类型的取值只有两 
个,即 trne 和 false , 其中 皿e 表示真, false 表示假。 bool 、 trne 和 false 都是 C++语言的关 
键字。 
可定义 bool 型变噩来保存 bool 型数据。一个 bool 型变昼占用 l 个字节。由千计算机 
只能存储数值数据,因此计算机内部存储 bool 型数据时以 1 来表示 trne , 0 表示 false 。例 
3-3 演示了 bool 类型的应用,以及 bool 类型与其他数值类型之间的转换 。 
例 3-3 bool 类型 应用举例 
l | #include <IOS订eam> 
2 I using namespace std; 
3 
4 I llltmain( ) 
sI{ 
、 ,j 
6789 
101112 
13 141516 
17 
bool x = tlue; //定义一个 bool 型变量 X , 并初始化为 tl11e 。 tl11e 和 false 是 bool 型常量 cout << x << endl; //显示 变量 x 的值 , trne 被显示为 1 
皿 y; II 再定义一个 int 型变量 y y = x; II 将 bool 型 变量 x 赋值给 皿 型 变矗 y, C丑将自动转换类型, tlue 被转换为 1 cout << y << endl; II 显示变量 y 的值 , 显示结果为 1 
x = 5; II 将 int 型常量 5 赋值给 bool 型变量 X , 5 被转换为 tme, 即非 0 值转为 tiue II 此时编译系统会提示警告性 ( w叩ning ) 错误 cout << x << endl; II 显示变量 x 的值 , tiue 被显示为 1 
re血110 ; 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版 ) 
bool 类型的应用说明如下 : 
■ tme 和 false 是两个 bool 型常盔 ,可直接在程序中使用,例如代码第 6 行 。 
· 计算机内部存储 bool 型数据时以 1 来表示 tr·ue, 0 表示 false, 如代码第 7 行 。 
· 将 bool 类型转为其他数值类型时, tme 转为 1, false 转为 o, 如代码第 10 行 。 
· 将其他数值类型转为 bool 类型时, 0 转为 false, 非 O 值转为 tme , 如代码第 13 行 。 
C++语 言 通过关系运算符构成的关系表达式来描述 —个条件,通过逻辑运算符构成的 
逻 辑表达式来描述— 个复合条件 。 关系表达式和逻辑表达式的结果都是 bool 类型 。 
3.2.1 关系运算符 
C++语 言 提供 6 个关系运算符,用千比较两个数之间的大小,见表 3 -1 。 
表 3- 1 关系运算符 
关系运算符 优先级 结合性 
> (大于) 
>= (大千等于) 6 
< (小于) 
<= (小千等于) 从左向右 
== (等千) 7 
!= (不等千) 
由关系运算符构成的表达式称为 关系表达式, 其运算结果是布尔类型 。 例 3-4 列举了 
一 些关系表达式的例子 。 
例 3-4 关系表达式举例 
关系表达式 
5 >3 
5 >= 3 
5 <= 3 
5= 3 
5 != 3 
2+3 <= 1+2 
布尔型结果 
1l11e 
1l11e 
false 
false 
1l11e 
false 
备注 
比 较两个算术表达式时 , 先计算 
表达式 , 再 比 较其结果。算术运 
算符优先级高于关系运算符 
选择结构或循环结构中的条件通常用千判断程序中变 盔 当前数值的大小 。 假设 已 定义 
变盔 X: 
intx = 10; 
则 例 3-5 中 的关系表达式都可以构成一 个条件 。 
 
 
 第 3 章算法与控制结构 $ 
例 3-5 由关系表达式所描述的条件举例 ( 假设: int X = 10;) 
条件 布尔型结果 
x>S 
x<S x-5 = 5 
x-5 < 0 
杠ue 
false 
杠ue 
false 
条件是否成立 
条件成立 条件不成立 条件成立 条件不成立 
3.2.2 逻辑运 算符 
C++语言提供 3 个逻辑运算符,用千将多 个 条件组合成一个复合条件,见表 3-2 。 
表 3-2 逻辑运算符 
逻辑运算符 
&& (逻辑与) 
优先级 
11 
II (逻辑或 ) 
(逻辑非) 
12 
2 
运算规则 
双目运算符。若两个操作数都为 tJ.ue, 则结果为 true; 否则 
为 false 。相 当 千" 井且 "的意思 
双目运算符。若两个操作数中有一个为 tJ.ue, 则结果为血e; 
否则为 false 。相当千 ”或" 的意思 
单目运算符。若操作数为 tJ.ue, 则结果为 false; 若操作数为 
false, 则结果为 tJ.ue 。相当千 “求反”的意思 
由逻辑运算符构成的表达式称为逻辑表达式, 其运算结果是布尔类型。假设已定义变 
盔 x 和 y: 
intx = l0,y = 20; 
则例 3-6 中 的逻辑表达式都可以构成一个复合条件。 
例 3-6 由逻辑表达式所描述的复合条件举例 ( 假设: int x=10, y=20; ) 
条件是否成立 
条件成立 
条件不成立 
条件成立 
条件不成立 
复合条件 布尔型结果 
x > S&&y > lO 1l11e 
x < 5 II y< 10 false 
x-5 = 5 lly = O 1l11e 
!(x > 5) false 
参与逻辑运算的操作数要求是 布 尔类型,否则将自动转换成布尔类型。其他类型数据 
转为布 尔类型的规则是 : 0 转为 false, 非 O 值转为 trne 。例如 ,表达式 ” 0 && trne" 的 结 
果为 false, 因为 0 被自动转换为 false 。而表达式 ”5 && trne " 的结果为 tn1e , 因为 5 被自 
动转换为 trne 。 
本节习题 
1. bool 类型的存储位数与下列哪种数据类型相同? ( ) 
A. char B. sh01i C. long D. float 
 
 
 ~ c++语言程序设计( MOOC 版) ( 第 2 版 ) 
2 若有 C++语言表达式 5 > 9 , 则该表达式结果的数据类型和值分别是( )。 
A. int, 5 B. int, 9 C. bool, tme D. bool, false 
3 若有 C++语言表达式 5 <= 5, 则 该表达式结果的数据类型和值分别是( )。 
A. int, 0 B. int, true 
C. bool, tr·ue D. bool, false 
4 比较变噩 x 的值是否等千 5 , 下列哪个表达式是正确的? ( ) 
A. x = 5 B. x = 5 C. x <> 5 D. x ~ 5 
5 若有 C++语言表达式 1 >= 0 && 0 <= 1, 则该表达式的结果是( )。 
A. 0 B. 1 C. tme D. false 
6 下列哪个表达式的结果为 tme? ( ) 
A. !(5 > 1) B. 5 > 1 && false 
C. 5 > 1 11 false D. 5 < 1 11 false 
7 若有 C++语言表达式 5 && tme, 则 该表达式结果的数据类型和值分别是( )。 
A. int, 5 
C. bool, tr·ue 
选择语句 
B. int, true 
D. bool, false 
在有些算法中 , 某些操作步骤需要满足特定条件才被执行。 例 如 ,给 定 x 的值,求其 
倒数。当 x=O 时 ,倒数 1 /x 没有 意义。因此在设计 求倒数 算法时 , 应当判断条件 ”x 不 
等于 0" 是否成立。如果成立则求 x 的倒数,否则应提示错误信息。具体的求倒数算法 
见例 3 -7 。 
例 3-7 算法举例:给定 x 的值,求其倒数 
1 定义变量 X, 申请保存数值的内存空间。 
2 从键盘输入变益 x 的值 。 
3 如果条件 ”x 不等千 o" 成立 ,则转到 步骤 4 计算倒数,否则转到步骤 5 提示错误信息。 
4 计算并显示表达式 1/x 的结果,转到步骤 6 。 
5 条件 ”x 不等千 o" 不成立( 即 x 等千 0 ) ,显示错误信息。 
6 算法结束。 
例 3 -7 算法中的第 3~5 步使用的是一种自然语言里常用的句型 ,即“如果... ... ,就......, 
否则......"。在算法设计中 ,这种 句型描述的是 “ 如果 条件成立,则执行算法分支 l ,否则 
执行算法分支 2 ",这种类型的算法结构被称为选择结构或分支结构。条件、算法分支 l 和 
算法分支 2 是选 择结构 中的 3 个要 素。 
C++语言提供了 2 种选择语句 ( selection statement ) 句型来描述选择结构的算法,分别 
是 让else 语句和 switch-case 语句。 
 
 
 3.3.1 if-else 语 句 
C++ 语法 : if-else 语句 
if (表达式 ) 
{ 语句 1 } 
else 
{ 语句 2 } 
语法说明 : 
第 3 章算法与控制结构 
· 表达式 指定一 个 判断条件。该表达式结果应为布尔类型 , 例如关系表达式或逻辑表达式。非 
布尔类型的表达式结果将被自动转换 , 0 转为 false, 非 O 值转为 true 。 
· 语句 l 是描述算法分 支 l 的 C++语句序列,即条件成立时执行的语句。 
· 语句 2 是描述算法分支 2 的 C丑语句序列 , 即条件不成立时执行的语句。如果条件不成立时 
不需要执行什么处理 , 则省略 else 和{语句 2 } 。 
· 语句 l 、语句 2 可能是包含多条 C丑语句的序列 , 此时必须用一对大括号{ }将它们括起来。 
如果只包含一条 C扫语句 , 则大括号可以省略。 
· 计算机执行 该语句时 , 首先计算表达式(即判断条件) , 若结果为 true (条件成立),则执行 
语句 l ;否则,执行 else 后面的语句 2 。 
使用 if-else 语句将例 3-7 的求倒数算法编写成 C丹程序,见例 3-8 。 
例 3-8 实现求倒数算法的 C++ 程序 ( if-else 语句 ) 
1 I #include <ios订earn> 
2 I using namespace std; 
3 
4 I int main() 
sI{ 
6 
7 
8 
9 
double x; 
cin >> x; 
if (x != 0) 
{ 
} 
double y; 
y = 1 / x; 
cout << y; 
II 定义一个 double 型变量 x 
II 从键盘输入变矗 x 的值 
// 判 断条件 ”x 不等于 0" 是否成立 
II 如果条件成立 , 则执行以 下 求倒数的代码 
II 再定义一个 double 型变量 y, 用千保存 x 的倒数 
II 求 x 的倒数 , 结果赋值给 y 
II 显示 y 的值 , 即 x 的倒数 
10 
11 
12 
13 
14 
15 
16 
17 
18 
else //否则执行以下代码 
19 I } 
cout << "O 的倒数没有意义”, II 显示错误信息 
II else 分支只有一条语句,可省略大括号 
re血110 ; 
炒 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
用 一 对大括号{}括起来的语句序列称为 复合语句 。例 3-8 中的第 10~14 行就是 一条复 
合语句 。 在语法上 C++语 言 将复合语句当做 一条语句 。 有了复合语句,上述 if-else 语句的 
语法定义可以省略掉大括号。 
if (表达式) { 语句 1 } 
else 
{ 语句 2 } 
可简写为 : 
if (表达式) 语句 l 
else 
语句 2 
其中,语句 l 、语句 2 可以是单条语句,也可以是由大括号括起来的复合语句 。 C++语言 
还有 一种特殊的 空语句 ,即仅由“, ” 构成的语句 。 计算机执行 空语句时不做任何处理。如 
无特别说明,本书后续语法定义中的术语“语句”都将包括复合语句和 空 语句。 
例 3-9 给出 一个判断年份是否闰年的 C++程序。平年的 2 月只有 28 天。公历闰年指的 
是当年的 2 月有 29 天 。 粗略地说是四年 一 闰,而准确判断闰年的条件是 : 年份能被 4 整 
除并且不能被 100 整除,或者年份能被 400 整除。该条件比较复杂,例 3-9 代码第 9 行通 
过取余运算和关系运算来描述 “ 整除 “ 条件,再通过逻辑运算来描述”并且 “ 和 ” 或者” 
这样的组合条件 。 
例 3-9 判断年份是否闰年的 C+ +程序 
l | #include <lOS订e皿> 
2 I using n扣nespace std; 
3 
4 I llltmain( ) 
sI{ 
、j, 
6789 
101112 
13 14 
int year; 
cin >> year; 
II 定义一个 int 型变益 year II 从键盘输入一个年份 , 保存到变益 year 中 
if ((yeai-0/ o4=0&& yea1-01⁄4100 != o) 11ye的o400 = 0 ) //指定是否闰年的判断条件 
cout << ye打 << ” 是闰年 “ << endl; //条件成立则该年份是闰年 
else 
cout <<ye打 << “ 不是闰年 “ << endl; //否则该年份不是闰年 
retllln O; 
例 3-10 给出了使用 正else 语句求解符号函数的 C++程序。符号函数的定义如下 : 
(x > 0) 
(x = 0) 
-1 (x < 0) 
 
 
 第 3 章算法与控制结构 ` 
例 3-1 0 求符号函数 sgn(x) 的 C++程序 
l | #mclude<lOS订earn> 
2 I using namespace std; 
3 
4 | mtmain( ) 
sI{ 
6 
8 
10 
11 
12 
13 
14 
15 
16 17 
18 
19 
20 I } 
例 3- 10 中 的代码第 14~ 15 行是在 正else 语句中嵌套的另 一个 if-else 语句 。 if-else 语句 
可以多层嵌套。多层嵌套时应注意 : 每个 else 自动和上面最近的没有 else 的让配对。如果 
if-else 配对错误,执行程序得到的结果通常也是错误的。为保险起见,上层 让else 语句应 
添加大括号将下层的 if-else 括起来,例如上述代码第 13 和 1 6 行的大括号 。 
编写 C++源程序时,良好的 书写格式对程序的阅读理解非常有帮助。例如例 3 -10 中 的 
代码第 14~15 行,大括号内部语句的缩进就是 一 种很好的书写格式。缩进可以体现语句的 
层次。添加注释、适当的 空 行和 空格等也都是好的书写格式。另外,代码第 10~11 行可以 
写在同 一 行 : 
float x; cin >> x; 
int sgn; if (x = 0) sgn = O; 
else 
{ 
、 ,j 
II 定义一个 float 型变量 x II 从键盘输入变量 x 的 值 
II 定义一个 int 型变量 sgn , 用千保存结果 II 首先将 x 分 为等千 0 和不等于 0 两种情况 
II X 等千 0 时, sgn = O II 在 x 不等千 0 的情况下,再进 一步区分 x>O 和 x<O 这两种情况 
if (x > 0) sgn = 1; // x 大千 0 时, sgn = 1 else sgn =-1; II x 小千 0 时, sgn =- 1 
cont << sgn << endl; renun O; 
II 显示变量 sgn 的 值 ,即符号函数的结果 
if (x = 0) s巴1 = 0; 
多条比较短的语句可以写在 一 行, 一 条长的语句也可以写成多行。程序的书写格式主 
要是为方便程序员阅读,不会影响程序语法的正确性 。 
例 3- 10 中,求解符号函数的算法实际上是 一种 多分支结构算法。描述多分支结构算法 
可以改用另 一种特殊的 if-else 句型,即 让else if 语句,如例 3-11 所示 。 
例 3-1 1 求符号函数 sgn(x) 的 C+ +程序 ( if-else if 语句 ) 
1 #include <iosti·eam> 2 using namespace std; 
3 
4 int main( ) 
5{ 
6 float x; II 定义一个 float 型变矗 x 7 cin >> x· //从键盘输入变量 x 的值 
, 
8 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版) 
9 
10 11 
12 
13 
14 
15 
16 I } 
C+ +语法: if-else if 语句 
int sgn; 
if (x = 0) sgn = O; 
else if (x > 0) sgn = I; 
else sgn = -1 ; 
cout << sgn << endl; 
retmn O; 
II 定义一个 int 型变量 sgn,用千保存结果 II 首先检查 x 等于 0 的情况 II 否则,再检查 x 大千 0 的情况 //最后剩 下 的就是 x 小千 0 的情况 
II 显示变益 sgn 的值 , 即符号函数的结果 
if (表达式 1 ) 语句 1 
else if (表达式 2 ) 语句 2 
else if (表达式 n ) 语句 n 
else 语句 n+1 
语法说明 : 
·表达式 l~n 分别是依次指定的判断条件。表达式的结果应为布尔类型 , 如关系表达式或逻辑 
表达式。非布尔类型的表达式结果将被自动转换 , 0 转为 false, 非 O 值转为 tI11e 。 
·语句 l ~n 分别对应条件成立时执行的语句,可以是单条语句 、 复合语句或空语句。 
·语句 n+l 是所有条件都不成立时执行的语句 , 可以是单条语句、复合语句。如果所有条件都 
不成立时不需要执行什么处理 , 即空语句,则省略 else 和语句 n+l 。 
·计算机执行 该语句时,首先计算表达式 l ,若为 tiue 则执行语句 l ; 否则继续计算表达式 2, ... , 
直到表达式 n ; 如果所有条件都不成立则执行 else 后面的语句 n+l 。计算机只会执行语句 l~n+l 
中的一条。 
if-else if 语句适用于描述多分支结构算法。 例 3-12 给出了另 一个应用 让else if 语句 的 
程序实例。该程序的功能是输入表示星期几的数值 ( l~7) ,显示其对应的英文单词。 
例 3-12 显示星期几英文单 词 的 C+ +程序 ( if-else if 语句 ) 
l | #include <iosn·eam> 
2 I using namespace std; 
3 
: I ~tmain() 
sI{ 
6 
789 
101112 
13 141516 
mtx,: 
cin >> x; 
II 定义一个 int 型 变量 x II 从键盘输入一个表示星期 几 的数值 ( l~7) , 保存到变量 x 中 
II 下 列 让else if 语句根据 x 的值显示对应星期 几 的英文单词 
if (x = = I) cont << "Monday" << endl; 
else if (x = = 2) cont<< "Tuesday" << endl; 
else if (x = = 3) cont<< "Wednesday" << endl; 
else if (x = = 4) cont<< "Thmsday" << endl; 
else if (x = = 5) cont<< "F1iday" << endl; 
else if (x = = 6) cont<< "Sati.u·day" << endl; 
else if (x = = 7) cont<< "S1mday_" << endl; 
 
 
 第 3 章 算法与控制结构 
17 
18 
19 I } 
else cout << "Input Enor" << endl; // 输入的数值不在 1~7 范围之内 , 提示错误 
re血110 ; 
下面再介绍 一 下 C++语言 中的 条件运算符 ”? ”。在程序设 计中,“ 如果 条件成立 ,则 
执行算 法分支 1, 否 则执行算 法 分支 2" 是 一种 常用 的 算法结 构 。 例 如 ,比较两个变蜇 a、 
b 的大小,将较 大值赋值给 C, 用 让else 语句编 写的示例代码 如下 : 
int a = 5, b = 10, c; 
if (a > b) c = a; 
else c = b; 
C++语言 提供了 一种特殊的条件运算符 , 可 以实现这样比较简 单的 if-else 结构 。 
C++语法:条件运算符 ” ? :“ 
表达式 ? 表达式 1 : 表达式 2 
语法说明 : 
· 用条件运算符将 三 个表达式连接起来 , 这样所构成的长表达式称为 条件表达式 。 其中的 表达 
式指定一个判断条件 , 该表达式结果应 为布尔类型。非布尔类型的表达式结果将被自动转换 , 
0 转为 false , 非 O 值转为 trne 。 
· 如果 表达式 的结果为 血e, 则计算 表达式 1, 将其结果作为整个条件表达式的结果;否则计算 
表达式 2 , 将其结果作为整个条件表达式的结果 。 
· 条件运算符为三 目运算符,优先级为 13 , 结 合性为从右到左。 
举例 : int a = 5, b = 10, c; 
a>b ? a : b II 这是一个条件表达式 , 其结果等千 10 , 数据类型为 int 型 
II 显 示 条件表达式的结果 
cout << (a>b ? a : b); 
c = a>b ? a : b; II 将条件表达式的结果赋值给变篮 c 
3.3.2 switch-case 语句 
多分支结构算法 中 有这样一类特殊的 算法 : 某一表达式 的 结果可分为若干种 情况 , 每 
种 情况要求执行 一 个算法分支 。 例 3-13 具体描述 了这样 一类特殊的 多分支结构 算法。 
例 3-13 —类特殊的多分支结构算 法 
1 计算某个表达式 , 判断其结果属千 下 列哪种情况 。 
2 情况 1 : 执行算法分支 1, 执行结束转到 7 。 
3 情况 2: 执行算法分支 2 , 执行结束转到 7 。 
4 ...... 
5 情况 Il: 执行算法分支 n, 执行结束转到 7 。 
6 否 则属千其他情况 : 执行算法分支 n+l, 执行结束转到 7 。 
7 算法结束 。 
$ 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
C++语言提供的 switch-case 语句可描述这类特殊的多分支结构 算法。 
C++语法: switch-case 语句 
switch (表达式) 
{ 
case 常量表达式 1: 语句 1 
case 常量表达式 2: 语句 2 
case 常量表达式 n: 语句 n 
default: 语句 n+1 
语法说明: 
· 计算机执行该语句时,首先计算 switch 后 面的 表达式,然后将结果依次与 各 case 后的常矗表 
达式的结果进行比对 。若 比对成功,则以比对成功的 case 语句为起 点 , 顺序执行后面的所有 
语句,直到整个 switch-case 语句结束 ,或遇到 break 语句时中途结束执行 , 继续执行 switch-case 
语句的下一条语句。如果所有比对都不成功,则将 default 语句作为执行的起点。 
·表达式 的结果应当是整型(即 char 、 sh01t 、 int 或 long 型) , 不能 是浮 点型。 
·常量表达式 l~n 分别列出 switch 后 ”表达式”可 能的结果。常量表达式只能是常益 ,或 由常 
量组成的表达式。各常量表达式的结果不能相同。 
·语句 l ~n 分别 对应常量表达式比对成功时应执行的语句序列。通常都在末尾增加一条 break 语 
句,这样可以宣告算法结束,中途跳出。 
·语句 n+ l 是 default 后 面的语句,即所有 比对都不成功时 应执行的语句。 default 语句习惯上被 
放在最后。语句 l~n+l 为复合语句时 ,大括号也可省略。 
switch-case 语句俗称为 开关语句 。可以将例 3-12 显示星期几英文单词的程序改用 
switch-case 语句来实现,见例 3-14 。 
例 3-14 显示星期几英文单词的 C++程序 ( switch-case 语句 ) 
l I 昢clude <iostI.eam> 
2 I usiI1g namespace std; 
3 
4 1 intmam( ) 
5 I{ 
6789101112131415 
intx; cin >> x; 
case 1: case 2: case 3: case 4: 
II 定 义 一个 int 型变益 x II 从键 盘输入一个表示星期 几的数值 ( l ~7) ,保存到变量 x 中 
II 下列 switch-case 语句根据 x 的 值显示对应星期 几的英 文单词 
switch ( x ) 
{ 
cout << "Monday" << endl; break; cout << "Tuesday" << endl; break; cout << "Wednesday" << endl; break; 
cout << "Thms笠" << endl; break; 
 
 
 16 17 
18 
19 
20 
21 
22 
23 
case 5: cout << "Friday" << endl; break; 
case 6: cout << "Sa血day" << endl; break; 
case 7: cout << "Sm1day" << endl; break; 
default: cout << "IIlput Enor" << endl; break; 
第 3 章算法与控制结构 
//每 个 case 语句显示 出对应的英文 单词 之后 , 程序 功 能即 已完 成 
24 I } 
II 使用 break 语句 中途跳 出 switch 语句 , 继续执行 其后 面的 语句( 本例中 为 retm11 语句) 
retmn O; 
一年有 12 个月 , 月份有大小 。 大月份为 31 天 , 小月份为 30 天 。 例 3- 1 5 的程序能够 
显示不 同月份的天数 。 
例 3- 15 显示不同月份天数的 C+ + 程序 
1 #include <iosti·eam> 
2 using namespace std; 
3 
4 int main() 
5{ 
6 int month; II 定义一 个 int 型变益 month 
7 cin >> month; II 从键盘 输入 一个 月份 ( 1 ~12 ) , 保存到变墓 month 中 
8 
9 II 下列 switch-case 语句显示不同月 份 的 天数 
10 switch ( montl1) 
11 { 
12 case 1: cont << "31 天” << endl ; break; // I 月 大 
13 case 2: cont << "28 或 29 天” << endl; break; // 2 月 是 一 个特殊 的 小 月份 
14 case 3: cont << "31 天” << endl ; break; // 3 月 大 
15 case 4: cont << "30 天” << endl ; break; // 4 月 小 
16 case 5: cont << "31 天” << endl ; break; // 5 月 大 
17 case 6: cont << "30 天” << endl ; break; // 6 月 小 
18 case 7: cont << "31 天” << endl ; break; // 7 月 大 
19 case 8: cont << "31 天” << endl ; break; // 8 月 大 
20 case 9: cont << "30 天” << endl ; break; // 9 月 小 
21 case 10: cont << "31 天” << endl ; break; // 10 月 大 
22 case 11: cont << "30 天” << endl; break; // 11 月 小 
23 case 12: cont << "31 天” << endl ; break; // 12 月 大 
24 default: cout << "Input Elrnr" << endl; break; // 输入错误 
25 } 
26 retm11o·, 
27 } 
例 3 - 15 中 ,所有的 大月份都是 31 天 , case 1 、 3 、 5 、 7 、 8 、 10 、 1 2 执行的 cout 语句 
都是 — 样 的 。 类似地 , 所有的 小 月份 case 4、 6 、 9 、 11 也 是相同的。 switch-case 语句 中 , 
不 同的 case 可以共用语句。通过共用语句 ,例 3-15 可改写成例 3-16 。 
心 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
例 3-16 显示不同月份天数的 C+ + 程序 ( 共用语句 ) 
l I 卅nclude <iosn·earn> 
2 I usi11g namespace std; 
3 
4 1 intmain( ) 
sI{ 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
24 
25 
26 
27 
28 | } 
int month; II 定 义一个 int 型变量 month 
cin >> month ; II 从键盘输入 一个月份 (l~l2) , 保存到变矗 month 中 
II 下列 switch-case 语句 显示不同月份的 天数 
switch (month ) 
{ 
casel : II I 月大 
case 3: II 3 月大 
case 5: II 5 月大 
case 7: II 7 月大 
case 8: II 8 月大 
caselO: II IO 月大: l 、 3 、 5 、 7 、 8 、 10 月将和 12 月共用下 面显示天数的语句 
case 12: cout << "31 天” << endl; break; II 12 月大 
case 4: II 4 月小 
case 6: II 6 月小 
case 9: II 9 月小: 4 、 6 、 9 月将和 11 月共用下 面显示天数的语句 
case 11: cout << "30 天” << endl; break; II 11 月小 
11 2 月比较特殊 , 单独使用一条显 示天数的语句 
case 2: cout << "28 或 29 天” << endl; break; 
default: cout << "IIlput Enor" << endl; break; II 输入错误 
} 
rettun O; 
通过例 3-16 可以看出, case 比对的过程实际上是在查找 switch 语句执行的起点。查找 
到起点后,计算机将从该起点开始,顺序执行后面的所有语句,直到 break 语句 中 途结束 
或整个 switch-case 语句结束为止。在 switch-case 语句 中, break 语句的作用是中途跳出, 
转去执行 switch-case 语句后面的下一条语句。 
本节习题 
l 执行 C++语句 : if (1 < 0 II false) cout << " H ello world! ";显示器上将显示( )。 
A."Hello world!" B. Hello, world! 
C. Hello world! D 什么 都未显示 
2 执行下列 C曰语句 : 
doublex = O; if (x) cout << I I x; else cout << x; 
 
 
 显示器上将显示( )。 
A.O 
C . 显示错误信息 
3 执行下列 C丑语句 : 
int X = 15; if (x%2 = 0) cout << x / 2; else cout << x / 2+ I ; 
显示器上将显示( )。 
A. 7 B. 7.5 
4 执行下列 C曰语句 : 
int X = 2; switch ( x) 
{ 
case 1: case 2: case 3: default: 
cout << "One"; break; cout << "Two"; break; cout << "T阮e"; break; cout << "Errnr"; break; 
} 
显示器上将显示( )。 
A.One 
5 执行下列 C曰语句 : 
int x = l ; switch ( x+I) 
{ 
cout << "One"; cout << "Two"; 
B.Two 
case 1: case 2: case 3: default: 
cout << "T阮e" ; 
cout << "EITor"; 
} 
显示器上将显示( )。 
A.One B.Two 
循环语句 
第 3 章算法与控制结构 
B OO 
D. 什么都未显示 
C. 8 D. 8.5 
C . Tlu·ee D . Enor 
C. TwoTln·ee D . TwoThreeEnor 
有 一些算法 , 在满足特定条件下将重复执行某些操作步骤,这种算法结构称为循环结 
构 。 例 如一个奇数数列 : I , 3, 5, 7, 9, ... ,如 需计算数列 前 N 项的累加和, 该如何设计算法 
呢 ? 通过数学方法 , 我们可 以 将这个求累 加和 问题描 述为 : 区 2n - 1 。这种描述方法本身 
n =l 
就体现了 一种 求解累加和的算法思想 : 首先引入一 个表示数列项的变噩 n, 第 n 项可表示 
$ 
 
 
 心, C++语言程序设计 (MOOC 版) (第 2 版) 
为 2n- l; 求解前 N 项 累 加和的过程是 一个重复 累 加的过程, 累 加起点是 n=l , 累 加条件 是 
n ::S;N; 每次累 加所做的操作就是 累 加第 n 项( 当 前项)的值 2n-l , 然后将 n 加 1, 准备下 
一 次累 加; 重复该 累 加操作, 直 到 累 加条件 n::S;N 不成立 。 上述求解 累 加和的算 法就 是一 
种循环结构算法。 每次循环后,算法所引入的变昼 n 都会发生变化 ( 加 1) ,然后通过比较 
n 的值来控制 是 否继 续循环(即检查条件 n ::S;N 是 否成立) 。 像变噩 n 这样用千控制循环次 
数的变昼被称为循环变量 。 
循环结构用自然 语言 描述就是 这样 一种句 型 ,即:“如果 ...... ,就重 复做...... , 否则 
停止"。在算法设计中,这种句型描述的 是 “如 果条件成立,则 重 复执行循环体 ,否则结 束 
循环”。一个循环结构由 4 个要 素构成,它们分别 是 : 循环变昼 、循环变昼 的初始值、循环 
条件和循环体 。 例 3-17 具体描述了上述求解 累 加和的算法。 
例 3-17 算法举例 :求解奇数数列前 N 项的累加和 
l 首先定义一个 int 型变量 N, 从键盘输入 N 的值。 
2 定义一个循环变量 n (初始值为 l) ,表 示 当 前数列项的序号。 
3 再定义一个 int 型变量 sum (初始值为 0) , 用于保存累加的结果。 
4 开始循环:如果循环条件 n:::;N 成立,则转到 5 做累加操作 , 否则转到 7 结束循环。 
5 将 当 前项的值 211- 1 累加到 sum 上: sum +=2n-1 。 
6 将 n 加 1, 准备 下 一次累加,转到 4 继续循环。步骤 5~6 是被重复执行的循环体。 
7 循环结束后 , 显示 sum 的值,此时 sum 中 的值就是数列前 N 项的累加和。 
8 算法结束。 
C++语 言 提供了 3 种循环语句 ( iteration statement) 句 型 来描述循环结构的算法 ,它们 
分别 是 while 语句、 do-while 语句和 for 语句 。 
3.4.1 while 语句 
C++ 语法 : while 语句 
while (条件表 达式) 
循环体语句 
语法说明: 
·条件表 达式指定一个循环条件 , 其结果应为布尔类型,例如关系表达式或逻辑表达式。非布尔 
类型的表达式结果将被自动转换 , 0 转为 false, 非 O 值转为 tiue 。 
·循环体语句 是描述循环体的 C丑语句 , 即条件成立时被重复执行的语句。如果循环体包含多 
条语句,则必须用大括号{}括起来。 
· 如果循环条件一开始就不成立 , 则循环体一次也不执行。循环体中应包含使循环条件趋向千 
false 的语句 , 否则循环条件一直为 血e, 循环体将无休止地执行 , 俗称为 死循环 。 
· 计算机执行该语句时,首先计算条件表达式(即循环条件) , 若结果为 tiue (条件成立) , 则执 
行循环体语句 , 然后再返回继续判断循环条件是否成立。重复这个过程 , 直到循环条件不成立 
时结束循环。 
 
 
 第 3 章 算法与控制结构 心 
使用 while 语句将例 3-17 的求累加和算法编写成 C++程序,见例 3-1 8 。 
例 3-18 求解奇数数列前 N 项累加和的 C++程序 ( while 语句 ) 
l | #mclude <lOS订eam> 
2 I using namespace std; 
3 
4 I llltmain( ) 
sI{ 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 I} 
intN; 
cin >> N; 
II 定义循环变矗 n (初始值为 1 ) 和保存累加结果的变益 sum (初始值为 0 ) 
皿 n= l,sum=O ; 
while (n <= N) 
{ 
II 定义一 个 int 型变益 N 
II 从键盘输入变益 N 的值 
II 用小括号将循环条件 n<=N 括起来 
sum+= 2*n - l; //将当前项的值 2n-l 累加到 sum 上 
n++; //将 n 加 1, 准备下一次累加。该语句使得循环条件 n<=N 趋向千 false 
II 执行完循环体最后一条语句 之后,转到第 11 行 , 重新判断循环条件 
} 
II 循环结 束后 , 继续执行 while 语句后面的语句 
cout << smn << endl; 
rettun O; 
II 显示变量 sum 的值 , 即前 N 项的累加和 
3.4.2 do-while 语句 
while 语句所描述的循环结构是 “ 如果 条件成立,则重复执行 循环体 ,否则 结束 循环 ”。 
该循环结构的 一个变形 是 “先执行 一 次循环体, 再判断 条件 。如果条件成立则 重复执行循 
环体,否则结束循环”。 C++语言使用 do-while 语句来描述这种循环结构 。 
C++语法: do-while 语句 
do 
循环体语句 
while (条件表达式); 
语法说明 : 
·条件表达式 指定一 个 循环条件 , 其结果应为布尔类型,例如关系表达式或逻辑表达式。非布尔 
类型的表达式结果将被自动转换 , 0 转为 false, 非 O 值转为 nue 。 
·循环体语句 是描述循环体的 C++语句。如果循环体包含多条语句 , 则必须用大括号{}括起来。 
· 循环条件被放在循环体语句的后面 , 即先执行循环体 , 再判断条件 , 即无论循环条件是否成立, 
循环体至少执行一次。循环体 中 应包含使循环条件趋向于 false 的语句 , 否则将造成死循环。 
·计 算机 执行该语句时 , 首先执行一次循环体,然后再计算条件表达式(即循环条件),若结果 
为 血e (条件成立),则重复执行循环体语句 , 否则结 束循环。 
 
 
 ~ c++语言程序设计 ( MOOC 版) ( 第 2 版 ) 
使用 do-while 语句也可以实现例 3-17 的求累加和算法,见例 3-19 。 
例 3-19 求解奇数数列前 N 项累加和的 C++程序 ( do-while 语句 ) 
l I 痐clude <iosn·eam> 
2 I usmg namespace std; 
3 
4 | mtmalll( ) 
sI{ 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 I } 
血 N; 
cin >> N; 
II 定义循环变批 n (初始值为 1 ) 和保存累加结果的变量 sum (初始值为 0 ) 
血 n=l ,sum=O; 
do { 
II 定义一个 int 型变量 N 
II 从键盘输入变量 N 的值 
II 先执行循环体 
sum += 2*n - 1; //将当 前 项的值 211 - 1 累加到 sum 上 
n++; II 将 n 加 l , 准备 下 一次累加 
} while (n <= N) ; II 后 判 断循环条件。如果条件成立则重复执行循环体 , 否则结 束循环 
II 循环结 束后 , 继续执行 do-while 语句后面的语句 
cout <<sum << endl; II 显示变量 sum 的值, 即 前 N 项的累加和 
re血11 O; 
while 语句是先判断条件,再决定是否执行循环体,循环体可能 一 次也不执行;而 
do-while 语句是先执行循环体,再判断条件,循环体至少执行 一 次 。 通常情况下,这个细 
微的差别对算法结果没有影响,两种语句可以互相替换使用。但当 一 开始的初始条件就不 
成立时, while 语句和 do-while 语句的执行结果会有差异。例如,在求累加和的程序中, 
如果从键盘输入的 N 是 o , 例 3-1 8 使用 while 语句的计算结果正确 ( 0 , 没有累加),而 
例 3-19 使用 do-while 语句的计算结果是错误的( 1, 累加了 一 次) 。 
3.4.3 for 语句 
C++语言中,循环结构 “ 如果 条件 成立,则重复执行 循环体 ,否则 结束循环 ”可以 
用 while 语句描述,也可以用 fo1 语句描述。使用 fo1 语句来描述循环结构算法,形式 
更加紧凑。 
C++语法: for 语句 
for (表达式 1 ; 表达式 2 ; 表达式 3) 
循环体语句 
语法说明 : 
·表达式 l 只在正 式循环 前 执行一次 , 通常用千为循环算法中的变批赋初始值。 
·表达式 2 指定一个循环条件。每次循环时,先计算该表达式,如果为 trne 则执行 下 面的循环 
体语句,否则结 束 循环。 
 
 
 第 3 章算法与控制结构 
·表达式 3 在每次循环体执行结束之后都被执行一次,主要用千修改循环条件中的某些变矗, 
使循环条件趋向于 false 。 
·循环体语句 是描述循环体的 C丑语句。 
· 计算机执行该语句时,首先计算表达式 l (通常是赋初始值),然后进入循环:计算表达式 2 
(即循环条件),若结果为 1I11e 则执行循环体语句;执行完循环体语句后 , 计算表达式 3 (通 
常用千修改循环条件中的某些变量);然后再返回表达式 2 重新判断条件。重复上述过程,直 
到表达式 2 的结果为 false (即循环条件不成立)时 , 结束循环。 
如 语句是 3 种循环语句中最简洁的语句。使用 如 语句替换例 3-18 中的 while 语句, 
同样可以实现求累加和的算法,见例 3 -20 。 
例 3-20 求解奇数数列前 N 项累加和的 C++程序 ( for 语句 ) 
1 I #include <ios订earn> 
2 I using namespace std; 
3 
4 I int main() 
sI{ 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 I } 
intN; II 定义一个 int 型变益 N 
cin >> N; II 从键盘输入变益 N 的值 
II 定义循环变矗 n 和保存累加结果的变量 sum (初始值为 0) 
int n, sum = O; 
for(n= l ; n <= N;n++) /1 集中使用 3 个表达式来指定 n 的初始值为 1 、循环条件为 n<=N, 
II 并在每次循环后将循环变矗 n 的值加 1 , 使循环条件趋向千 false 
{ 
sum+= 2*n- 1; II 循环体被简 化了,原来的 n丑语句被放入到 for 语句里面 
} II 循环体只有一条语句 ,此时这对大括号可以省略 
II 循环结束后 ,继续执行 for 语句后 面的语句 
cont << sum<< endl; II 显示变益 sum 的值 , 即前 N 项的累加和 
re血110 ; 
结合 伽 语句 ,我们介绍 — 下 C++语言中的逗号运算符”,”及其应用。逗号运算符”,“ 
可以将多个表达式连接起来,构成 一个长的逗号表达式。 
C+ +语法: 逗号运算符”,“ 
表达式 1, 表达式 2,...... ,表达式 n 
语法说明: 
· 计算机从左到右依次计算表达式 l~表达式 n, 并将录后 一个表达式 (即表达式 n ) 的结果作 
为整个逗号表达式的结果。 
· 逗号运算符的优先级为 15 (最低),结合性为从左到右。 
$ 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版 ) 
举例 : int a, b, c; 
a = 5, b = 10, c = a+b // 计算完该表达式后 , a 的值为 5, b 的值为 10, C 的值为 15 
II 整个逗 号表达式的结果等于最后一个表达式 c=a+b 的结果:数值为 15 , 类型为 血 型 
cont << (a = 5, b = 10, c = a+b); II 显示逗号表达式的结果,显示结果为: 15 
应用逗号表达式可 以改写例 3 -20 中的 for 语句 , 如例 3-21 所示。 
例 3-21 求解奇数数列前 N 项累加和的 C+ +程序 ( 更加紧凑的 for 语句 ) 
l #include <ios订earn> 
2 usi11g namespace std; 
3 
4 int main() 
5{ 
6 intN·, II 定义一个 int 型变量 N 7 cin >> N; II 从键盘输入变量 N 的值 
8 
9 int n, sum; II 将 n 和 sum 的初始化都放入 for 语句内部 
10 for (n=1, sum=O;n<= N; n++) II 形式更加紧凑的 for 语句 
11 sum+= 2*n- l ; 
12 cout <<sum << endl; II 显示 变量 sum 的值 ,即前 N 项的累加和 
13 rettllll o·, 14 } 
例 3-21 代码第 9~11 行可进一步简化为 : 
for (int n=l, sum=O; n <= N; sum +=2*n-l , n++) , 
在该 for 语句中,表达式 l 定义变盔并初始化, 表达式 2 指定循环条件,表达式 3 完 
成了循环体的功能,真正的循环体变成了 一条 空语句 。 根据语法规则, 这条 如 语句的 执 
行结果与简化前是 一样的,但初学者阅读起来会比较费解。适当运用逗号运算符可 以 简化 
程序,但过度使用会给程序的阅读理解造成困难 。 
3.4.4 break 语句和 continue 语句 
计算机通 常是按照语句的书写顺序来执行 C丑-程序的,而某些语句会造成执行顺序的 
跳转。例如下面的示例代码 : 
int a, b, c; 
cin >> a >> b; 
if (a> b) 
c = a; 
else c = b; 
cout << c << endl; 
其中 ,选择语句 “ if (a > b)" 会造成执行顺序的跳转 。当 计算机执行该选择语句时,如果 
条件不成立 则跳过语句 “C = a; ", 转去执行 else 后面的 语句 “c =b,“。这时 ,程序没有按 
 
 
 第 3 章算法与控制结构 $ 
照书写顺序执行,而是出现了跳转。造成程序执行顺序跳转的语句被统称为 控制语句 。选 
择语句和循环语句都属千控制语句 。 本节再介绍另外两个常用的控制语句 。 
1 . break 语句 
我们已经知道,用 break 语句能够 中 途跳出 switch 语句,转去执行 switch 语句后面的 
下一条语句。使用 b1、eak 语句也能够中途跳出循环,转去执行该循环语句的下一条语句。 
例 3-22 是一个求圆面积的 C丹程序 。 
例 3-22 计算圆面积的 C+ + 程序 
l #include <ios廿earn> 
2 using namespace std; 
3 
4 int main() 
5{ 
6 doubler; II 定义一 个 变量 r 来存放圆的半径 
7 cin >> r; II 从键盘输入圆的半径 
8 cout << 3.14*r*r << endl; II 显示圆面积 
9 rettun o·' 
10 } 
该程序一次只能求一个圆的面积,计算完就退出了。如果需要计算多个圆的面积,但 
不希望每次都重新启动程序,该怎么设计算法呢?设计思路如下 : 使用循环结构重复输入 
半径并显示圆面积的过程。但循环多少次应当由用户决定 , 该如何设定循环条件呢?可以 
将循环条件先设定为 血e (即死循环),然后根据用户从键盘输入的半径来决定是否结束循 
环 。如果用户 输入的半径为正数,则计算圆面积 , 否则跳出循环,程序结束。因为半径为 
0 或负数是没有意义的,可用作结束循环的条件。具体程序代码如例 3-23 所示 。 
例 3-23 计算多个圆面积的 C++ 程序 ( break 语句应用实例 ) 
l I 卅nclude <ios订eam> 
2 I using namespace std; 
3 
4 1 int main( ) 
sI{ 
}_ 
6789 
101112131415 
doubler; 
while (tiue) 
{ 
cin >> r; 
if (r <= 0) break; 
cout << 3.14*r*r << endl; 
II 定义一 个 变益 r 来存放圆的半径 II 死循环 
II 从键盘输入圆的半径 II 如果用户输入的半径小于或等千 o , 则跳出循环 
II 显示圆面积 
II 使用 break 语句 中 途跳出 while 语句后,继续执行下面的语句(本例 中 为 rettun 语句) 
rettun O; 
例 3-23 代码第 10 行是在循环语句中嵌套的 一个 让else 语句。 C++语言中 , 所有的选 
择语句和循环语句之间都可以互相嵌套 。循环语句的相互嵌套,即 一 个循环语句中再包含 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版 ) 
另 一个循环语句,这被称为是多重循环 。 例 3-24 给出 一个生成乘法表的 C++程序,其中使 
用了二重循环。程序运行结果如图 3-3 所示 。 
例 3-24 生成乘法表的 C++程序 ( 多重循环 ) 
l I 卅nclude <ios订eam> 
2 I usiI1g namespace std; 
3 
4 1 intmain( ) 
sI{ 
-} 
67891011121314 
int X, y; for (x = l; x <= 9; x++) 
{ 
II 定义 2 个循环变量 x 和 y II 第一重循环, x 从 1 到 9, 共 9 行 
for (y = 1; y <= x; y++) /I 第二重循环, y 从 1 到 x 。第 x 行有 x 个乘法 
cont << y << "x " << x << "=" << x*y <<" "; //规范显示格式 ,例如: 2X3=6 cont << endl; //换一行 ,再显示后续的内容 
} 
renll11 O; 
I "C:\Users\Thinkpad\Desktop\test\Debug\te吐exe" 回 E 123456789 
__________________ 
123456789 22222222 
2~4 3=6 4=8 5=10 6=12 ?=14 8=16 9=18 
33333 
333=9 4=12 5 =15 6 =18 ?=21 8=24 9=27 
44444 
4 4=16 S=28 6=24 7=28 8=32 9=36 
55555 
5 =25 6=30 7=35 8=40 9=45 
6666 
6 =36 7=42 8=48 9=54 
77?7=49 8=56 9=63 
888=64 
9=72 9 9 =81 
_ 
图 3 -3 由 C廿程序生成的乘法表 
注意, 在多重循环中若使用 break 语句,只能跳出它所在 的本层循环 。 另外 需要注意 
的 是 , b1、eak 语句只能在 switch-case 语句和循环语句中使用,否则编译器会提示语法错误 。 
2. continue 语句 
continue 语句的作用是结束本次循环,中途返回,继 续 下 一 次循环 。 例 3-25 给出 一 个 
continue 语句的应用实例 。 
例 3-25 显示 1~50 之间所有能被 3 整除的数 ( continue 语句应用实例 ) 
l I 卅nclude <ios订eam> 2 I usiI1g name严e std; 
 
 
 第 3 章算法与控制结构 ` 
3 
4 1 1llt 血n() 
sI{ 
}_ 
67891011121314 
int n; 
for (n = l; n <= 50; n++) 
{ 
II 定 义一个循环变矗 n II 从 1 到 50 进行循环 
if (n%3 != 0) continue; II 如果 n 不能被 3 整除,则执行 continue 语句 
II 其作用是结束本次循环 , 中途返回,继续检查 下 一 个数 cout << n << ", "; II 未中途返回的数是能被 3 整除的数 , 显示并用逗号隔开 
} 
renun O; 
在循环语句中 , continue 语句与 break 语句的区别是 : continue 只结束本次循环 , 而 break 
结束的是整 个循环。另外 , continue 语句只能在循环语句中使用 , break 还可 以在 switch-case 
语句 中 使用。 
本节习题 
l 执行下列 C曰语句 : 
int x = 5, y = 0; 
while (x > 0) 
y += 2; x--; 
} 
执行结束后, x 和 y 的值分别为( )。 
A. 5, 0 B. 0,, 5 
2 执行下列 C吁语句 : 
int x = 5, y = 0; 
do { 
y += 2; x--; 
} while (x > O); 
C. 5, 10 D. 0, 10 
执行结束后, x 和 y 的值分别为( )。 
A. 5, 0 B. 0,, 5 
3 执行下列 C曰语句 : 
int y = O; 
for (int x = 5; x > O; x--) 
y +=2; 
C. 5, 10 D. 0, 10 
执行结束后, x 和 y 的值分别为( )。 
A. 5, 0 B. 0,, 5 
4 执行下列 C++语句 : 
for (int x=O, y = O; x < 5; y += 2, x++); 
C. 5, 10 D. 0, 10 
 
 
 ~ c++语言程序设计( MOOC 版) (第 2 版) 
执行结束后 , x 和 y 的值分别为( ) 。 
A. 5, 0 B. 0,, 5 
5 执行下列 C丑语句 : 
int x = 5, y = 0; while (x > 0) 
{ 
y += 2; x--; 
if (xo/o4 = 0) break; 
} 
C. 5, 10 
执行结束后, x 和 y 的值分别为( )。 
A. 5, 0 B. 0, 10 C. 4, 2 
6 循环体至少被执行一 次的循环语句是( )。 
A. while 循环 B. do-while 循环 C. for 循环 
7 执行下列 C丑语句 : 
int x = 0; while (x < 3) 
{ 
cout << "*" ; x++; 
} 
显示器将显示( )。 
A.* B. ** 
D. 0, 10 
D.4, 4 
D 任意 一种循环 
C . *** D ******... ,持续显示星号 
8 执行下列 C丹语句 : 
int x = 0; while (x < 3) 
cout << "*" ; x++; 
显示器将显示( )。 
A.* B. ** 
C . *** D ******..., 持续显示星号 
算法设计与评价 
程序设计 中 的算法应当具有实用 价值并且是可实 现 的,因此我们所设计 的算法应当具 
备以下 5 个特性 。 
( 1 ) 有穷性 。一个 算法必须保 证其执行步骤是有限的。 
( 2 ) 确定性 。算法的每个步骤必须有明确的定义, 不 能含糊 不清,或有二义性 。 
(3 ) 有效性 。算法的每个步骤应该能被计算机执行 , 并得到有效的结果。 
( 4 ) 输入 。算法可 以 没有输 入,也 可 以 有 一 个或多个输入, 输入是算法处理的原始 
 
 
 第 3 章算法与控制结构 
数据。 
( 5 ) 输 出 。算法至少要有一个输 出 ,输 出是算法处理的结果。 
针对同 一程序设计任务,不同程序员可以有不同的算法设计,进而编写出不同的程序 。 
如何评价一个算法的优劣呢?除 了正确性之外,计算复杂度和 内 存占用量是评价算法性能 
的两个基本标准 。 
3.5.1 计算复杂度 
评价算法通常使用 计算复杂度 来描述算法的运算次数。例如 , 已定义变噩“double x=5 ; ", 
则执行语句 : 
X *= x; 
该算法做 1 次乘法,其算法复杂度记为 0(1) 。 执行下列循环语句 : 
for (int n = l ; n <= N; n++) 
X *= x; 
该算法做 N 次乘法 , 其算法复杂度与 N 的大小有关系 ,记为 O(N) 。 执行下列 二重循 
环语句 : 
for (int m= l ; m <=N; m++) 
for (int n = l ; n <= N; n++) 
X *= x; 
该算法做 NxN 次乘法 , 其算法复杂度与 矿的大小有关系 ,记为 O(N2) 。上述三种计算复杂 
度存在如下的大小 关系 : 
0(1) ::s; O(N) ::s; O(N2) 
算法的计算复杂度决定了 计 算机执行该算法所需的时间。完成相同的功能 ,计算复杂 
度越小,算法的执行速度越快 , 算法就越好。 
例 如 ,给 定一 个整数 X, 设计一个判断 x 是否素数的算法。算法的设计 思路如下 : 依 
次检查 x 能 否被 2 到 X- l 之间的数整除。如果有—个数能整除,则 x 不是素数,否则就是 
素数。该算法是一 个循环 结 构,例 3-26 给出了实现算法的 C丑-程序 。 
例 3-26 判断素数的 C++ 程序 
l #include <ios订earn> 
2 usiI1g namespace std; 
3 
4 intm打n() 
5{ 
6 皿 x; II 定义一个 血 型 变盐 x 7 cin >> x; II 从键盘输入变益 x 的值 
8 
9 II 定义 bool 型变量 yes_no, 用来表示 x 是 否为素数 
10 bool yes_no = true; II 先假定 x 是素数 , 因 此将 yes_no 的初始值设为 true 
11 for (int n = 2; n < x; n++) II 判断 x 是否为素数的循环 , 从 2 到 x- 1 进行循环 
$