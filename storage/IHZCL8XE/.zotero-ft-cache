阚道宏
C++语言程序设计:MOOC版
清华大学出版社(ISBN 978-7-302-42104-7)
第1章 程序设计导论


阚道宏
第1章 程序设计导论
• 程序员、计算机与程序
– 计算机与指令
– 机器语言
– 程序员与程序
程序员
计算机 程序
下达指令


阚道宏
第1章 程序设计导论
• 用户与计算机系统
– 计算机系统
– 硬件与软件
– 用户
计算机 程序
执行程序
用户


阚道宏
第1章 程序设计导论
• 本章内容
– 1.1 计算机硬件结构
– 1.2 计算机程序
– 1.3 计算机程序开发
– 1.4 信息分类与数据类型
– 1.5 C++语言简介


阚道宏
1.1 计算机硬件结构
• 冯.诺依曼结构
– 存储程序计算机
– 二进制
– 5个基本组成部分
• 运算器
• 控制器
• 存储器
• 输入设备
• 输出设备
存储器
中央处理器
运算器
控制器
输入设备 输出设备
控制信号
数据信号
内存储器
外存储器
apu
𤪱


阚道宏
1.1 计算机硬件结构
• 存储器
– 内存与外存
– 写入与读出
– 存储单位
– 内存地址
存储器
中央处理器
运算器
控制器
输入设备 输出设备
控制信号
数据信号
内存储器
外存储器


阚道宏
1.1 计算机硬件结构
• 中央处理器CPU
– 控制器
– 运算器
– 寄存器
存储器
中央处理器
运算器
控制器
输入设备 输出设备
控制信号
数据信号
内存储器
外存储器


阚道宏
1.1 计算机硬件结构
• 输入设备
– 下达指令
– 输入信息
– 数字化
• 输出设备
存储器
中央处理器
运算器
控制器
输入设备 输出设备
控制信号
数据信号
内存储器
外存储器


阚道宏
1.1 计算机硬件结构
存储器
中央处理器
运算器
控制器
输入设备 输出设备
控制信号
数据信号
内存储器
外存储器
CPU
总线
内存 硬盘
键盘 显示器


阚道宏
1.2 计算机程序
• 计算机程序(Program)是使用某种计算机
语言编写的一组指示计算机进行数据处理
的指令序列。
– 申请内存空间
– 输入原始数据
– 数据处理
– 输出处理结果
• 机器语言、汇编语言、高级语言
助记符


阚道宏
1.2 计算机程序
• 注释
• 指令序列
• 程序格式
例1-1 一个用C++语言编写的温度换算程序
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
/*
一个C++程序实例:
将摄氏温度换算成华氏温度。
*/
#include <iostream>
using namespace std;
int main()
{
double ctemp, ftemp; // 申请内存空间
cin >> ctemp; // 从键盘输入摄氏温度
ftemp = ctemp * 1.8 + 32; // 温度换算
cout << ftemp; // 在显示器上输出华氏温度 return 0; // 程序结束,返回操作系统
}


阚道宏
1.2 计算机程序
• 程序的执行
– 由程序员编写
– 由计算机执行
• 程序=数据+算法
程序是一组指令序列,描述了
某种数据处理的过程和步骤 ctemp
ftemp


阚道宏
1.2 计算机程序
• 程序的用户界面
– 命令行界面CLI
– 图形用户界面GUI
Dev
user


阚道宏
1.3 计算机程序开发
• 计算机程序的开发过程
– 设计
– 实现
– 测试
– 发布
• 参与程序开发过程的人员统称为程序开发
人员,或简称为程序员


阚道宏
1.3 计算机程序开发
• 程序设计
– 需求分析
需求分析指的是,在建立一个新的或改变一个现存的
电脑系统时,为了描述新系统的目的、范围、定义和 功能等所要做的全部工作。
– 调研和分析
– 功能和性能要求
– 需要输入什么数据、要得到什么结果、以及最后应输
出什么等
– 书面的需求分析报告


阚道宏
1.3 计算机程序开发
• 程序设计
– 结构化程序设计
首先将一个求解复杂问题的
过程划分为若干个子过程, 每个子过程完成一个独立的、 相对简单的功能;用算法来 描述各个过程的操作步骤, 每个算法称为一个模块。结 构化程序设计采用“自顶向 下,逐步细化”的方法来分 解和设计算法模块,然后通 过调用关系将各个模块组织 起来,最终形成一个求解问 题的完整过程


阚道宏
1.3 计算机程序开发
• 程序设计
– 面向对象程序设计
将待处理问题中的事物当做一个个独立的处理对象,
再以归纳分类的思想把具有相似特性的对象抽象成 类。类将事物的属性(数据)和处理方法(算法) 封装在一起。通过“消息驱动”机制将各个对象组 织起来,最终形成一个完整的程序


阚道宏
1.3 计算机程序开发
• 程序实现
– 编程语言
– 编译执行
– 解释执行
2015年排名 编程语言 使用率(%) 2014年排名 排名升降
1 Java 17.822 2 ↑
2 C 16.788 1 ↓
3 C++ 7.756 4 ↑
4 C# 5.056 5 ↑
5 Objective-C 4.339 3 ↓
6 Python 3.999 8 ↑
7 Visual Basic .NET 3.168 10 ↑
8 PHP 2.868 7 ↓
9 JavaScript 2.295 9 ─
10 Delphi/Object Pascal 1.869 17 ↑
11 Visual Basic 1.839 11 ─
12 Perl 1.759 12 ─
13 R 1.524 23 ↑
14 Swift 1.440 14 ─
15 MATLAB 1.436 19 ↑
16 Ruby 1.359 13 ↓
17 PL/SQL 1.229 26 ↑
18 COBOL 0.948 31 ↑
19 ABAP 0.849 34 ↑
20 Pascal 0.846 18 ↓
一次译完
岸趿边


阚道宏
1.3 计算机程序开发
• 程序实现
– 集成开发环境
• Visual C++ 6.0
Visual Studio系列
• Eclipse
• Dev C++
– C++编程步骤
• 编码
• 编译
• 连接
• 调试
• 程序测试
• 程序发布
build I link器


阚道宏
1.3 计算机程序开发
• 计算机
用户
程序员


阚道宏
1.4 信息分类与数据类型
• 二进制数制
– 一个R进制数制,采用R个基本计数符号,R称
为数制的基。逢R进位,不同位置对应不同的
值,该值是以R为底的幂,称为对应位置的权
– 十进制
82.625 = 8×101 + 2×100 + 6×10-1 + 2×10-2 + 5×10-3
– 二进制
1010010.101 = 1×26+0×25+1×24+0×23+0×22+1×21+0×20 + 1×2-1+0×2-2+1×2-3


阚道宏
1.4 信息分类与数据类型
• 二进制数制
– 十进制整数转二进制:除2取余
除以2 商(整数) 余数 二进制
82÷2 = 41 0 低位
1010010
41÷2 = 20 1
20÷2 = 10 0
10÷2 = 5 0
5÷2 = 2 1
2÷2 = 1 0
1÷2 = 0 1 高位


阚道宏
1.4 信息分类与数据类型
• 二进制数制
– 十进制小数转二进制:乘2取整
– 十进制数82.625转换成二进制的结果是:
1010010.101
乘以2 乘积 整数 二进制
0.625×2 = 1.25 1 高位
0.101
0.25×2 = 0.5 0
0.5×2 = 1.0 1 低位


阚道宏
1.4 信息分类与数据类型
• 二进制数制
– 十进制小数转二进制:乘2取整
– 0.6转换成二进制后是一个无限循环的有理数:
0.10011001......,需要截断
乘以2 乘积 整数 二进制
0.6×2 = 1.2 1 高位
0.1001
0.2×2 = 0.4 0
0.4×2 = 0.8 0
0.8×2 = 1.6 1
0.6×2 = 1.2 1
...... ...... ...... 低位


阚道宏
1.4 信息分类与数据类型
• 其它数制
– 八进制
1010010.101 分组→ 001 010 010 . 101 转换→ 122.5
八进制 二进制 八进制 二进制
0 000 4 100
1 001 5 101
2 010 6 110
3 011 7 111


阚道宏
1.4 信息分类与数据类型
• 二进制数值
– 十六进制
1010010.101 分组→ 0101 0010 . 1010 转换→ 52.A
十六进制 二进制 十六进制 二进制
0 0000 8 1000
1 0001 9 1001
2 0010 A 1010
3 0011 B 1011
4 0100 C 1100
5 0101 D 1101
6 0110 E 1110
7 0111 F 1111


阚道宏
1.4 信息分类与数据类型
• 数据类型
– 存储位数
• 1个字节(8位):0000 0000 ~ 1111 1111,即0~255
• 2个字节:0 ~ 65535
• 4个字节:0 ~ 4294967295
• 定长存储:存储位数越多,可存储的数值范围就越
大,所占用的内存也越大。因此,程序员在编写程
序时应根据所处理数据可能的数值范围合理地选择
存储位数


阚道宏
1.4 信息分类与数据类型
• 数据类型
– 存储格式
如何区分:正数与负数、整数与实数
-82:(1 0000000 01010010)2 → (1 1111111 10101101)2 → (1 1111111 10101110)
2
位数(字节数)
数值范围
无符号格式 有符号格式
8(1) 0 ~ 255 -128 ~ +127
16(2) 0 ~ 65535 -32768 ~ +32767
32(4) 0 ~ 4294967295 -2147483648 ~ 2147483647
一
sighed


阚道宏
1.4 信息分类与数据类型
• 数据类型
– 实数的科学表示法
82.625,8.2625,0.82625,0.082625
0.82625×102,0.82625×101,0.82625×100,0.82625×10-1
N = M×RE
– 浮点格式:存储阶码E与尾码M
存储-8.2625 → -0.82625 ×101
0 001 1 0010 1100 0101
阶码
符号位 阶码 尾数
符号位 尾数


阚道宏
1.4 信息分类与数据类型
• 数据类型 = 存储位数+存储格式
为了让程序员在申请内存时能方便地指定存储位数和存 储格式,计算机高级语言引入了数据类型的概念
– int类型
32位(4字节)、有符号位,存储整数
– unsigned int类型
32位(4字节)、无符号位,存储整数
– double类型
64位(8字节)、有符号位,以浮点格式存储实数
0


阚道宏
1.4 信息分类与数据类型
• 信息分类及数字化
– 文字信息的数字化
– 声音信息的数字化
– 图像信息的数字化
125,153,158,157,127,70,103,120,129,144,144 150,150,147,150,160,165,160,164,165,167,175 175,166,133, 60,133,154,158,100,116,120, 97 74, 54,74,118,146,148,150,145,157,164,157 ......
ASCII值 字符 ASCII值 字符 ASCII值 字符 ASCII值 字符
0 NUT 32 (space) 64 @ 96 、
1 SOH 33 ! 65 A 97 a
2 STX 34 ” 66 B 98 b
3 ETX 35 # 67 C 99 c
4 EOT 36 $ 68 D 100 d
5 ENQ 37 % 69 E 101 e
6 ACK 38 & 70 F 102 f
7 BEL 39 , 71 G 103 g
8 BS 40 ( 72 H 104 h
9 HT 41 ) 73 I 105 i
10 LF 42 * 74 J 106 j
11 VT 43 + 75 K 107 k
12 FF 44 , 76 L 108 l
13 CR 45 - 77 M 109 m
14 SO 46 . 78 N 110 n
15 SI 47 / 79 O 111 o
16 DLE 48 0 80 P 112 p
17 DCI 49 1 81 Q 113 q
18 DC2 50 2 82 R 114 r
19 DC3 51 3 83 X 115 s
20 DC4 52 4 84 T 116 t
21 NAK 53 5 85 U 117 u
22 SYN 54 6 86 V 118 v
23 TB 55 7 87 W 119 w
24 CAN 56 8 88 X 120 x
25 EM 57 9 89 Y 121 y
26 SUB 58 : 90 Z 122 z
27 ESC 59 ; 91 [ 123 {
28 FS 60 < 92 \ 124 |
29 GS 61 = 93 ] 125 }
30 RS 62 > 94 ^ 126 ~
31 US 63 ? 95 __ 127 DEL
文字信息的数字化


阚道宏
第2章 数值计算
• 数值计算(Numerical computation)就是利用
计算机求解各种数学问题。例如,
– 数据存储
– 数据输入
– 数值计算
– 数据输出
温度换算公式:f  c1.8  32


阚道宏
第2章 数值计算
• 本章内容
– 2.1 程序中的变量
– 2.2 程序中的常量
– 2.3 算术运算
– 2.4 位运算
– 2.5 赋值运算
– 2.6 数据的输入输出
– 2.7 引用与指针


阚道宏
2.1 程序中的变量
• 变量
– 定义变量
– 访问变量
变量 = 内存单元
• 变量的定义
– 数据类型(存储位数、存储格式)
– 预定义数据类型
为变量申请内存空间


阚道宏
2.1 程序中的变量
• C++语言中的基本数据类型
数据类型 说明 存储位数
(字节数) 数值范围 运算
char 或 signed char 有符号字符型
1
-128~127
算术运算 关系运算
unsigned char 无符号字符型 0~255
short 或 signed short 有符号短整型
2
-32768 ~ 32767
unsigned short 无符号短整型 0 ~ 65535
int 或 signed int 有符号整型 4 -2147483648 ~ 2147483647 long 或 signed long 有符号长整型
unsigned 或 unsigned int 无符号整型 4 0 ~ 4294967295 unsigned long 无符号长整型
float 单精度浮点型 4 3.4×10-38 ~ 3.4×1038
(绝对值精度)
double 双精度浮点型
8 1.7×10-308 ~ 1.7×10308
(绝对值精度)
long double 长双精度浮点型
bitoperation 5
ealNo


阚道宏
2.1 程序中的变量
• C++语言的词法元素
关键字、标识符、常量、运算符、分隔符等
– 关键字
int、float、unsigned
– 标识符
abc、Abc、_bc、abc123、A、a、_No1
123、abc.123、温度、float
• 语句
语句是一条语法完整的指令,以分号“;”结束


阚道宏
2.1 程序中的变量
• 变量定义语句
C++语法:变量定义语句
数据类型 变量名1, 变量名2, ..., 变量名n ;
语法说明:
 数据类型指定了变量的存储位数和存储格式;
 变量名需符合标识符的命名规则;
 可在一条语句中定义多个具有相同数据类型的变量,变量之间用“,”隔开。
举例:定义2个变量ctemp和ftemp
double ctemp ; // 计算机为double型变量ctemp分配8个连续的字节
// 作为其内存单元,并将以浮点格式在该内存单元中存储数据
double ftemp ; 或
double ctemp, ftemp ;


阚道宏
2.1 程序中的变量
• 变量的访问:写入、读出
– 写入
输入:cin >> ctemp;
赋值:ctemp = 36;
初始化:int x=10, y;
– 读出
自动读取:ftemp = ctemp*1.8 + 32;
输出:cout << ftemp;
先定义,后访问
Aless I O
kehyoard
mǎnǎ


阚道宏
2.2 程序中的常量
• 温度换算公式
– 公式中的常量
• C++语句:ftemp = ctemp*1.8 + 32;
• 字面常量
– 书写形式:32、1.8
– 负数:-32、-1.8
– 实数:1.8、0.18e1、0.18E1
• 常量也有数据类型
– 数据类型:存储位数、存储格式
– 指定常量的数据类型:默认形式、后缀形式
温度换算公式:f  c1.8  32
I


阚道宏
2.2 程序中的常量
• 指定常量的数据类型
– 默认形式
32、1.8
10、10.0
– 后缀形式
• 指定整型常量的数制
32、032、0x32
后缀字母 数据类型 举例
在整数常量后面添加L或l 长整型long 10L,10l,-20L
在整数常量后面添加U或u 无符号格式unsigned 10U,10u,20UL,20LU
在实数常量后面添加F或f 单精度浮点型float 10.5f,10.5F,20F
dot doubt
I
oct Hex


阚道宏
2.2 程序中的常量
• 符号常量
可以将经常使用的常量定义成一个符号常
量,然后在程序代码中用符号常量来代替
具体的数值。
例2-1 符号常量应用举例:计算圆的面积和周长
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
// C++程序实例:从键盘输入圆的半径,计算并显示圆的面积和周长。
#include <iostream> using namespace std; #define PI 3.14 // 定义一个符号常量PI来表示π的值
int main() {
double r; // 定义一个变量r来存放圆的半径
cin >> r; // 键盘输入圆的半径
double s; // 定义一个变量s来存放圆的面积 s = PI * r * r; // 计算圆的面积,结果保存到变量s中
cout << s << endl; // 显示圆面积
// endl表示在显示完面积后换一行,这样就能与下面将显示的周长隔开
double len; // 定义一个变量len来存放圆的周长 len = 2 * PI * r; // 计算圆的周长,结果保存到变量len中 cout << len << endl; // 显示圆的周长 return 0; }
I teaadble
easymodify


阚道宏
2.2 程序中的常量
• 定义符号常量
C++语法:定义符号常量
#define 符号常量名 常量值
语法说明:
 以“#”开头,结尾不能加“;”
 符号常量名应符合标识符命名规则。习惯上符号常量名使用大写字母。
举例:定义1个符号常量ABC
#define ABC 5 // 定义符号常量ABC,来表示常量值5
slater


阚道宏
2.3 算术运算
• 表达式
– 运算符、操作数、括号
– 表达式语句
• 运算符:优先级、结合性
– 算术运算符
– 位运算符
– 关系运算符
– 逻辑运算符


阚道宏
2.3 算术运算
• 算术运算符
+(加)、-(减)、*(乘)、/(除)
– 优先级
– 结合性
– 操作数及其类型转换
5+3
• CPU只能对相同类型的2个操作数进行算术运算
5.5 + 3
• 类型转换:强制转换、自动转换
算术表达式


阚道宏
2.3 算术运算
• 数据类型强制转换
5.5 + 3:5.5 + (double)3、(int)5.5 + 3
C++语法:数据类型强制转换
数据类型(操作数) 或 (数据类型)操作数
举例:
short(32)指定32为有符号短整型(2字节)
float(1.8)指定1.8为单精度浮点型(4字节)
long(-32)指定-32为有符号长整型(4字节)
double(1.8)指定1.8为双精度浮点型(8字节)
注:数据类型应与操作数的数值相符,否则将造成数值的改变。例如,
float(32)将32变为32.0(可以接受)
short(32769)将32769变为-32767(溢出)
int(1.8)将1.8变为1(丢失小数部分)
unsigned short(-1)将-1变为65535(丢失负号)
overflow
X
undeflrow


阚道宏
2.3 算术运算
• 数据类型自动转换
5.5 + 3:5.5 + (double)3
• 表达式结果:值+类型
5+3、5.5+3、5 / 2、5.0 / 2
• 括号:(3*(2+5) -1) / 2
char unsigned
char short unsigned
short int unsigned long unsigned
long float double
低高
low high aneptabe
lompikr
recision
点


阚道宏
2.3 算术运算
• 其它算术运算符
– 取余运算符“%”:10 % 6
– 自增运算符“++”:x++
• 后置
• 前置:++x
• 区别:假设int x=10; 则(x++)*2、(++x)*2分别多少?
– 自减运算符“--”
• 前置、后置


阚道宏
2.4 位运算
• 一个二进制位可记录某种对象的开关状态
• 位反运算符“~”
unsigned char s = 0x55; s = ~s;
~ 0101 0101
= 1010 1010


阚道宏
2.4 位运算
• 位与运算符“&”
unsigned char s; s & 0x2 0000 0010
0011 0011
& 0000 1111
= 0000 0011
bbbb bbbb 操作数s,b表示0或1
& 0000 0010 检测倒数第2位状态的掩码
= 0000 00b0
运算结果:保留倒数第2位,其它位变成0
如果该结果等于0,则倒数第2位的状态为0
如果该结果不等于0,则倒数第2位的状态为1


阚道宏
2.4 位运算
• 位或运算符“|”
unsigned char s; s | 0x2
0011 0011
| 0000 1111
= 0011 1111
bbbb bbbb 操作数s,b表示0或1
| 0000 0010 将倒数第2位状态置1的掩码
= bbbb bb1b 运算结果:将倒数第2位置成1,其它位不变


阚道宏
2.4 位运算
• 异或运算符“^”
unsigned char s; s ^ 0x2
0011 0011
^ 0000 1111
= 0011 1100
bbbb bb0b 操作数s,其中倒数第2位为0,b表示0或1
^ 0000 0010 将倒数第2位状态进行反置的掩码
= bbbb bb1b 运算结果:将倒数第2位由0反置成1,其它位不变
bbbb bb1b 操作数s,其中倒数第2位为1,b表示0或1
^ 0000 0010 将倒数第2位状态进行反置的掩码
= bbbb bb0b 运算结果:将倒数第2位由1反置成0,其它位不变


阚道宏
2.4 位运算
• 左移运算符“<<”
unsigned char s = 0x33; s << 2
• 右移运算符“>>”
unsigned char s = 0x33; s >> 2
0011 0011 8位操作数
<< 2 左移2位
= 00 1100 1100 左移结果:高2位移除,低2位补0
0011 0011 8位无符号数
>> 2 右移2位
= 0000 1100 11 右移结果:低2位移除,高2位补0


阚道宏
2.4 位运算
表2-3 位运算符的优先级和结合性
位运算符 优先级 结合性
~,位反 2 从右向左
<<,左移
5
从左向右
>>,右移
&,位与 8
^,异或 9
|,位或 10
整型:char、short、int、long


阚道宏
2.5 赋值运算
• 赋值运算符“=”
用于修改变量的数值,即将新数值写入变量对
应的内存单元,存储在该内存单元中的原数值 将被擦除。
int x = 0, y = 0;
x = 5;
y = x + 3;
– 赋值运算本身也构成一个赋值表达式
(x = 5) * 2
y = x = 2 + 6; 与 y = (x = (2 + 6)); 等价


阚道宏
2.5 赋值运算
• 泛化的运算符:=、++、-
x + 5、x++
– 由泛化运算符所构成的表达式,运算时:
• 得到运算结果
• 同时还会改变操作数的值
– 简化语句
语句:a = 10; b = 10; c = 10; 可写成:a = b = c = 10;
语句:y = x; x = x + 1; 可写成:y = x++;
语句:x = x + 1; y = x; 可写成:y = ++x;
语句:y = x; x = x - 1; 可写成:y = x--;
语句:x = x - 1; y = x; 可写成:y = --x;


阚道宏
2.5 赋值运算
• 复合赋值运算符
x = x ? (exp) 可简写为 x ?= exp
表2-4 复合赋值运算符
+= -= *= /= %= &= |= ^= <<= >>=
x += 5; 等价于 x = x + 5;
y *= x + 2; 等价于 y = y * (x + 2);
y &= x + 2; 等价于 y = y & (x + 2);
y <<= x + 2; 等价于 y = y << (x + 2);


阚道宏
2.5 赋值运算
• 变量初始化
int x = 10, y;
int x(10), y;
• 常变量
C++语法:定义常变量
const 数据类型 常变量名 = 初始值 ;
语法说明:
 使用const关键字指定常变量;
 定义常变量时必须初始化;
 常变量的值不能改变,例如不能被再次赋值。
举例:定义1个常变量x
const int x = 5; // 定义常变量x,初始值设定为5 int y; // 定义普通变量y y = x + 5; cout << x; //正确的语法:读取常变量 x = 10; cin << x; // 错误的语法:不能改写常变量的值
x = 5; // 错误的语法:常变量的值不能再次赋值,即使是赋一样的值
define


阚道宏
2.6 数据的输入和输出
• 控制台程序
• 输入/输出流
– 键盘(cin)、显示器(cout)
• 导入外部程序
#include <iostream>
using namespace std;
1


阚道宏
2.6 数据的输入和输出
C++语法:标准输入语句
cin >> 变量1 >> 变量2 >> ...... >> 变量n ;
语法说明:
 cin表示键盘,借用右移运算符“>>”表示数据从键盘流向后面的变量;
 一条输入语句可以输入多个变量的数据,输入时用空格或Tab键隔开,以回车键结
束;
 键盘所输入数据的类型应与变量的类型匹配;
 执行该语句时,计算机将暂停程序的执行,等待用户从键盘输入指定个数和类型
的数据,然后将这些数据按位置次序赋值给相应的变量。
举例:int x; double y;
cin >> x; // 从键盘输入整型变量x的值
cin >> x >> y; // 从键盘输入整型变量x和浮点型y的值
// 用户应按次序输入2个数据,其类型应分别与变量x、y的类型匹配


阚道宏
2.6 数据的输入和输出
C++语法:标准输出语句
cout << 表达式1 << 表达式2 << ...... << 表达式n ;
语法说明:
 cout表示显示器,借用左移运算符“<<”表示数据从内存(表达式结果是存放
在内存里的)流向显示器;
 单个常量或变量可认为是最简单的表达式;
 表达式“endl”表示换行显示;
 一条输出语句可以同时输出多个表达式结果;
 执行该语句时,计算机首先按从右到左的顺序逐个计算表达式的结果,然后再
按从左到右的顺序依次显示各表达式的结果,各显示结果之间没有间隔。
举例:int x = 5;
cout << x; // 显示变量x的值,显示结果:5
cout << 5; // 显示一个常量的值,显示结果:5
cout << x << x *x; // 显示变量x及其平方的值(之间没有间隔),显示结果:525


阚道宏
2.6 数据的输入和输出
例2-2 输入输出举例:克,克拉与盎司
1
2
3
4
5
6
7
8
9
10
11
12
13
// C++程序实例:将以克为单位的重量换算成克拉和盎司。
#include <iostream>
using namespace std;
int main()
{
double x; // 定义一个变量x来存放以克为单位的重量
cin >> x; // 键盘输入需要换算的重量
cout << x * 5; // 1克 = 5克拉
cout << x / 31.1034807; // 1盎司 = 31.1034807克
return 0;
}
字符串常量:”China”、”中国”、”中国China”
提㨇㦽


阚道宏
2.6 数据的输入和输出
例2-3 界面优化举例:克,克拉与盎司
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
// C++程序实例:将以克为单位的重量换算成克拉和盎司。
#include <iostream> using namespace std;
int main() {
double x; // 定义一个变量x来存放以克为单位的重量
cout << “请输入需要换算的重量(以克为单位):”; // 提示用户正确地输入数据
cin >> x; // 键盘输入需要换算的重量
cout << “换算结果:= ” << x * 5 << “克拉,”; // 1克 = 5克拉,增加提示信息和分隔符号 cout << “ = “ << x / 31.1034807 << “盎司” << endl; // 1盎司 = 31.1034807克
// endl表示在显示结束后换一行
return 0; }


阚道宏
2.7 引用与指针
• 访问变量内存单元
– 变量名
– 引用
– 指针
• 引用:变量的别名
内存单元
一一 usage


阚道宏
2.7 引用与指针
• 引用
C++语法:定义引用变量
引用类型 &引用变量名 = 被引用变量名 ;
语法说明:
 引用类型是引用变量的数据类型,必须与被引用变量的类型一致;
 &是引用变量说明符。定义变量语句中,变量名前加“&”表示该变量为引用变量;
 引用变量名需符合标识符的命名规则;
 被引用变量名指定被引用的变量,该变量必须是一个已经定义的变量;
 定义引用变量时必须初始化,即指定其是哪个变量的引用。引用变量只能引用一个变量, 定义后不能再引用其它变量。
举例:定义1个int型变量x及其引用变量xa
int x ; int &xa = x; // 称xa是x的一个引用 或
int x, &xa = x ; // 可在一条定义语句中完成
int x, y, &xa = x; // 一条定义变量语句可既包括普通变量,又包括引用变量
因此不存在判Null


阚道宏
2.7 引用与指针
• 举例: int x=10, y=20; int &xa = x;
变量名x
引用名(别名)xa
10
(4个字节)
变量名y 20
(4个字节)
......
1


阚道宏
2.7 引用与指针
例2-4 引用变量举例
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
// C++程序实例:键盘输入一个数值,计算其平方的值。
#include <iostream>
using namespace std;
int main()
{
int x; // 定义一个变量x
cin >> x; // 键盘输入x的值
/*
cout << x * x << endl; // 计算并显示x2的值
*/
int &xa = x; // 定义一个变量x的引用变量xa
cout << xa * xa << endl; // 改用访问变量xa来计算并显示x2的值
// 访问引用变量xa所读出的数据就是变量x的值
return 0;
}


阚道宏
2.7 引用与指针
• 指针:内存地址
C++语法:取地址运算符“&”
&变量名
语法说明:
 所取出的变量地址是程序执行时该变量所分配内存的地址。每次执行程序时,变量不一定 会被分配在同一内存单元,这取决于本次执行时计算机中哪些内存单元是空闲的;
 一个变量可能占用多个字节。变量地址指的是变量所占内存单元第一个字节的地址,也称 首地址;
 取地址运算符是单目运算符,操作数必须是变量,其优先级为2级,结合性为从右向左;
 在C++语言中,“&”是一符多义的符号:位运算中的位与运算符、定义变量语句中的引用
变量说明符、取地址运算符。不同场合具有不同的含义,应当根据上下文来区分。
举例:已定义变量x:int x = 10;
cout << x; // 显示变量x内存单元中保存的数值:10
cout << &x; // 显示变量x的内存地址


阚道宏
2.7 引用与指针
• 举例: int x=10;
执行下列语句:
cout << &x ;
将显示变量x的内存地址:000003E8(十六进制的1000)
• 指针类型
• 指向类型
int x=10 : 1000
~1003
10
(4个字节)
Addt
type
4
4byte unsign int
舜居的


阚道宏
2.7 引用与指针
• 通过地址访问某个变量x 的步骤需分3步
– 定义一个专门保存地址
的变量(假设为p),该 变量称为指针变量
– 取出变量x的地址,将其 赋值给p
– 通过指针变量p所保存的 地址来访问变量x的内存 单元
• 指针变量
short x=10, y=20;
short x=10 : 1000 1001
10
(2个字节)
short y=20 : 1002 1003
20
(2个字节)
...... ......
指针变量p : 2000 ~2003
1000
(4个字节)


阚道宏
2.7 引用与指针
C++语法:定义指针变量
指向类型 *指针变量名 ;
语法说明:
 指向类型指定了指针变量能够保存哪种类型变量的地址,或者说指定了指针变量
能够指向哪种类型的变量;
 *是指针变量说明符。定义变量语句中,变量名前加“*”表示该变量为指针变量;
 指针变量名需符合标识符的命名规则。
举例:已定义变量x和y:int x, y;
int *p; // “int *”表示int型指针
// 定义一个int型指针变量p,未初始化,即未指向任何变量
p = &x; // 取出变量x的地址并赋值给指针变量p,则p指向变量x
或
int *p = &x; // 定义一个int型指针变量p,初始化为指向变量x
p = &y; // 取出变量y的地址并赋值给指针变量p,则p修改了指向,现指向变量y
o


阚道宏
2.7 引用与指针
• 变量的间接访问
C++语法:指针运算符“*”
*指针变量名
语法说明:
 按照指针变量所保存的地址访问所指向的内存单元,可写入或读出数据;
 间接访问之前,指针变量应当指向某个已经存在的变量,即指针变量必须先赋值,再间接访 问,否则将出现错误;
 指针运算符是单目运算符,其优先级为2级,结合性为从右向左;
 C++语言中,“*”是一符多义的符号:算术运算中的乘法运算符、定义变量语句中的指针变
量说明符、指针运算符。不同场合具有不同的含义,应根据上下文来区分。
举例:已定义变量x:int x;
x = 10; // 通过变量名直接访问,将变量x内存单元中的数值修改为10
cout << x; // 通过变量名直接访问,显示变量x内存单元中保存的数值:10
或
int *p = &x; // 定义一个与变量x数据类型一致的指针变量p,初始化为指向变量x
*p = 10; // 通过指针变量间接访问x,将变量x内存单元中的数值修改为10
cout << *p; // 通过指针变量间接访问x,显示变量x内存单元中保存的数值:10
cout << p; // 直接访问指针变量自身,显示p中所保存的地址(即变量x的地址)
文盾运算符 0


阚道宏
2.7 引用与指针
例2-5 指针变量举例
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
// C++程序实例:键盘输入一个数值,计算其平方的值。
#include <iostream>
using namespace std;
int main()
{
int x; // 定义一个变量x
cin >> x; // 键盘输入x的值
/*
cout << x * x << endl; // 计算并显示x2的值
*/
int *p = &x; // 定义一个指针变量p,初始化为指向变量x
cout << (*p) * (*p) << endl; // 改用间接访问*p来计算并显示x2的值
// 间接访问*p所读出的数据就是变量x的值
return 0;
}


阚道宏
2.7 引用与指针
• 使用指针变量应当注意的问题
– 指针变量应当先赋值,再间接访问
int *p;
cout << *p; // 错误
• 指针变量不能用整数来赋值
int *p = 10; // 错误
int *p = 0; // 赋值为0,表示p不指向任何变量
指向本poass的内存单元
空地址


阚道宏
2.7 引用与指针
• 指针变量的指向类型应当与所指向变量的类型一致
double x = 10.5;
int *p;
p = &x; // 错误
– void类型
int x = 10; double y = 10.5;
void *p;
p = &x; // 正确
cout << *( (int *)p ); //显示结果为10
p = &y; // 正确
cout << *( (double *)p ); //显示结果为10.5
指任意类型 读取cast


阚道宏
2.7 引用与指针
• 相同类型指针变量之间可以相互赋值
int x = 10, *pi = &x;
double y = 10.5, *pd = &y;
int *p1;
p1 = pi; // 正确
p1 = pd; // 错误
void *p2;
p2 = pi; // 正确
p2 = pd; // 正确


阚道宏
2.7 引用与指针
• 可以定义指向常变量的指针,通过该指针变量不能修改所指向
的常变量的值
const int x = 10;
x = 15; // 错误
const int *p;
p = &x;
cout << *p; // 正确
*p = 15; // 错误
int y = 20;
p = &y;
cout << *p; // 正确
*p = 15; // 错误


阚道宏
2.7 引用与指针
• 可以定义指针类型的常变量(即指针常变
量),需定义时初始化,以后不能再改变
其指向
int x = 10, y = 20;
int * const p = &x;
p = &y; // 错误


阚道宏
第3章 算法与控制结构
• 本章内容
– 3.1 算法
– 3.2 布尔类型
– 3.3 选择语句
– 3.4 循环语句
– 3.5 算法设计与评价


阚道宏
3.1 算法
• 算法结构
– 顺序结构:按书写顺序依次执行操作步骤的算法
– 选择结构:某些操作步骤需要满足特定条件才被执
行的算法
– 循环结构:满足特定条件下将重复执行某些操作步
骤的算法
• 条件
– 布尔类型及相关运算符


阚道宏
3.2 布尔类型
• 布尔(bool)类型:true、false,1个字节
例3-3 bool类型应用举例
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
#include <iostream> using namespace std;
int main() {
bool x = true; // 定义一个bool型变量x,并初始化为true。true和false是bool型常量 cout << x << endl; // 显示变量x的值,true被显示为1
int y; // 再定义1个int型变量
y = x; // 将bool型变量x赋值给int型变量y,C++将自动转换类型,true被转换为1
cout << y << endl; // 显示变量y的值,显示结果为1
x = 5; // 将int型常量5赋值给bool型变量x,5被转换为true,即非0值转为true // 此时编译系统会提示warning错误
cout << x << endl; // 显示变量x的值,true被显示为1 return 0; }


阚道宏
3.2 布尔类型
• 关系运算符:比较大小
表3-1 关系运算符
关系运算符 优先级 结合性
> ,大于
6
从左向右
>=,大于等于
< ,小于
<=,小于等于
==,等于
7
!=,不等于


阚道宏
3.2 布尔类型
例3-4 关系表达式举例
关系表达式 布尔型结果 备注
5 > 3 true
5 >= 3 true
5 <= 3 false
5 == 3 false
5 != 3 true
2+3 <= 1+2 false 比较2个表达式时,先计算表达式,再比较其结
果。算术运算符优先级高于关系运算符
例3-5 由关系表达式所描述的条件举例(假设已定义变量:int x = 10;)
条件 布尔型结果 条件是否成立
x > 5 true 条件成立
x < 5 false 条件不成立
x - 5 == 5 true 条件成立
x - 5 < 0 false 条件不成立


阚道宏
3.2 布尔类型
• 逻辑运算符:复合条件
表3-2 逻辑运算符
逻辑运算符 优先级 运算规则
&&,逻辑与 11 双目运算符。若2个操作数都为true,则结果为true;否则
为false。相当于“并且”的意思
|| ,逻辑或 12 双目运算符。若2个操作数都为false,则结果为false;否则
为true。相当于“或”的意思
! ,逻辑非 2 单目运算符。若操作数为true则结果为false;若操作数为
false则结果为true。相当于“求反”的意思
例3-6 由逻辑表达式所描述的复合条件举例(假设已定义:int x=10, y=20;)
复合条件 布尔型结果 条件是否成立
x > 5 && y > 10 true 条件成立
x < 5 || y < 10 false 条件不成立
x - 5 == 5 || y == 0 true 条件成立
!(x > 5) false 条件不成立


阚道宏
3.3 选择语句
• 求x的倒数
• 句型:如果......,就......,否则......
• 选择结构:如果条件成立,则执行算法分支1,否 则执行算法分支2
• 选择语句:if-else语句、switch-case语句
例3-7 算法举例:给定x的值,求其倒数
1
2
3
4
5
6
定义变量x,申请保存数值的内存空间;
从键盘输入变量x的值;
如果条件“x不等于0”成立,则转到4计算倒数,否则转到5提示错误信息;
计算并显示表达式1/x的结果,转6;
条件“x不等于0”不成立,显示错误信息;
算法结束


阚道宏
3.3 选择语句
sgn(x) =
1 (x > 0)
0 (x = 0)
-1 (x < 0)
例3-11 求符号函数sgn(x)的C++程序(if-else if语句)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
#include <iostream>
using namespace std;
int main()
{
float x; // 定义一个float型变量x
cin >> x; // 键盘输入变量x的值
int sgn; // 定义一个int型变量sgn,用于保存结果
if (x == 0) sgn = 0; // 首先检查x等于0的情况
else if (x > 0) sgn = 1; // 再检查x大于0的情况
else sgn = -1; // 最后剩下的就是x小于0的情况
cout << sgn << endl; // 显示变量sgn的值,即符号函数的结果
return 0;
}


阚道宏
3.3 选择语句
C++语法:if-else if语句
if (表达式1) 语句1
else if (表达式2) 语句2
......
else if (表达式n) 语句n
else 语句n+1
语法说明:
 表达式1~n分别是依次指定的判断条件。表达式的结果应为布尔类型,例如关系
表达式或逻辑表达式。非布尔类型的表达式将被自动转换,0转为false,非0值转
为true;
 语句1~n分别对应条件成立时执行的语句,可以是单条语句、复合语句或空语句;
 语句n+1是所有条件都不成立时执行的语句,可以是单条语句、复合语句。如果
所有条件都不成立时不需要执行什么处理,即空语句,则省略else和{ 语句n+1 };
 计算机执行该语句时,首先计算表达式1,若为true则执行语句1;否则继续计算
表达式2,......,直到表达式n;如果所有条件都不成立则执行else后面的语句n+1。
计算机只会执行语句1~n+1中的一条。


阚道宏
3.3 选择语句
• 条件运算符“? :”
int a = 5, b = 10, c;
if (a > b) c = a;
else c = b;
C++语法:条件运算符“? :”
表达式 ? 表达式1 : 表达式2
语法说明:
 由条件运算符构成的表达式称为条件表达式。其中的表达式指定一个判断条件,该表达式结 果应为布尔类型,例如关系表达式或逻辑表达式。非布尔类型的表达式将被自动转换,0转为
false,非0值转为true;
 如果表达式的结果为true,则计算表达式1,将其结果作为整个条件表达式的结果;否则计算
表达式2,将其结果作为整个条件表达式的结果;
 条件运算符为3目运算符,优先级为13,结合性为从右到左。
举例:int a = 5, b = 10, c;
a>b ? a : b // 这是一个条件表达式,其结果等于10,数据类型为int型
cout << (a>b ? a : b); // 显示条件表达式的结果
c = a>b ? a : b; // 将条件表达式的结果赋值给变量c


阚道宏
3.3 选择语句
• switch-case语句
例3-13 一类特殊的多分支结构算法
1
2
3
4
5
6
7
计算某一表达式,判断其结果属于下列哪种情况;
情况1:执行算法分支1,执行结束转到7;
情况2:执行算法分支2,执行结束转到7;
......
情况n:执行算法分支n,执行结束转到7;
否则属于其它情况:执行算法分支n+1,执行结束转到7;
算法结束


阚道宏
3.3 选择语句
C++语法:switch-case语句
switch (表达式) {
case 常量表达式1: 语句1
case 常量表达式2: 语句2
......
case 常量表达式n: 语句n
default: 语句n+1 }
语法说明:
 计算机执行该语句时,首先计算switch后面的表达式,然后将其结果与各case后的常量表达式结果
进行比对。若比对成功,则以比对成功的case语句为起点,顺序执行后面所有的语句,直到整个
switch语句结束,或遇到break语句时中途跳出,继续执行switch语句的下一条语句。如果所有比对
都不成功则将default语句作为执行的起点;
 表达式的结果应当是整型(char, short, int, long),不能是浮点型;
 常量表达式1~n分别列出上述表达式可能得出的结果。常量表达式只能是常量,或由常量组成的表
达式。各常量表达式的值不能相同,不能重复;
 语句1~n分别对应常量表达式比对成功时应执行的语句,通常最后都增加一条break语句作为本case
的结束语句。语句1~n为复合语句时,大括号也可省略;
 语句n+1是default后面的语句,所有比对都不成功时应执行的语句。default语句习惯上被放在最后;
else i


阚道宏
3.3 选择语句
例3-16 显示不同月份天数的C++程序(共用语句)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
#include <iostream> using namespace std;
int main() {
int month; // 定义一个int型变量month cin >> month; // 键盘输入一个月份(1~12),保存到变量month中
// 下列switch-case语句显示不同月份的天数 switch ( month ) {
case 1: // 1月大 case 3: // 3月大 case 5: // 5月大 case 7: // 7月大 case 8: // 8月大 case 10: // 10月大 case 12: cout << “31天” << endl; break; // 1、3、5、7、8、10、12月共用相同的语句 case 4: // 4月小 case 6: // 6月小 case 9: // 9月小 case 11: cout << “30天” << endl; break; // 4、6、9、11月共用相同的语句 case 2: cout << “28或29天” << endl; break; // 2月 default: cout << “Input Error” << endl; break; // 输入错误 }
return 0; }
乀


阚道宏
3.4 循环语句
• 句型:如果......,就重复做......,否则停止
• 循环结构:如果条件成立,则重复执行循环体,
否则结束循环
• 循环4要素:循环变量及其初始值、循环条件、
循环体
• 循环语句:while语句、do-while语句、for语句


阚道宏
3.4 循环语句
C++语法:while语句
while (表达式)
语句
语法说明:
 表达式指定一个循环条件。该表达式结果应为布尔类型,例如关系表达
式或逻辑表达式。非布尔类型的表达式将被自动转换,0转为false,非0值
转为true;
 语句是描述循环体的C++语句,即条件成立时循环执行的语句。如循环条
件一开始就不成立,则循环体一次也不执行。循环体中应包含使循环条
件趋向于false的语句,否则循环条件一直为ture,循环体将无休止地执行,
俗称为死循环;
 计算机执行该语句时,首先计算表达式(即循环条件),若结果为true
(条件成立),则重复执行循环体语句;否则结束循环。


阚道宏
3.4 循环语句
例3-18 求解奇数数列前N项累加和的C++程序(while语句)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
#include <iostream> using namespace std;
int main() {
int N; // 定义一个int型变量N cin >> N; // 键盘输入变量N的值
int n = 1, sum = 0; // 定义循环变量n(初始值为1),
// 定义保存累加结果的变量sum(初始值为0)
while (n <= N) // 用小括号将循环条件n<=N括起来 {
sum += 2*n - 1; // 将当前项的值2n-1累加到sum上
n++; // 将n加1,准备下一次累加。该语句使得循环条件n<=N趋向于false
// 执行完循环体最后一条语句之后,转到第11行,重新判断循环条件
}
// 循环结束后,继续执行while语句的下一条语句
cout << sum << endl; // 显示变量sum的值,即前N项的累加和 return 0; }


阚道宏
3.4 循环语句
C++语法:do-while语句
do
语句
while (表达式) ;
语法说明:
 表达式指定一个循环条件。该条件放在循环体语句的后面,即先执行,
再判断条件。该表达式结果应为布尔类型,例如关系表达式或逻辑表
达式。非布尔类型的表达式将被自动转换,0转为false,非0值转为
true;
 语句是描述循环体的C++语句,不管循环条件是否成立,循环体至少
执行一次。如果循环体包含多条语句,则必须用大括号“{ }”括起来。
循环体中应包含使循环条件趋向于false的语句,否则将造成死循环;
 计算机执行该语句时,首先执行一次循环体,然后再计算表达式
(即循环条件),若结果为true(条件成立),则重复执行循环体语
句;否则结束循环。


阚道宏
3.4 循环语句
例3-19 求解奇数数列前N项累加和的C++程序(do-while语句)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
#include <iostream> using namespace std;
int main() {
int N; // 定义一个int型变量N cin >> N; // 键盘输入变量N的值
int n = 1, sum = 0; // 定义循环变量n(初始值为1),
// 定义保存累加结果的变量sum(初始值为0)
do // 先执行循环体
{
sum += 2*n - 1; // 将当前项的值2n-1累加到sum上 n++; // 将n加1,准备下一次累加
} while (n <= N) ; // 后判断循环条件。如果条件成立则重复执行循环体,否则结束循环
// 循环结束后,继续执行do-while语句的下一条语句
cout << sum << endl; // 显示变量sum的值,即前N项的累加和 return 0; }


阚道宏
3.4 循环语句
C++语法:for语句
for (表达式1; 表达式2; 表达式3)
语句
语法说明:
 表达式1只在正式循环前执行一次,通常用于为循环算法赋初始值;
 表达式2指定一个循环条件。每次循环时,先计算该表达式,如果为true
则执行下面的循环体语句,否则结束循环;
 表达式3在每次循环体执行结束之后都被执行一次,主要用于修改循环
条件中的某些变量,使循环条件趋向于false;
 语句是描述循环体的C++语句;
 计算机执行该语句时,首先计算表达式1(通常为赋初始值);再计算
表达式2(即循环条件),若结果为true则重复执行循环体语句,每次执
行完循环体语句之后都计算一次表达式3(通常用于修改循环条件中的
某些变量),然后再返回表达式2重新判断条件;若表达式2的结果为
false则结束循环。


阚道宏
3.4 循环语句
例3-20 求解奇数数列前N项累加和的C++程序(for语句)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
#include <iostream> using namespace std;
int main() {
int N; // 定义一个int型变量N cin >> N; // 键盘输入变量N的值
int n, sum = 0; // 定义循环变量n(由for语句将其初始值设为1),
// 定义保存累加结果的变量sum(初始值为0)
for (n = 1; n <= N; n++) // 集中用3个表达式来指定n的初始值为1、循环条件为n<=N // 以及修改循环条件中的变量n,使循环条件趋向于false
{
sum += 2*n - 1; // 循环体被简化了,原来的n++语句被放入到for语句里面
} // 循环体只有一条语句,此时这对大括号可以省略
cout << sum << endl; // 显示变量sum的值,即前N项的累加和 return 0; }


阚道宏
3.4 循环语句
C++语法:逗号运算符“,”
表达式1, 表达式2, ......, 表达式n
语法说明:
 计算机从左到右依次计算表达式1~表达式n,将最后一个表达式(即表达式n)
的结果作为整个逗号表达式的结果;
 逗号运算符的优先级为15(最低),结合性为从左到右。
举例:int a, b, c;
a = 5, b = 10, c = a+b // 计算完该表达式后,a的值为5,b的值为10,c的值为15
// 整个逗号表达式的等于最后一个表达式的结果:数值为15,类型为int型
cout << (a = 5, b = 10, c = a+b); // 显示逗号表达式的结果


阚道宏
3.4 循环语句
a = 5; b = 10; c = a+b;
a = 5, b = 10, c = a+b;
例3-21 求解奇数数列前N项累加和的C++程序(for语句)
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
#include <iostream> using namespace std;
int main() {
int N; // 定义一个int型变量N cin >> N; // 键盘输入变量N的值
int n, sum;
for (n=1, sum=0; n <= N; n++) // 将n和sum的初始化都放入for语句内部,简化程序 sum += 2*n - 1;
cout << sum << endl; // 显示变量sum的值,即前N项的累加和 return 0; }
for (int n=1, sum=0; n <= N; sum +=2*n-1, n++) ;


阚道宏
3.4 循环语句
• 控制语句
造成程序执行顺序跳转的语句被统称为控制语句。
int a, b, c;
cin >> a >> b;
if (a > b)
c = a;
else
c = b;
cout << c << endl;